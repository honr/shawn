# create/load random seed

random_seed action=create filename=.rseed



# distance estimation
# not used below is the 'offset' parameter

create_normal name=normal_multiplier mean=1 stddev=0.1
create_randomized_distance_estimate name=normal_dist multiplier=normal_multiplier chop_low=0 resample_chopped=false

create_uniform name=uniform_multiplier lower=.9 upper=1.1
create_randomized_distance_estimate name=uniform_dist multiplier=uniform_multiplier chop_low=0 resample_chopped=false



# construct an empty world,
# using the edge model "list"
# using the communication model "disk_graph" (nodes can
#    communicate iff they are within range "range" )
# using transmission models(chain): stats_chain - random_drop_chain - reliable

prepare_world edge_model=list comm_model=disk_graph range=14 transm_model=stats_chain

chain_transm_model name=random_drop_chain probability=0.0
chain_transm_model name=reliable



# set new loglevel for localization processor to avoid debug messages

logging_reconfigure action=set_level logger=processors.localization level=info
logging_reconfigure action=set_additivity logger=user additivity=false



# possible settings for processors:
#  (default values in brackets)
#     loc_est_dist           :
#        name of distance estimation task. either you could create
#        a new distance estimation (as done above) or use existing
#        'perfect_estimate'.
#     loc_dist_algo          : [euclidean|(dv_hop)|sum_dist|gpsless_lcs]
#     loc_pos_algo           : [lateration|(min_max)|gpsless_ncs|gpsless_ncs_extended]
#     loc_ref_algo           : [iterative_lateration|(none)]
#     loc_floodlimit         : 0..max<int>; default 4
#     loc_idle_time          : 0..max<int>; default 4
#     loc_idle_shutdown_time : 0..max<int>; default 4
#     loc_check_residue      : [(true)|false]
#     loc_startup_anchor_frac: 0..1; default 0
#        set anchor fraction. on boot processor decides whether being
#        a anchor or not with chance of 'startup_anchor_frac'
#     loc_rollback_period    : 0..max<int>; default max<int>
#        number of iterations, after which a rollback is done
#     loc_rollback_limit     : 0..max<int>; default 0
#        maximal number of rollbacks. if value is 0, rollbacks are not used
#        and the processor is shutdown after all modules are finished.


#loc_est_dist=perfect_estimate
loc_est_dist=normal_dist

loc_dist_algo=dv_hop
loc_pos_algo=lateration
loc_ref_algo=iterative_lateration
loc_check_residue=true
loc_floodlimit=4
loc_idle_time=5
loc_idle_shutdown_time=20
loc_startup_anchor_frac=0



# Euclidean parameters
#     loc_eucl_col_check_std: [none|strict|(lax)]
#        check collinearity of triangles self-n1-n2 and n1-n2-anchor.
#        lax means, that neighbors rejected, if _both_ triangles are collinear,
#        in strict case, neighbors rejected, if _any_ triangle is collinear.
#     loc_eucl_col_check_nv: [none|strict|(lax)]
#        check collinearity of triangles self-[n1|n2]-n3 and
#        [n1|n2]-n3-anchor
#     loc_eucl_col_check_cn: [none|(strict)|lax]
#        check collinearity of triangles self-n1-n2, n1-n2-n3 and
#        n1-n2-anchor. this check should be left at default value, because
#        'common neighbor' is very sensible on collinear nodes
#     loc_eucl_algo: [normal|opt]
#        normal euclidean algorithm works just like described in
#        langendoen-paper. neighbors used in 'neighbor vote' are selected, if
#        there is a link between n3 and n1 _or_ n2. 'common neighbor'
#        criterium is, that there is a link between n3 and n1 _and_ n2.
#        opt euclidean algorithm selects neighbors just like 'common' ones,
#        but checks in addition the 'collinearity measure' of each pairs
#        n1,n2,n3 and returns only the best measured one.
#     loc_eucl_vote: [nv|cn|(nvcn)|cnnv]
#        in euclidean there are two 'vote methods': 'neighbor vote' and
#        'common neighbor'.
#        nv means, that only 'neighbor vote' is used. cn is same with
#        'common neighbor'.
#        'nvcn' uses both methods. if both produce a result, the result from
#        nv is taken. 'cnnv' means the same the other way around.
#     loc_col_measure: 0..max<double>; default: 0.1
#        this value is the crucial factor to define, whether a triangle is
#        collinear or not. if the sum of the two shorter sides is greater than
#        the longer side multiplied by one plus mentioned col_measure, the
#        triangle is accepted. increasing this value leads to a lower
#        coverage.
#        mention, that niculescu rather sets this value to two times the
#        ranging error. on the one hand, this leads to a very rare coverage
#        in my simulations, on the other hand, as mentioned by langendoen
#        in his implementation of ad-hoc positioning via omnet++, it is hard
#        to give there a maximum value while working with a normal
#        distribution getting ranging errors, because they are not bounded by
#        a fixed value.

loc_eucl_col_check_std=lax
loc_eucl_col_check_nv=lax
loc_eucl_col_check_cn=strict
loc_eucl_algo=opt
loc_eucl_vote=nvcn
loc_eucl_col_measure=0.1



# Refinement parameters
#     loc_ref_iteration_limit: 0..max<int>; default 5
#        maximum number of iterations in refinement phase.
#     loc_ref_twin_measure: 0..1; default 0.1
#        percentage of communication range. this parameter is taken to decide,
#        whether a neighbor is twin or not.
#     loc_ref_abort_pos_update: 0..1; default 0.001
#        percentage of communication range. decides, if new position is very
#        close to old one, whether the refinement phase is finished or not
#        after position update
#     loc_ref_min_confident_nbrs: 0..max<int>; default 5
#        gives the minimum of confident neighbors to start refinement
#     loc_ref_res_acceptance: 0..1; default 0.1
#        if residuen check of lateration fails, there is a given chance,
#        namely res_acceptance, to accept the result anyway. this happens, to
#        avoid being trapped in some local mimina.

loc_ref_iteration_limit=10
loc_ref_twin_measure=0.1
loc_ref_abort_pos_update=0.001
loc_ref_min_confident_nbrs=5
loc_ref_res_acceptance=0.1



# GPSfree parameters
#     loc_gpsfree_epsilon: 0..1; default 0.0001
#        value to decide, if two angles are equal (to decide, on which side of
#        the x-axis a node is located)
#     loc_gpsfree_wait_for_lcs: 0..max<int>; default 5
#        this is the number of rounds, after that a node starts to compute its
#        NCS (after receiving the first LCS of a neighbor) in the extended
#        version of GPSfree

loc_gpsfree_epsilon=0.0001
loc_gpsfree_wait_for_lcs=5



# add 'count' nodes in a 'width'x'height'-sized box,
# each node gets one processor, namely "localization"

rect_world width=100 height=100 count=225 processors=localization



# anchor_placement: outer_grid, inner_grid, random
# placed_anchor_cnt: >= 0

localization_anchor_placement anchor_placement=outer_grid placed_anchor_cnt=11



# start simulation

simulation max_iterations=50



# ps_out: optional filename of postscript-output of the topology
# ls_out: optional filename to write data in csv-style
# type: required, if ls_out is set. choices are 'create' and 'append'.

localization_evaluation loc_ps_out=topology.ps loc_ls_out=test.csv loc_ls_type=create



#------------------------------------------------------------------------
# Source  $Source: /cvs/shawn/shawn/apps/localization/randomlocalization.conf,v $
# Version $Revision$
# Date    $Date$
#------------------------------------------------------------------------
# $Log: randomlocalization.conf,v $
# Revision 1.2  2005/06/09 15:38:30  tbaum
# added GPSfree
#
# Revision 1.1  2004/12/06 11:29:05  tbaum
# moved from legacyapps to apps
# : Enter Log.  Lines beginning with `CVS:' are removed automatically
#
# Revision 1.2  2004/11/26 22:29:56  tbaum
# removed unnecessary parameter in description
#
# Revision 1.1  2004/11/26 22:01:10  tbaum
# added configuration example
#
#------------------------------------------------------------------------

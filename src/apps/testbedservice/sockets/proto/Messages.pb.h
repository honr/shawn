// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Messages.proto

#ifndef PROTOBUF_Messages_2eproto__INCLUDED
#define PROTOBUF_Messages_2eproto__INCLUDED

#include "../buildfiles/_apps_enable_cmake.h"
#ifdef ENABLE_TESTBEDSERVICE

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace de {
namespace uniluebeck {
namespace itm {
namespace gtr {
namespace messaging {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Messages_2eproto();
void protobuf_AssignDesc_Messages_2eproto();
void protobuf_ShutdownFile_Messages_2eproto();

class Msg;
class SingleRequestMultipleResponseRequest;
class SingleRequestMultipleResponseResponse;

// ===================================================================

class Msg : public ::google::protobuf::Message {
 public:
  Msg();
  virtual ~Msg();
  
  Msg(const Msg& from);
  
  inline Msg& operator=(const Msg& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Msg& default_instance();
  
  void Swap(Msg* other);
  
  // implements Message ----------------------------------------------
  
  Msg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Msg& from);
  void MergeFrom(const Msg& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string to = 1;
  inline bool has_to() const;
  inline void clear_to();
  static const int kToFieldNumber = 1;
  inline const ::std::string& to() const;
  inline void set_to(const ::std::string& value);
  inline void set_to(const char* value);
  inline void set_to(const char* value, size_t size);
  inline ::std::string* mutable_to();
  
  // required string from = 2;
  inline bool has_from() const;
  inline void clear_from();
  static const int kFromFieldNumber = 2;
  inline const ::std::string& from() const;
  inline void set_from(const ::std::string& value);
  inline void set_from(const char* value);
  inline void set_from(const char* value, size_t size);
  inline ::std::string* mutable_from();
  
  // required string msgType = 3;
  inline bool has_msgtype() const;
  inline void clear_msgtype();
  static const int kMsgTypeFieldNumber = 3;
  inline const ::std::string& msgtype() const;
  inline void set_msgtype(const ::std::string& value);
  inline void set_msgtype(const char* value);
  inline void set_msgtype(const char* value, size_t size);
  inline ::std::string* mutable_msgtype();
  
  // required uint32 priority = 4;
  inline bool has_priority() const;
  inline void clear_priority();
  static const int kPriorityFieldNumber = 4;
  inline ::google::protobuf::uint32 priority() const;
  inline void set_priority(::google::protobuf::uint32 value);
  
  // required uint64 validUntil = 5;
  inline bool has_validuntil() const;
  inline void clear_validuntil();
  static const int kValidUntilFieldNumber = 5;
  inline ::google::protobuf::uint64 validuntil() const;
  inline void set_validuntil(::google::protobuf::uint64 value);
  
  // optional bytes payload = 6;
  inline bool has_payload() const;
  inline void clear_payload();
  static const int kPayloadFieldNumber = 6;
  inline const ::std::string& payload() const;
  inline void set_payload(const ::std::string& value);
  inline void set_payload(const char* value);
  inline void set_payload(const void* value, size_t size);
  inline ::std::string* mutable_payload();
  
  // optional string replyWith = 7;
  inline bool has_replywith() const;
  inline void clear_replywith();
  static const int kReplyWithFieldNumber = 7;
  inline const ::std::string& replywith() const;
  inline void set_replywith(const ::std::string& value);
  inline void set_replywith(const char* value);
  inline void set_replywith(const char* value, size_t size);
  inline ::std::string* mutable_replywith();
  
  // optional string replyTo = 8;
  inline bool has_replyto() const;
  inline void clear_replyto();
  static const int kReplyToFieldNumber = 8;
  inline const ::std::string& replyto() const;
  inline void set_replyto(const ::std::string& value);
  inline void set_replyto(const char* value);
  inline void set_replyto(const char* value, size_t size);
  inline ::std::string* mutable_replyto();
  
  // @@protoc_insertion_point(class_scope:de.uniluebeck.itm.gtr.messaging.Msg)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* to_;
  static const ::std::string _default_to_;
  ::std::string* from_;
  static const ::std::string _default_from_;
  ::std::string* msgtype_;
  static const ::std::string _default_msgtype_;
  ::google::protobuf::uint32 priority_;
  ::google::protobuf::uint64 validuntil_;
  ::std::string* payload_;
  static const ::std::string _default_payload_;
  ::std::string* replywith_;
  static const ::std::string _default_replywith_;
  ::std::string* replyto_;
  static const ::std::string _default_replyto_;
  friend void  protobuf_AddDesc_Messages_2eproto();
  friend void protobuf_AssignDesc_Messages_2eproto();
  friend void protobuf_ShutdownFile_Messages_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Msg* default_instance_;
};
// -------------------------------------------------------------------

class SingleRequestMultipleResponseRequest : public ::google::protobuf::Message {
 public:
  SingleRequestMultipleResponseRequest();
  virtual ~SingleRequestMultipleResponseRequest();
  
  SingleRequestMultipleResponseRequest(const SingleRequestMultipleResponseRequest& from);
  
  inline SingleRequestMultipleResponseRequest& operator=(const SingleRequestMultipleResponseRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SingleRequestMultipleResponseRequest& default_instance();
  
  void Swap(SingleRequestMultipleResponseRequest* other);
  
  // implements Message ----------------------------------------------
  
  SingleRequestMultipleResponseRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SingleRequestMultipleResponseRequest& from);
  void MergeFrom(const SingleRequestMultipleResponseRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string requestId = 1;
  inline bool has_requestid() const;
  inline void clear_requestid();
  static const int kRequestIdFieldNumber = 1;
  inline const ::std::string& requestid() const;
  inline void set_requestid(const ::std::string& value);
  inline void set_requestid(const char* value);
  inline void set_requestid(const char* value, size_t size);
  inline ::std::string* mutable_requestid();
  
  // required bool reliableRequest = 2;
  inline bool has_reliablerequest() const;
  inline void clear_reliablerequest();
  static const int kReliableRequestFieldNumber = 2;
  inline bool reliablerequest() const;
  inline void set_reliablerequest(bool value);
  
  // required bool reliableResponses = 3;
  inline bool has_reliableresponses() const;
  inline void clear_reliableresponses();
  static const int kReliableResponsesFieldNumber = 3;
  inline bool reliableresponses() const;
  inline void set_reliableresponses(bool value);
  
  // required bytes payload = 4;
  inline bool has_payload() const;
  inline void clear_payload();
  static const int kPayloadFieldNumber = 4;
  inline const ::std::string& payload() const;
  inline void set_payload(const ::std::string& value);
  inline void set_payload(const char* value);
  inline void set_payload(const void* value, size_t size);
  inline ::std::string* mutable_payload();
  
  // @@protoc_insertion_point(class_scope:de.uniluebeck.itm.gtr.messaging.SingleRequestMultipleResponseRequest)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* requestid_;
  static const ::std::string _default_requestid_;
  bool reliablerequest_;
  bool reliableresponses_;
  ::std::string* payload_;
  static const ::std::string _default_payload_;
  friend void  protobuf_AddDesc_Messages_2eproto();
  friend void protobuf_AssignDesc_Messages_2eproto();
  friend void protobuf_ShutdownFile_Messages_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SingleRequestMultipleResponseRequest* default_instance_;
};
// -------------------------------------------------------------------

class SingleRequestMultipleResponseResponse : public ::google::protobuf::Message {
 public:
  SingleRequestMultipleResponseResponse();
  virtual ~SingleRequestMultipleResponseResponse();
  
  SingleRequestMultipleResponseResponse(const SingleRequestMultipleResponseResponse& from);
  
  inline SingleRequestMultipleResponseResponse& operator=(const SingleRequestMultipleResponseResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SingleRequestMultipleResponseResponse& default_instance();
  
  void Swap(SingleRequestMultipleResponseResponse* other);
  
  // implements Message ----------------------------------------------
  
  SingleRequestMultipleResponseResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SingleRequestMultipleResponseResponse& from);
  void MergeFrom(const SingleRequestMultipleResponseResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string requestId = 1;
  inline bool has_requestid() const;
  inline void clear_requestid();
  static const int kRequestIdFieldNumber = 1;
  inline const ::std::string& requestid() const;
  inline void set_requestid(const ::std::string& value);
  inline void set_requestid(const char* value);
  inline void set_requestid(const char* value, size_t size);
  inline ::std::string* mutable_requestid();
  
  // required bytes payload = 2;
  inline bool has_payload() const;
  inline void clear_payload();
  static const int kPayloadFieldNumber = 2;
  inline const ::std::string& payload() const;
  inline void set_payload(const ::std::string& value);
  inline void set_payload(const char* value);
  inline void set_payload(const void* value, size_t size);
  inline ::std::string* mutable_payload();
  
  // @@protoc_insertion_point(class_scope:de.uniluebeck.itm.gtr.messaging.SingleRequestMultipleResponseResponse)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* requestid_;
  static const ::std::string _default_requestid_;
  ::std::string* payload_;
  static const ::std::string _default_payload_;
  friend void  protobuf_AddDesc_Messages_2eproto();
  friend void protobuf_AssignDesc_Messages_2eproto();
  friend void protobuf_ShutdownFile_Messages_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SingleRequestMultipleResponseResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// Msg

// required string to = 1;
inline bool Msg::has_to() const {
  return _has_bit(0);
}
inline void Msg::clear_to() {
  if (to_ != &_default_to_) {
    to_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& Msg::to() const {
  return *to_;
}
inline void Msg::set_to(const ::std::string& value) {
  _set_bit(0);
  if (to_ == &_default_to_) {
    to_ = new ::std::string;
  }
  to_->assign(value);
}
inline void Msg::set_to(const char* value) {
  _set_bit(0);
  if (to_ == &_default_to_) {
    to_ = new ::std::string;
  }
  to_->assign(value);
}
inline void Msg::set_to(const char* value, size_t size) {
  _set_bit(0);
  if (to_ == &_default_to_) {
    to_ = new ::std::string;
  }
  to_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Msg::mutable_to() {
  _set_bit(0);
  if (to_ == &_default_to_) {
    to_ = new ::std::string;
  }
  return to_;
}

// required string from = 2;
inline bool Msg::has_from() const {
  return _has_bit(1);
}
inline void Msg::clear_from() {
  if (from_ != &_default_from_) {
    from_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& Msg::from() const {
  return *from_;
}
inline void Msg::set_from(const ::std::string& value) {
  _set_bit(1);
  if (from_ == &_default_from_) {
    from_ = new ::std::string;
  }
  from_->assign(value);
}
inline void Msg::set_from(const char* value) {
  _set_bit(1);
  if (from_ == &_default_from_) {
    from_ = new ::std::string;
  }
  from_->assign(value);
}
inline void Msg::set_from(const char* value, size_t size) {
  _set_bit(1);
  if (from_ == &_default_from_) {
    from_ = new ::std::string;
  }
  from_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Msg::mutable_from() {
  _set_bit(1);
  if (from_ == &_default_from_) {
    from_ = new ::std::string;
  }
  return from_;
}

// required string msgType = 3;
inline bool Msg::has_msgtype() const {
  return _has_bit(2);
}
inline void Msg::clear_msgtype() {
  if (msgtype_ != &_default_msgtype_) {
    msgtype_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& Msg::msgtype() const {
  return *msgtype_;
}
inline void Msg::set_msgtype(const ::std::string& value) {
  _set_bit(2);
  if (msgtype_ == &_default_msgtype_) {
    msgtype_ = new ::std::string;
  }
  msgtype_->assign(value);
}
inline void Msg::set_msgtype(const char* value) {
  _set_bit(2);
  if (msgtype_ == &_default_msgtype_) {
    msgtype_ = new ::std::string;
  }
  msgtype_->assign(value);
}
inline void Msg::set_msgtype(const char* value, size_t size) {
  _set_bit(2);
  if (msgtype_ == &_default_msgtype_) {
    msgtype_ = new ::std::string;
  }
  msgtype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Msg::mutable_msgtype() {
  _set_bit(2);
  if (msgtype_ == &_default_msgtype_) {
    msgtype_ = new ::std::string;
  }
  return msgtype_;
}

// required uint32 priority = 4;
inline bool Msg::has_priority() const {
  return _has_bit(3);
}
inline void Msg::clear_priority() {
  priority_ = 0u;
  _clear_bit(3);
}
inline ::google::protobuf::uint32 Msg::priority() const {
  return priority_;
}
inline void Msg::set_priority(::google::protobuf::uint32 value) {
  _set_bit(3);
  priority_ = value;
}

// required uint64 validUntil = 5;
inline bool Msg::has_validuntil() const {
  return _has_bit(4);
}
inline void Msg::clear_validuntil() {
  validuntil_ = GOOGLE_ULONGLONG(0);
  _clear_bit(4);
}
inline ::google::protobuf::uint64 Msg::validuntil() const {
  return validuntil_;
}
inline void Msg::set_validuntil(::google::protobuf::uint64 value) {
  _set_bit(4);
  validuntil_ = value;
}

// optional bytes payload = 6;
inline bool Msg::has_payload() const {
  return _has_bit(5);
}
inline void Msg::clear_payload() {
  if (payload_ != &_default_payload_) {
    payload_->clear();
  }
  _clear_bit(5);
}
inline const ::std::string& Msg::payload() const {
  return *payload_;
}
inline void Msg::set_payload(const ::std::string& value) {
  _set_bit(5);
  if (payload_ == &_default_payload_) {
    payload_ = new ::std::string;
  }
  payload_->assign(value);
}
inline void Msg::set_payload(const char* value) {
  _set_bit(5);
  if (payload_ == &_default_payload_) {
    payload_ = new ::std::string;
  }
  payload_->assign(value);
}
inline void Msg::set_payload(const void* value, size_t size) {
  _set_bit(5);
  if (payload_ == &_default_payload_) {
    payload_ = new ::std::string;
  }
  payload_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Msg::mutable_payload() {
  _set_bit(5);
  if (payload_ == &_default_payload_) {
    payload_ = new ::std::string;
  }
  return payload_;
}

// optional string replyWith = 7;
inline bool Msg::has_replywith() const {
  return _has_bit(6);
}
inline void Msg::clear_replywith() {
  if (replywith_ != &_default_replywith_) {
    replywith_->clear();
  }
  _clear_bit(6);
}
inline const ::std::string& Msg::replywith() const {
  return *replywith_;
}
inline void Msg::set_replywith(const ::std::string& value) {
  _set_bit(6);
  if (replywith_ == &_default_replywith_) {
    replywith_ = new ::std::string;
  }
  replywith_->assign(value);
}
inline void Msg::set_replywith(const char* value) {
  _set_bit(6);
  if (replywith_ == &_default_replywith_) {
    replywith_ = new ::std::string;
  }
  replywith_->assign(value);
}
inline void Msg::set_replywith(const char* value, size_t size) {
  _set_bit(6);
  if (replywith_ == &_default_replywith_) {
    replywith_ = new ::std::string;
  }
  replywith_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Msg::mutable_replywith() {
  _set_bit(6);
  if (replywith_ == &_default_replywith_) {
    replywith_ = new ::std::string;
  }
  return replywith_;
}

// optional string replyTo = 8;
inline bool Msg::has_replyto() const {
  return _has_bit(7);
}
inline void Msg::clear_replyto() {
  if (replyto_ != &_default_replyto_) {
    replyto_->clear();
  }
  _clear_bit(7);
}
inline const ::std::string& Msg::replyto() const {
  return *replyto_;
}
inline void Msg::set_replyto(const ::std::string& value) {
  _set_bit(7);
  if (replyto_ == &_default_replyto_) {
    replyto_ = new ::std::string;
  }
  replyto_->assign(value);
}
inline void Msg::set_replyto(const char* value) {
  _set_bit(7);
  if (replyto_ == &_default_replyto_) {
    replyto_ = new ::std::string;
  }
  replyto_->assign(value);
}
inline void Msg::set_replyto(const char* value, size_t size) {
  _set_bit(7);
  if (replyto_ == &_default_replyto_) {
    replyto_ = new ::std::string;
  }
  replyto_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Msg::mutable_replyto() {
  _set_bit(7);
  if (replyto_ == &_default_replyto_) {
    replyto_ = new ::std::string;
  }
  return replyto_;
}

// -------------------------------------------------------------------

// SingleRequestMultipleResponseRequest

// required string requestId = 1;
inline bool SingleRequestMultipleResponseRequest::has_requestid() const {
  return _has_bit(0);
}
inline void SingleRequestMultipleResponseRequest::clear_requestid() {
  if (requestid_ != &_default_requestid_) {
    requestid_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& SingleRequestMultipleResponseRequest::requestid() const {
  return *requestid_;
}
inline void SingleRequestMultipleResponseRequest::set_requestid(const ::std::string& value) {
  _set_bit(0);
  if (requestid_ == &_default_requestid_) {
    requestid_ = new ::std::string;
  }
  requestid_->assign(value);
}
inline void SingleRequestMultipleResponseRequest::set_requestid(const char* value) {
  _set_bit(0);
  if (requestid_ == &_default_requestid_) {
    requestid_ = new ::std::string;
  }
  requestid_->assign(value);
}
inline void SingleRequestMultipleResponseRequest::set_requestid(const char* value, size_t size) {
  _set_bit(0);
  if (requestid_ == &_default_requestid_) {
    requestid_ = new ::std::string;
  }
  requestid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SingleRequestMultipleResponseRequest::mutable_requestid() {
  _set_bit(0);
  if (requestid_ == &_default_requestid_) {
    requestid_ = new ::std::string;
  }
  return requestid_;
}

// required bool reliableRequest = 2;
inline bool SingleRequestMultipleResponseRequest::has_reliablerequest() const {
  return _has_bit(1);
}
inline void SingleRequestMultipleResponseRequest::clear_reliablerequest() {
  reliablerequest_ = false;
  _clear_bit(1);
}
inline bool SingleRequestMultipleResponseRequest::reliablerequest() const {
  return reliablerequest_;
}
inline void SingleRequestMultipleResponseRequest::set_reliablerequest(bool value) {
  _set_bit(1);
  reliablerequest_ = value;
}

// required bool reliableResponses = 3;
inline bool SingleRequestMultipleResponseRequest::has_reliableresponses() const {
  return _has_bit(2);
}
inline void SingleRequestMultipleResponseRequest::clear_reliableresponses() {
  reliableresponses_ = false;
  _clear_bit(2);
}
inline bool SingleRequestMultipleResponseRequest::reliableresponses() const {
  return reliableresponses_;
}
inline void SingleRequestMultipleResponseRequest::set_reliableresponses(bool value) {
  _set_bit(2);
  reliableresponses_ = value;
}

// required bytes payload = 4;
inline bool SingleRequestMultipleResponseRequest::has_payload() const {
  return _has_bit(3);
}
inline void SingleRequestMultipleResponseRequest::clear_payload() {
  if (payload_ != &_default_payload_) {
    payload_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& SingleRequestMultipleResponseRequest::payload() const {
  return *payload_;
}
inline void SingleRequestMultipleResponseRequest::set_payload(const ::std::string& value) {
  _set_bit(3);
  if (payload_ == &_default_payload_) {
    payload_ = new ::std::string;
  }
  payload_->assign(value);
}
inline void SingleRequestMultipleResponseRequest::set_payload(const char* value) {
  _set_bit(3);
  if (payload_ == &_default_payload_) {
    payload_ = new ::std::string;
  }
  payload_->assign(value);
}
inline void SingleRequestMultipleResponseRequest::set_payload(const void* value, size_t size) {
  _set_bit(3);
  if (payload_ == &_default_payload_) {
    payload_ = new ::std::string;
  }
  payload_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SingleRequestMultipleResponseRequest::mutable_payload() {
  _set_bit(3);
  if (payload_ == &_default_payload_) {
    payload_ = new ::std::string;
  }
  return payload_;
}

// -------------------------------------------------------------------

// SingleRequestMultipleResponseResponse

// required string requestId = 1;
inline bool SingleRequestMultipleResponseResponse::has_requestid() const {
  return _has_bit(0);
}
inline void SingleRequestMultipleResponseResponse::clear_requestid() {
  if (requestid_ != &_default_requestid_) {
    requestid_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& SingleRequestMultipleResponseResponse::requestid() const {
  return *requestid_;
}
inline void SingleRequestMultipleResponseResponse::set_requestid(const ::std::string& value) {
  _set_bit(0);
  if (requestid_ == &_default_requestid_) {
    requestid_ = new ::std::string;
  }
  requestid_->assign(value);
}
inline void SingleRequestMultipleResponseResponse::set_requestid(const char* value) {
  _set_bit(0);
  if (requestid_ == &_default_requestid_) {
    requestid_ = new ::std::string;
  }
  requestid_->assign(value);
}
inline void SingleRequestMultipleResponseResponse::set_requestid(const char* value, size_t size) {
  _set_bit(0);
  if (requestid_ == &_default_requestid_) {
    requestid_ = new ::std::string;
  }
  requestid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SingleRequestMultipleResponseResponse::mutable_requestid() {
  _set_bit(0);
  if (requestid_ == &_default_requestid_) {
    requestid_ = new ::std::string;
  }
  return requestid_;
}

// required bytes payload = 2;
inline bool SingleRequestMultipleResponseResponse::has_payload() const {
  return _has_bit(1);
}
inline void SingleRequestMultipleResponseResponse::clear_payload() {
  if (payload_ != &_default_payload_) {
    payload_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& SingleRequestMultipleResponseResponse::payload() const {
  return *payload_;
}
inline void SingleRequestMultipleResponseResponse::set_payload(const ::std::string& value) {
  _set_bit(1);
  if (payload_ == &_default_payload_) {
    payload_ = new ::std::string;
  }
  payload_->assign(value);
}
inline void SingleRequestMultipleResponseResponse::set_payload(const char* value) {
  _set_bit(1);
  if (payload_ == &_default_payload_) {
    payload_ = new ::std::string;
  }
  payload_->assign(value);
}
inline void SingleRequestMultipleResponseResponse::set_payload(const void* value, size_t size) {
  _set_bit(1);
  if (payload_ == &_default_payload_) {
    payload_ = new ::std::string;
  }
  payload_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SingleRequestMultipleResponseResponse::mutable_payload() {
  _set_bit(1);
  if (payload_ == &_default_payload_) {
    payload_ = new ::std::string;
  }
  return payload_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace messaging
}  // namespace gtr
}  // namespace itm
}  // namespace uniluebeck
}  // namespace de

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif // ENABLE_TESTBEDSERVICE

#endif  // PROTOBUF_Messages_2eproto__INCLUDED

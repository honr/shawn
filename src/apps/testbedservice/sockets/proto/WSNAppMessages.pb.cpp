// Generated by the protocol buffer compiler.  DO NOT EDIT!

#include "../buildfiles/_apps_enable_cmake.h"
#ifdef ENABLE_TESTBEDSERVICE

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "WSNAppMessages.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace de {
namespace uniluebeck {
namespace itm {
namespace tr {
namespace runtime {
namespace wsnapp {

namespace {

const ::google::protobuf::Descriptor* ListenerManagement_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListenerManagement_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ListenerManagement_Operation_descriptor_ = NULL;
const ::google::protobuf::Descriptor* RequestStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestStatus_Status_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestStatus_Status_reflection_ = NULL;
const ::google::protobuf::Descriptor* Program_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Program_reflection_ = NULL;
const ::google::protobuf::Descriptor* Program_ProgramMetaData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Program_ProgramMetaData_reflection_ = NULL;
const ::google::protobuf::Descriptor* Message_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Message_reflection_ = NULL;
const ::google::protobuf::Descriptor* Message_TextMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Message_TextMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* Message_BinaryMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Message_BinaryMessage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Message_MessageLevel_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SetVirtualLinkRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetVirtualLinkRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DestroyVirtualLinkRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DestroyVirtualLinkRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* OperationInvocation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OperationInvocation_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* OperationInvocation_Operation_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_WSNAppMessages_2eproto() {
  protobuf_AddDesc_WSNAppMessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "WSNAppMessages.proto");
  GOOGLE_CHECK(file != NULL);
  ListenerManagement_descriptor_ = file->message_type(0);
  static const int ListenerManagement_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListenerManagement, operation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListenerManagement, nodename_),
  };
  ListenerManagement_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ListenerManagement_descriptor_,
      ListenerManagement::default_instance_,
      ListenerManagement_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListenerManagement, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListenerManagement, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ListenerManagement));
  ListenerManagement_Operation_descriptor_ = ListenerManagement_descriptor_->enum_type(0);
  RequestStatus_descriptor_ = file->message_type(1);
  static const int RequestStatus_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestStatus, status_),
  };
  RequestStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestStatus_descriptor_,
      RequestStatus::default_instance_,
      RequestStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestStatus));
  RequestStatus_Status_descriptor_ = RequestStatus_descriptor_->nested_type(0);
  static const int RequestStatus_Status_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestStatus_Status, nodeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestStatus_Status, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestStatus_Status, msg_),
  };
  RequestStatus_Status_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestStatus_Status_descriptor_,
      RequestStatus_Status::default_instance_,
      RequestStatus_Status_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestStatus_Status, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestStatus_Status, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestStatus_Status));
  Program_descriptor_ = file->message_type(2);
  static const int Program_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Program, program_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Program, metadata_),
  };
  Program_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Program_descriptor_,
      Program::default_instance_,
      Program_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Program, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Program, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Program));
  Program_ProgramMetaData_descriptor_ = Program_descriptor_->nested_type(0);
  static const int Program_ProgramMetaData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Program_ProgramMetaData, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Program_ProgramMetaData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Program_ProgramMetaData, platform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Program_ProgramMetaData, other_),
  };
  Program_ProgramMetaData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Program_ProgramMetaData_descriptor_,
      Program_ProgramMetaData::default_instance_,
      Program_ProgramMetaData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Program_ProgramMetaData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Program_ProgramMetaData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Program_ProgramMetaData));
  Message_descriptor_ = file->message_type(3);
  static const int Message_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, sourcenodeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, textmessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, binarymessage_),
  };
  Message_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Message_descriptor_,
      Message::default_instance_,
      Message_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Message));
  Message_TextMessage_descriptor_ = Message_descriptor_->nested_type(0);
  static const int Message_TextMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_TextMessage, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_TextMessage, messagelevel_),
  };
  Message_TextMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Message_TextMessage_descriptor_,
      Message_TextMessage::default_instance_,
      Message_TextMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_TextMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_TextMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Message_TextMessage));
  Message_BinaryMessage_descriptor_ = Message_descriptor_->nested_type(1);
  static const int Message_BinaryMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_BinaryMessage, binarydata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_BinaryMessage, binarytype_),
  };
  Message_BinaryMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Message_BinaryMessage_descriptor_,
      Message_BinaryMessage::default_instance_,
      Message_BinaryMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_BinaryMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_BinaryMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Message_BinaryMessage));
  Message_MessageLevel_descriptor_ = Message_descriptor_->enum_type(0);
  SetVirtualLinkRequest_descriptor_ = file->message_type(4);
  static const int SetVirtualLinkRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetVirtualLinkRequest, sourcenode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetVirtualLinkRequest, targetnode_),
  };
  SetVirtualLinkRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetVirtualLinkRequest_descriptor_,
      SetVirtualLinkRequest::default_instance_,
      SetVirtualLinkRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetVirtualLinkRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetVirtualLinkRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetVirtualLinkRequest));
  DestroyVirtualLinkRequest_descriptor_ = file->message_type(5);
  static const int DestroyVirtualLinkRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DestroyVirtualLinkRequest, sourcenode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DestroyVirtualLinkRequest, targetnode_),
  };
  DestroyVirtualLinkRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DestroyVirtualLinkRequest_descriptor_,
      DestroyVirtualLinkRequest::default_instance_,
      DestroyVirtualLinkRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DestroyVirtualLinkRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DestroyVirtualLinkRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DestroyVirtualLinkRequest));
  OperationInvocation_descriptor_ = file->message_type(6);
  static const int OperationInvocation_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationInvocation, operation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationInvocation, arguments_),
  };
  OperationInvocation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OperationInvocation_descriptor_,
      OperationInvocation::default_instance_,
      OperationInvocation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationInvocation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationInvocation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OperationInvocation));
  OperationInvocation_Operation_descriptor_ = OperationInvocation_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_WSNAppMessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ListenerManagement_descriptor_, &ListenerManagement::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestStatus_descriptor_, &RequestStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestStatus_Status_descriptor_, &RequestStatus_Status::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Program_descriptor_, &Program::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Program_ProgramMetaData_descriptor_, &Program_ProgramMetaData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Message_descriptor_, &Message::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Message_TextMessage_descriptor_, &Message_TextMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Message_BinaryMessage_descriptor_, &Message_BinaryMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetVirtualLinkRequest_descriptor_, &SetVirtualLinkRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DestroyVirtualLinkRequest_descriptor_, &DestroyVirtualLinkRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OperationInvocation_descriptor_, &OperationInvocation::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_WSNAppMessages_2eproto() {
  delete ListenerManagement::default_instance_;
  delete ListenerManagement_reflection_;
  delete RequestStatus::default_instance_;
  delete RequestStatus_reflection_;
  delete RequestStatus_Status::default_instance_;
  delete RequestStatus_Status_reflection_;
  delete Program::default_instance_;
  delete Program_reflection_;
  delete Program_ProgramMetaData::default_instance_;
  delete Program_ProgramMetaData_reflection_;
  delete Message::default_instance_;
  delete Message_reflection_;
  delete Message_TextMessage::default_instance_;
  delete Message_TextMessage_reflection_;
  delete Message_BinaryMessage::default_instance_;
  delete Message_BinaryMessage_reflection_;
  delete SetVirtualLinkRequest::default_instance_;
  delete SetVirtualLinkRequest_reflection_;
  delete DestroyVirtualLinkRequest::default_instance_;
  delete DestroyVirtualLinkRequest_reflection_;
  delete OperationInvocation::default_instance_;
  delete OperationInvocation_reflection_;
}

void protobuf_AddDesc_WSNAppMessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024WSNAppMessages.proto\022#de.uniluebeck.it"
    "m.tr.runtime.wsnapp\"\247\001\n\022ListenerManageme"
    "nt\022T\n\toperation\030\001 \002(\0162A.de.uniluebeck.it"
    "m.tr.runtime.wsnapp.ListenerManagement.O"
    "peration\022\020\n\010nodeName\030\002 \002(\t\")\n\tOperation\022"
    "\014\n\010REGISTER\020\001\022\016\n\nUNREGISTER\020\002\"\220\001\n\rReques"
    "tStatus\022I\n\006status\030\001 \002(\01329.de.uniluebeck."
    "itm.tr.runtime.wsnapp.RequestStatus.Stat"
    "us\0324\n\006Status\022\016\n\006nodeId\030\001 \002(\t\022\r\n\005value\030\002 "
    "\001(\005\022\013\n\003msg\030\003 \001(\t\"\275\001\n\007Program\022\017\n\007program\030"
    "\001 \002(\014\022N\n\010metaData\030\002 \001(\0132<.de.uniluebeck."
    "itm.tr.runtime.wsnapp.Program.ProgramMet"
    "aData\032Q\n\017ProgramMetaData\022\017\n\007version\030\001 \002("
    "\t\022\014\n\004name\030\002 \002(\t\022\020\n\010platform\030\003 \002(\t\022\r\n\005oth"
    "er\030\004 \002(\t\"\312\003\n\007Message\022\024\n\014sourceNodeId\030\001 \002"
    "(\t\022\021\n\ttimestamp\030\002 \002(\t\022M\n\013textMessage\030\003 \001"
    "(\01328.de.uniluebeck.itm.tr.runtime.wsnapp"
    ".Message.TextMessage\022Q\n\rbinaryMessage\030\004 "
    "\001(\0132:.de.uniluebeck.itm.tr.runtime.wsnap"
    "p.Message.BinaryMessage\032k\n\013TextMessage\022\013"
    "\n\003msg\030\001 \002(\t\022O\n\014messageLevel\030\002 \002(\01629.de.u"
    "niluebeck.itm.tr.runtime.wsnapp.Message."
    "MessageLevel\0327\n\rBinaryMessage\022\022\n\nbinaryD"
    "ata\030\001 \002(\014\022\022\n\nbinaryType\030\002 \002(\r\"N\n\014Message"
    "Level\022\t\n\005TRACE\020\000\022\t\n\005DEBUG\020\001\022\010\n\004INFO\020\002\022\010\n"
    "\004WARN\020\003\022\t\n\005ERROR\020\004\022\t\n\005FATAL\020\005\"?\n\025SetVirt"
    "ualLinkRequest\022\022\n\nsourceNode\030\001 \002(\t\022\022\n\nta"
    "rgetNode\030\002 \002(\t\"C\n\031DestroyVirtualLinkRequ"
    "est\022\022\n\nsourceNode\030\001 \002(\t\022\022\n\ntargetNode\030\002 "
    "\002(\t\"\200\002\n\023OperationInvocation\022U\n\toperation"
    "\030\001 \002(\0162B.de.uniluebeck.itm.tr.runtime.ws"
    "napp.OperationInvocation.Operation\022\021\n\tar"
    "guments\030\002 \001(\014\"\177\n\tOperation\022\010\n\004SEND\020\000\022\023\n\017"
    "ARE_NODES_ALIVE\020\001\022\022\n\016FLASH_PROGRAMS\020\002\022\017\n"
    "\013RESET_NODES\020\003\022\024\n\020SET_VIRTUAL_LINK\020\004\022\030\n\024"
    "DESTROY_VIRTUAL_LINK\020\005B\002P\000", 1426);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "WSNAppMessages.proto", &protobuf_RegisterTypes);
  ListenerManagement::default_instance_ = new ListenerManagement();
  RequestStatus::default_instance_ = new RequestStatus();
  RequestStatus_Status::default_instance_ = new RequestStatus_Status();
  Program::default_instance_ = new Program();
  Program_ProgramMetaData::default_instance_ = new Program_ProgramMetaData();
  Message::default_instance_ = new Message();
  Message_TextMessage::default_instance_ = new Message_TextMessage();
  Message_BinaryMessage::default_instance_ = new Message_BinaryMessage();
  SetVirtualLinkRequest::default_instance_ = new SetVirtualLinkRequest();
  DestroyVirtualLinkRequest::default_instance_ = new DestroyVirtualLinkRequest();
  OperationInvocation::default_instance_ = new OperationInvocation();
  ListenerManagement::default_instance_->InitAsDefaultInstance();
  RequestStatus::default_instance_->InitAsDefaultInstance();
  RequestStatus_Status::default_instance_->InitAsDefaultInstance();
  Program::default_instance_->InitAsDefaultInstance();
  Program_ProgramMetaData::default_instance_->InitAsDefaultInstance();
  Message::default_instance_->InitAsDefaultInstance();
  Message_TextMessage::default_instance_->InitAsDefaultInstance();
  Message_BinaryMessage::default_instance_->InitAsDefaultInstance();
  SetVirtualLinkRequest::default_instance_->InitAsDefaultInstance();
  DestroyVirtualLinkRequest::default_instance_->InitAsDefaultInstance();
  OperationInvocation::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_WSNAppMessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_WSNAppMessages_2eproto {
  StaticDescriptorInitializer_WSNAppMessages_2eproto() {
    protobuf_AddDesc_WSNAppMessages_2eproto();
  }
} static_descriptor_initializer_WSNAppMessages_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* ListenerManagement_Operation_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListenerManagement_Operation_descriptor_;
}
bool ListenerManagement_Operation_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ListenerManagement_Operation ListenerManagement::REGISTER;
const ListenerManagement_Operation ListenerManagement::UNREGISTER;
const ListenerManagement_Operation ListenerManagement::Operation_MIN;
const ListenerManagement_Operation ListenerManagement::Operation_MAX;
const int ListenerManagement::Operation_ARRAYSIZE;
#endif  // _MSC_VER
const ::std::string ListenerManagement::_default_nodename_;
#ifndef _MSC_VER
const int ListenerManagement::kOperationFieldNumber;
const int ListenerManagement::kNodeNameFieldNumber;
#endif  // !_MSC_VER

ListenerManagement::ListenerManagement()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ListenerManagement::InitAsDefaultInstance() {
}

ListenerManagement::ListenerManagement(const ListenerManagement& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ListenerManagement::SharedCtor() {
  _cached_size_ = 0;
  operation_ = 1;
  nodename_ = const_cast< ::std::string*>(&_default_nodename_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ListenerManagement::~ListenerManagement() {
  SharedDtor();
}

void ListenerManagement::SharedDtor() {
  if (nodename_ != &_default_nodename_) {
    delete nodename_;
  }
  if (this != default_instance_) {
  }
}

void ListenerManagement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListenerManagement::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListenerManagement_descriptor_;
}

const ListenerManagement& ListenerManagement::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WSNAppMessages_2eproto();  return *default_instance_;
}

ListenerManagement* ListenerManagement::default_instance_ = NULL;

ListenerManagement* ListenerManagement::New() const {
  return new ListenerManagement;
}

void ListenerManagement::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    operation_ = 1;
    if (_has_bit(1)) {
      if (nodename_ != &_default_nodename_) {
        nodename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ListenerManagement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .de.uniluebeck.itm.tr.runtime.wsnapp.ListenerManagement.Operation operation = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::de::uniluebeck::itm::tr::runtime::wsnapp::ListenerManagement_Operation_IsValid(value)) {
            set_operation(static_cast< ::de::uniluebeck::itm::tr::runtime::wsnapp::ListenerManagement_Operation >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nodeName;
        break;
      }
      
      // required string nodeName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nodeName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nodename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nodename().data(), this->nodename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ListenerManagement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .de.uniluebeck.itm.tr.runtime.wsnapp.ListenerManagement.Operation operation = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->operation(), output);
  }
  
  // required string nodeName = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nodename().data(), this->nodename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->nodename(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ListenerManagement::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .de.uniluebeck.itm.tr.runtime.wsnapp.ListenerManagement.Operation operation = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->operation(), target);
  }
  
  // required string nodeName = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nodename().data(), this->nodename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nodename(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ListenerManagement::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .de.uniluebeck.itm.tr.runtime.wsnapp.ListenerManagement.Operation operation = 1;
    if (has_operation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->operation());
    }
    
    // required string nodeName = 2;
    if (has_nodename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nodename());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListenerManagement::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ListenerManagement* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ListenerManagement*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ListenerManagement::MergeFrom(const ListenerManagement& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_operation(from.operation());
    }
    if (from._has_bit(1)) {
      set_nodename(from.nodename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ListenerManagement::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListenerManagement::CopyFrom(const ListenerManagement& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListenerManagement::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void ListenerManagement::Swap(ListenerManagement* other) {
  if (other != this) {
    std::swap(operation_, other->operation_);
    std::swap(nodename_, other->nodename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ListenerManagement::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListenerManagement_descriptor_;
  metadata.reflection = ListenerManagement_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string RequestStatus_Status::_default_nodeid_;
const ::std::string RequestStatus_Status::_default_msg_;
#ifndef _MSC_VER
const int RequestStatus_Status::kNodeIdFieldNumber;
const int RequestStatus_Status::kValueFieldNumber;
const int RequestStatus_Status::kMsgFieldNumber;
#endif  // !_MSC_VER

RequestStatus_Status::RequestStatus_Status()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestStatus_Status::InitAsDefaultInstance() {
}

RequestStatus_Status::RequestStatus_Status(const RequestStatus_Status& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestStatus_Status::SharedCtor() {
  _cached_size_ = 0;
  nodeid_ = const_cast< ::std::string*>(&_default_nodeid_);
  value_ = 0;
  msg_ = const_cast< ::std::string*>(&_default_msg_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestStatus_Status::~RequestStatus_Status() {
  SharedDtor();
}

void RequestStatus_Status::SharedDtor() {
  if (nodeid_ != &_default_nodeid_) {
    delete nodeid_;
  }
  if (msg_ != &_default_msg_) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void RequestStatus_Status::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestStatus_Status::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestStatus_Status_descriptor_;
}

const RequestStatus_Status& RequestStatus_Status::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WSNAppMessages_2eproto();  return *default_instance_;
}

RequestStatus_Status* RequestStatus_Status::default_instance_ = NULL;

RequestStatus_Status* RequestStatus_Status::New() const {
  return new RequestStatus_Status;
}

void RequestStatus_Status::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (nodeid_ != &_default_nodeid_) {
        nodeid_->clear();
      }
    }
    value_ = 0;
    if (_has_bit(2)) {
      if (msg_ != &_default_msg_) {
        msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestStatus_Status::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string nodeId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nodeid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nodeid().data(), this->nodeid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }
      
      // optional int32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_msg;
        break;
      }
      
      // optional string msg = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestStatus_Status::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string nodeId = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nodeid().data(), this->nodeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->nodeid(), output);
  }
  
  // optional int32 value = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }
  
  // optional string msg = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->msg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestStatus_Status::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string nodeId = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nodeid().data(), this->nodeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->nodeid(), target);
  }
  
  // optional int32 value = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }
  
  // optional string msg = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->msg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestStatus_Status::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string nodeId = 1;
    if (has_nodeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nodeid());
    }
    
    // optional int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }
    
    // optional string msg = 3;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestStatus_Status::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestStatus_Status* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestStatus_Status*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestStatus_Status::MergeFrom(const RequestStatus_Status& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_nodeid(from.nodeid());
    }
    if (from._has_bit(1)) {
      set_value(from.value());
    }
    if (from._has_bit(2)) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestStatus_Status::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestStatus_Status::CopyFrom(const RequestStatus_Status& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestStatus_Status::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void RequestStatus_Status::Swap(RequestStatus_Status* other) {
  if (other != this) {
    std::swap(nodeid_, other->nodeid_);
    std::swap(value_, other->value_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestStatus_Status::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestStatus_Status_descriptor_;
  metadata.reflection = RequestStatus_Status_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int RequestStatus::kStatusFieldNumber;
#endif  // !_MSC_VER

RequestStatus::RequestStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestStatus::InitAsDefaultInstance() {
  status_ = const_cast< ::de::uniluebeck::itm::tr::runtime::wsnapp::RequestStatus_Status*>(&::de::uniluebeck::itm::tr::runtime::wsnapp::RequestStatus_Status::default_instance());
}

RequestStatus::RequestStatus(const RequestStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestStatus::SharedCtor() {
  _cached_size_ = 0;
  status_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestStatus::~RequestStatus() {
  SharedDtor();
}

void RequestStatus::SharedDtor() {
  if (this != default_instance_) {
    delete status_;
  }
}

void RequestStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestStatus_descriptor_;
}

const RequestStatus& RequestStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WSNAppMessages_2eproto();  return *default_instance_;
}

RequestStatus* RequestStatus::default_instance_ = NULL;

RequestStatus* RequestStatus::New() const {
  return new RequestStatus;
}

void RequestStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (status_ != NULL) status_->::de::uniluebeck::itm::tr::runtime::wsnapp::RequestStatus_Status::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .de.uniluebeck.itm.tr.runtime.wsnapp.RequestStatus.Status status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .de.uniluebeck.itm.tr.runtime.wsnapp.RequestStatus.Status status = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .de.uniluebeck.itm.tr.runtime.wsnapp.RequestStatus.Status status = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestStatus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .de.uniluebeck.itm.tr.runtime.wsnapp.RequestStatus.Status status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->status());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestStatus::MergeFrom(const RequestStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_status()->::de::uniluebeck::itm::tr::runtime::wsnapp::RequestStatus_Status::MergeFrom(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestStatus::CopyFrom(const RequestStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_status()) {
    if (!this->status().IsInitialized()) return false;
  }
  return true;
}

void RequestStatus::Swap(RequestStatus* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestStatus_descriptor_;
  metadata.reflection = RequestStatus_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string Program_ProgramMetaData::_default_version_;
const ::std::string Program_ProgramMetaData::_default_name_;
const ::std::string Program_ProgramMetaData::_default_platform_;
const ::std::string Program_ProgramMetaData::_default_other_;
#ifndef _MSC_VER
const int Program_ProgramMetaData::kVersionFieldNumber;
const int Program_ProgramMetaData::kNameFieldNumber;
const int Program_ProgramMetaData::kPlatformFieldNumber;
const int Program_ProgramMetaData::kOtherFieldNumber;
#endif  // !_MSC_VER

Program_ProgramMetaData::Program_ProgramMetaData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Program_ProgramMetaData::InitAsDefaultInstance() {
}

Program_ProgramMetaData::Program_ProgramMetaData(const Program_ProgramMetaData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Program_ProgramMetaData::SharedCtor() {
  _cached_size_ = 0;
  version_ = const_cast< ::std::string*>(&_default_version_);
  name_ = const_cast< ::std::string*>(&_default_name_);
  platform_ = const_cast< ::std::string*>(&_default_platform_);
  other_ = const_cast< ::std::string*>(&_default_other_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Program_ProgramMetaData::~Program_ProgramMetaData() {
  SharedDtor();
}

void Program_ProgramMetaData::SharedDtor() {
  if (version_ != &_default_version_) {
    delete version_;
  }
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (platform_ != &_default_platform_) {
    delete platform_;
  }
  if (other_ != &_default_other_) {
    delete other_;
  }
  if (this != default_instance_) {
  }
}

void Program_ProgramMetaData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Program_ProgramMetaData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Program_ProgramMetaData_descriptor_;
}

const Program_ProgramMetaData& Program_ProgramMetaData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WSNAppMessages_2eproto();  return *default_instance_;
}

Program_ProgramMetaData* Program_ProgramMetaData::default_instance_ = NULL;

Program_ProgramMetaData* Program_ProgramMetaData::New() const {
  return new Program_ProgramMetaData;
}

void Program_ProgramMetaData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (version_ != &_default_version_) {
        version_->clear();
      }
    }
    if (_has_bit(1)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    if (_has_bit(2)) {
      if (platform_ != &_default_platform_) {
        platform_->clear();
      }
    }
    if (_has_bit(3)) {
      if (other_ != &_default_other_) {
        other_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Program_ProgramMetaData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_platform;
        break;
      }
      
      // required string platform = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_platform:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platform()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->platform().data(), this->platform().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_other;
        break;
      }
      
      // required string other = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_other:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_other()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->other().data(), this->other().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Program_ProgramMetaData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string version = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->version(), output);
  }
  
  // required string name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // required string platform = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->platform(), output);
  }
  
  // required string other = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->other().data(), this->other().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->other(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Program_ProgramMetaData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string version = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->version(), target);
  }
  
  // required string name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // required string platform = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->platform(), target);
  }
  
  // required string other = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->other().data(), this->other().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->other(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Program_ProgramMetaData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }
    
    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required string platform = 3;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platform());
    }
    
    // required string other = 4;
    if (has_other()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->other());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Program_ProgramMetaData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Program_ProgramMetaData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Program_ProgramMetaData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Program_ProgramMetaData::MergeFrom(const Program_ProgramMetaData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_version(from.version());
    }
    if (from._has_bit(1)) {
      set_name(from.name());
    }
    if (from._has_bit(2)) {
      set_platform(from.platform());
    }
    if (from._has_bit(3)) {
      set_other(from.other());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Program_ProgramMetaData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Program_ProgramMetaData::CopyFrom(const Program_ProgramMetaData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Program_ProgramMetaData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void Program_ProgramMetaData::Swap(Program_ProgramMetaData* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(name_, other->name_);
    std::swap(platform_, other->platform_);
    std::swap(other_, other->other_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Program_ProgramMetaData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Program_ProgramMetaData_descriptor_;
  metadata.reflection = Program_ProgramMetaData_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::std::string Program::_default_program_;
#ifndef _MSC_VER
const int Program::kProgramFieldNumber;
const int Program::kMetaDataFieldNumber;
#endif  // !_MSC_VER

Program::Program()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Program::InitAsDefaultInstance() {
  metadata_ = const_cast< ::de::uniluebeck::itm::tr::runtime::wsnapp::Program_ProgramMetaData*>(&::de::uniluebeck::itm::tr::runtime::wsnapp::Program_ProgramMetaData::default_instance());
}

Program::Program(const Program& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Program::SharedCtor() {
  _cached_size_ = 0;
  program_ = const_cast< ::std::string*>(&_default_program_);
  metadata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Program::~Program() {
  SharedDtor();
}

void Program::SharedDtor() {
  if (program_ != &_default_program_) {
    delete program_;
  }
  if (this != default_instance_) {
    delete metadata_;
  }
}

void Program::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Program::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Program_descriptor_;
}

const Program& Program::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WSNAppMessages_2eproto();  return *default_instance_;
}

Program* Program::default_instance_ = NULL;

Program* Program::New() const {
  return new Program;
}

void Program::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (program_ != &_default_program_) {
        program_->clear();
      }
    }
    if (_has_bit(1)) {
      if (metadata_ != NULL) metadata_->::de::uniluebeck::itm::tr::runtime::wsnapp::Program_ProgramMetaData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Program::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes program = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_program()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_metaData;
        break;
      }
      
      // optional .de.uniluebeck.itm.tr.runtime.wsnapp.Program.ProgramMetaData metaData = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_metaData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_metadata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Program::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes program = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->program(), output);
  }
  
  // optional .de.uniluebeck.itm.tr.runtime.wsnapp.Program.ProgramMetaData metaData = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->metadata(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Program::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes program = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->program(), target);
  }
  
  // optional .de.uniluebeck.itm.tr.runtime.wsnapp.Program.ProgramMetaData metaData = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->metadata(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Program::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes program = 1;
    if (has_program()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->program());
    }
    
    // optional .de.uniluebeck.itm.tr.runtime.wsnapp.Program.ProgramMetaData metaData = 2;
    if (has_metadata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->metadata());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Program::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Program* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Program*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Program::MergeFrom(const Program& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_program(from.program());
    }
    if (from._has_bit(1)) {
      mutable_metadata()->::de::uniluebeck::itm::tr::runtime::wsnapp::Program_ProgramMetaData::MergeFrom(from.metadata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Program::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Program::CopyFrom(const Program& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Program::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_metadata()) {
    if (!this->metadata().IsInitialized()) return false;
  }
  return true;
}

void Program::Swap(Program* other) {
  if (other != this) {
    std::swap(program_, other->program_);
    std::swap(metadata_, other->metadata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Program::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Program_descriptor_;
  metadata.reflection = Program_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Message_MessageLevel_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_MessageLevel_descriptor_;
}
bool Message_MessageLevel_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Message_MessageLevel Message::TRACE;
const Message_MessageLevel Message::DEBUG;
const Message_MessageLevel Message::INFO;
const Message_MessageLevel Message::WARN;
const Message_MessageLevel Message::ERROR;
const Message_MessageLevel Message::FATAL;
const Message_MessageLevel Message::MessageLevel_MIN;
const Message_MessageLevel Message::MessageLevel_MAX;
const int Message::MessageLevel_ARRAYSIZE;
#endif  // _MSC_VER
const ::std::string Message_TextMessage::_default_msg_;
#ifndef _MSC_VER
const int Message_TextMessage::kMsgFieldNumber;
const int Message_TextMessage::kMessageLevelFieldNumber;
#endif  // !_MSC_VER

Message_TextMessage::Message_TextMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Message_TextMessage::InitAsDefaultInstance() {
}

Message_TextMessage::Message_TextMessage(const Message_TextMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Message_TextMessage::SharedCtor() {
  _cached_size_ = 0;
  msg_ = const_cast< ::std::string*>(&_default_msg_);
  messagelevel_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Message_TextMessage::~Message_TextMessage() {
  SharedDtor();
}

void Message_TextMessage::SharedDtor() {
  if (msg_ != &_default_msg_) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void Message_TextMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message_TextMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_TextMessage_descriptor_;
}

const Message_TextMessage& Message_TextMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WSNAppMessages_2eproto();  return *default_instance_;
}

Message_TextMessage* Message_TextMessage::default_instance_ = NULL;

Message_TextMessage* Message_TextMessage::New() const {
  return new Message_TextMessage;
}

void Message_TextMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (msg_ != &_default_msg_) {
        msg_->clear();
      }
    }
    messagelevel_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Message_TextMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string msg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_messageLevel;
        break;
      }
      
      // required .de.uniluebeck.itm.tr.runtime.wsnapp.Message.MessageLevel messageLevel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_messageLevel:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::de::uniluebeck::itm::tr::runtime::wsnapp::Message_MessageLevel_IsValid(value)) {
            set_messagelevel(static_cast< ::de::uniluebeck::itm::tr::runtime::wsnapp::Message_MessageLevel >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Message_TextMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string msg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msg(), output);
  }
  
  // required .de.uniluebeck.itm.tr.runtime.wsnapp.Message.MessageLevel messageLevel = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->messagelevel(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Message_TextMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string msg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msg(), target);
  }
  
  // required .de.uniluebeck.itm.tr.runtime.wsnapp.Message.MessageLevel messageLevel = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->messagelevel(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Message_TextMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string msg = 1;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }
    
    // required .de.uniluebeck.itm.tr.runtime.wsnapp.Message.MessageLevel messageLevel = 2;
    if (has_messagelevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->messagelevel());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message_TextMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Message_TextMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Message_TextMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Message_TextMessage::MergeFrom(const Message_TextMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_msg(from.msg());
    }
    if (from._has_bit(1)) {
      set_messagelevel(from.messagelevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Message_TextMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message_TextMessage::CopyFrom(const Message_TextMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_TextMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void Message_TextMessage::Swap(Message_TextMessage* other) {
  if (other != this) {
    std::swap(msg_, other->msg_);
    std::swap(messagelevel_, other->messagelevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Message_TextMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Message_TextMessage_descriptor_;
  metadata.reflection = Message_TextMessage_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::std::string Message_BinaryMessage::_default_binarydata_;
#ifndef _MSC_VER
const int Message_BinaryMessage::kBinaryDataFieldNumber;
const int Message_BinaryMessage::kBinaryTypeFieldNumber;
#endif  // !_MSC_VER

Message_BinaryMessage::Message_BinaryMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Message_BinaryMessage::InitAsDefaultInstance() {
}

Message_BinaryMessage::Message_BinaryMessage(const Message_BinaryMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Message_BinaryMessage::SharedCtor() {
  _cached_size_ = 0;
  binarydata_ = const_cast< ::std::string*>(&_default_binarydata_);
  binarytype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Message_BinaryMessage::~Message_BinaryMessage() {
  SharedDtor();
}

void Message_BinaryMessage::SharedDtor() {
  if (binarydata_ != &_default_binarydata_) {
    delete binarydata_;
  }
  if (this != default_instance_) {
  }
}

void Message_BinaryMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message_BinaryMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_BinaryMessage_descriptor_;
}

const Message_BinaryMessage& Message_BinaryMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WSNAppMessages_2eproto();  return *default_instance_;
}

Message_BinaryMessage* Message_BinaryMessage::default_instance_ = NULL;

Message_BinaryMessage* Message_BinaryMessage::New() const {
  return new Message_BinaryMessage;
}

void Message_BinaryMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (binarydata_ != &_default_binarydata_) {
        binarydata_->clear();
      }
    }
    binarytype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Message_BinaryMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes binaryData = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_binarydata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_binaryType;
        break;
      }
      
      // required uint32 binaryType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_binaryType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &binarytype_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Message_BinaryMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes binaryData = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->binarydata(), output);
  }
  
  // required uint32 binaryType = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->binarytype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Message_BinaryMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes binaryData = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->binarydata(), target);
  }
  
  // required uint32 binaryType = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->binarytype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Message_BinaryMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes binaryData = 1;
    if (has_binarydata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->binarydata());
    }
    
    // required uint32 binaryType = 2;
    if (has_binarytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->binarytype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message_BinaryMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Message_BinaryMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Message_BinaryMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Message_BinaryMessage::MergeFrom(const Message_BinaryMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_binarydata(from.binarydata());
    }
    if (from._has_bit(1)) {
      set_binarytype(from.binarytype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Message_BinaryMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message_BinaryMessage::CopyFrom(const Message_BinaryMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_BinaryMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void Message_BinaryMessage::Swap(Message_BinaryMessage* other) {
  if (other != this) {
    std::swap(binarydata_, other->binarydata_);
    std::swap(binarytype_, other->binarytype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Message_BinaryMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Message_BinaryMessage_descriptor_;
  metadata.reflection = Message_BinaryMessage_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::std::string Message::_default_sourcenodeid_;
const ::std::string Message::_default_timestamp_;
#ifndef _MSC_VER
const int Message::kSourceNodeIdFieldNumber;
const int Message::kTimestampFieldNumber;
const int Message::kTextMessageFieldNumber;
const int Message::kBinaryMessageFieldNumber;
#endif  // !_MSC_VER

Message::Message()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Message::InitAsDefaultInstance() {
  textmessage_ = const_cast< ::de::uniluebeck::itm::tr::runtime::wsnapp::Message_TextMessage*>(&::de::uniluebeck::itm::tr::runtime::wsnapp::Message_TextMessage::default_instance());
  binarymessage_ = const_cast< ::de::uniluebeck::itm::tr::runtime::wsnapp::Message_BinaryMessage*>(&::de::uniluebeck::itm::tr::runtime::wsnapp::Message_BinaryMessage::default_instance());
}

Message::Message(const Message& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Message::SharedCtor() {
  _cached_size_ = 0;
  sourcenodeid_ = const_cast< ::std::string*>(&_default_sourcenodeid_);
  timestamp_ = const_cast< ::std::string*>(&_default_timestamp_);
  textmessage_ = NULL;
  binarymessage_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Message::~Message() {
  SharedDtor();
}

void Message::SharedDtor() {
  if (sourcenodeid_ != &_default_sourcenodeid_) {
    delete sourcenodeid_;
  }
  if (timestamp_ != &_default_timestamp_) {
    delete timestamp_;
  }
  if (this != default_instance_) {
    delete textmessage_;
    delete binarymessage_;
  }
}

void Message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_descriptor_;
}

const Message& Message::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WSNAppMessages_2eproto();  return *default_instance_;
}

Message* Message::default_instance_ = NULL;

Message* Message::New() const {
  return new Message;
}

void Message::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (sourcenodeid_ != &_default_sourcenodeid_) {
        sourcenodeid_->clear();
      }
    }
    if (_has_bit(1)) {
      if (timestamp_ != &_default_timestamp_) {
        timestamp_->clear();
      }
    }
    if (_has_bit(2)) {
      if (textmessage_ != NULL) textmessage_->::de::uniluebeck::itm::tr::runtime::wsnapp::Message_TextMessage::Clear();
    }
    if (_has_bit(3)) {
      if (binarymessage_ != NULL) binarymessage_->::de::uniluebeck::itm::tr::runtime::wsnapp::Message_BinaryMessage::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string sourceNodeId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sourcenodeid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sourcenodeid().data(), this->sourcenodeid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_timestamp;
        break;
      }
      
      // required string timestamp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timestamp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->timestamp().data(), this->timestamp().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_textMessage;
        break;
      }
      
      // optional .de.uniluebeck.itm.tr.runtime.wsnapp.Message.TextMessage textMessage = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_textMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_textmessage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_binaryMessage;
        break;
      }
      
      // optional .de.uniluebeck.itm.tr.runtime.wsnapp.Message.BinaryMessage binaryMessage = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_binaryMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_binarymessage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string sourceNodeId = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sourcenodeid().data(), this->sourcenodeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->sourcenodeid(), output);
  }
  
  // required string timestamp = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->timestamp(), output);
  }
  
  // optional .de.uniluebeck.itm.tr.runtime.wsnapp.Message.TextMessage textMessage = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->textmessage(), output);
  }
  
  // optional .de.uniluebeck.itm.tr.runtime.wsnapp.Message.BinaryMessage binaryMessage = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->binarymessage(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Message::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string sourceNodeId = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sourcenodeid().data(), this->sourcenodeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sourcenodeid(), target);
  }
  
  // required string timestamp = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->timestamp(), target);
  }
  
  // optional .de.uniluebeck.itm.tr.runtime.wsnapp.Message.TextMessage textMessage = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->textmessage(), target);
  }
  
  // optional .de.uniluebeck.itm.tr.runtime.wsnapp.Message.BinaryMessage binaryMessage = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->binarymessage(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Message::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string sourceNodeId = 1;
    if (has_sourcenodeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sourcenodeid());
    }
    
    // required string timestamp = 2;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timestamp());
    }
    
    // optional .de.uniluebeck.itm.tr.runtime.wsnapp.Message.TextMessage textMessage = 3;
    if (has_textmessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->textmessage());
    }
    
    // optional .de.uniluebeck.itm.tr.runtime.wsnapp.Message.BinaryMessage binaryMessage = 4;
    if (has_binarymessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->binarymessage());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Message* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Message*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Message::MergeFrom(const Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_sourcenodeid(from.sourcenodeid());
    }
    if (from._has_bit(1)) {
      set_timestamp(from.timestamp());
    }
    if (from._has_bit(2)) {
      mutable_textmessage()->::de::uniluebeck::itm::tr::runtime::wsnapp::Message_TextMessage::MergeFrom(from.textmessage());
    }
    if (from._has_bit(3)) {
      mutable_binarymessage()->::de::uniluebeck::itm::tr::runtime::wsnapp::Message_BinaryMessage::MergeFrom(from.binarymessage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Message::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message::CopyFrom(const Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_textmessage()) {
    if (!this->textmessage().IsInitialized()) return false;
  }
  if (has_binarymessage()) {
    if (!this->binarymessage().IsInitialized()) return false;
  }
  return true;
}

void Message::Swap(Message* other) {
  if (other != this) {
    std::swap(sourcenodeid_, other->sourcenodeid_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(textmessage_, other->textmessage_);
    std::swap(binarymessage_, other->binarymessage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Message::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Message_descriptor_;
  metadata.reflection = Message_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string SetVirtualLinkRequest::_default_sourcenode_;
const ::std::string SetVirtualLinkRequest::_default_targetnode_;
#ifndef _MSC_VER
const int SetVirtualLinkRequest::kSourceNodeFieldNumber;
const int SetVirtualLinkRequest::kTargetNodeFieldNumber;
#endif  // !_MSC_VER

SetVirtualLinkRequest::SetVirtualLinkRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetVirtualLinkRequest::InitAsDefaultInstance() {
}

SetVirtualLinkRequest::SetVirtualLinkRequest(const SetVirtualLinkRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetVirtualLinkRequest::SharedCtor() {
  _cached_size_ = 0;
  sourcenode_ = const_cast< ::std::string*>(&_default_sourcenode_);
  targetnode_ = const_cast< ::std::string*>(&_default_targetnode_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetVirtualLinkRequest::~SetVirtualLinkRequest() {
  SharedDtor();
}

void SetVirtualLinkRequest::SharedDtor() {
  if (sourcenode_ != &_default_sourcenode_) {
    delete sourcenode_;
  }
  if (targetnode_ != &_default_targetnode_) {
    delete targetnode_;
  }
  if (this != default_instance_) {
  }
}

void SetVirtualLinkRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetVirtualLinkRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetVirtualLinkRequest_descriptor_;
}

const SetVirtualLinkRequest& SetVirtualLinkRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WSNAppMessages_2eproto();  return *default_instance_;
}

SetVirtualLinkRequest* SetVirtualLinkRequest::default_instance_ = NULL;

SetVirtualLinkRequest* SetVirtualLinkRequest::New() const {
  return new SetVirtualLinkRequest;
}

void SetVirtualLinkRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (sourcenode_ != &_default_sourcenode_) {
        sourcenode_->clear();
      }
    }
    if (_has_bit(1)) {
      if (targetnode_ != &_default_targetnode_) {
        targetnode_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetVirtualLinkRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string sourceNode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sourcenode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sourcenode().data(), this->sourcenode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_targetNode;
        break;
      }
      
      // required string targetNode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_targetNode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_targetnode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->targetnode().data(), this->targetnode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetVirtualLinkRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string sourceNode = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sourcenode().data(), this->sourcenode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->sourcenode(), output);
  }
  
  // required string targetNode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->targetnode().data(), this->targetnode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->targetnode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetVirtualLinkRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string sourceNode = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sourcenode().data(), this->sourcenode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sourcenode(), target);
  }
  
  // required string targetNode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->targetnode().data(), this->targetnode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->targetnode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetVirtualLinkRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string sourceNode = 1;
    if (has_sourcenode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sourcenode());
    }
    
    // required string targetNode = 2;
    if (has_targetnode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->targetnode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetVirtualLinkRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetVirtualLinkRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetVirtualLinkRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetVirtualLinkRequest::MergeFrom(const SetVirtualLinkRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_sourcenode(from.sourcenode());
    }
    if (from._has_bit(1)) {
      set_targetnode(from.targetnode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetVirtualLinkRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetVirtualLinkRequest::CopyFrom(const SetVirtualLinkRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetVirtualLinkRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void SetVirtualLinkRequest::Swap(SetVirtualLinkRequest* other) {
  if (other != this) {
    std::swap(sourcenode_, other->sourcenode_);
    std::swap(targetnode_, other->targetnode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetVirtualLinkRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetVirtualLinkRequest_descriptor_;
  metadata.reflection = SetVirtualLinkRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string DestroyVirtualLinkRequest::_default_sourcenode_;
const ::std::string DestroyVirtualLinkRequest::_default_targetnode_;
#ifndef _MSC_VER
const int DestroyVirtualLinkRequest::kSourceNodeFieldNumber;
const int DestroyVirtualLinkRequest::kTargetNodeFieldNumber;
#endif  // !_MSC_VER

DestroyVirtualLinkRequest::DestroyVirtualLinkRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DestroyVirtualLinkRequest::InitAsDefaultInstance() {
}

DestroyVirtualLinkRequest::DestroyVirtualLinkRequest(const DestroyVirtualLinkRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DestroyVirtualLinkRequest::SharedCtor() {
  _cached_size_ = 0;
  sourcenode_ = const_cast< ::std::string*>(&_default_sourcenode_);
  targetnode_ = const_cast< ::std::string*>(&_default_targetnode_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DestroyVirtualLinkRequest::~DestroyVirtualLinkRequest() {
  SharedDtor();
}

void DestroyVirtualLinkRequest::SharedDtor() {
  if (sourcenode_ != &_default_sourcenode_) {
    delete sourcenode_;
  }
  if (targetnode_ != &_default_targetnode_) {
    delete targetnode_;
  }
  if (this != default_instance_) {
  }
}

void DestroyVirtualLinkRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DestroyVirtualLinkRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DestroyVirtualLinkRequest_descriptor_;
}

const DestroyVirtualLinkRequest& DestroyVirtualLinkRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WSNAppMessages_2eproto();  return *default_instance_;
}

DestroyVirtualLinkRequest* DestroyVirtualLinkRequest::default_instance_ = NULL;

DestroyVirtualLinkRequest* DestroyVirtualLinkRequest::New() const {
  return new DestroyVirtualLinkRequest;
}

void DestroyVirtualLinkRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (sourcenode_ != &_default_sourcenode_) {
        sourcenode_->clear();
      }
    }
    if (_has_bit(1)) {
      if (targetnode_ != &_default_targetnode_) {
        targetnode_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DestroyVirtualLinkRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string sourceNode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sourcenode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sourcenode().data(), this->sourcenode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_targetNode;
        break;
      }
      
      // required string targetNode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_targetNode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_targetnode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->targetnode().data(), this->targetnode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DestroyVirtualLinkRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string sourceNode = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sourcenode().data(), this->sourcenode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->sourcenode(), output);
  }
  
  // required string targetNode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->targetnode().data(), this->targetnode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->targetnode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DestroyVirtualLinkRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string sourceNode = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sourcenode().data(), this->sourcenode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sourcenode(), target);
  }
  
  // required string targetNode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->targetnode().data(), this->targetnode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->targetnode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DestroyVirtualLinkRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string sourceNode = 1;
    if (has_sourcenode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sourcenode());
    }
    
    // required string targetNode = 2;
    if (has_targetnode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->targetnode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DestroyVirtualLinkRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DestroyVirtualLinkRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DestroyVirtualLinkRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DestroyVirtualLinkRequest::MergeFrom(const DestroyVirtualLinkRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_sourcenode(from.sourcenode());
    }
    if (from._has_bit(1)) {
      set_targetnode(from.targetnode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DestroyVirtualLinkRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DestroyVirtualLinkRequest::CopyFrom(const DestroyVirtualLinkRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DestroyVirtualLinkRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void DestroyVirtualLinkRequest::Swap(DestroyVirtualLinkRequest* other) {
  if (other != this) {
    std::swap(sourcenode_, other->sourcenode_);
    std::swap(targetnode_, other->targetnode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DestroyVirtualLinkRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DestroyVirtualLinkRequest_descriptor_;
  metadata.reflection = DestroyVirtualLinkRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* OperationInvocation_Operation_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OperationInvocation_Operation_descriptor_;
}
bool OperationInvocation_Operation_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const OperationInvocation_Operation OperationInvocation::SEND;
const OperationInvocation_Operation OperationInvocation::ARE_NODES_ALIVE;
const OperationInvocation_Operation OperationInvocation::FLASH_PROGRAMS;
const OperationInvocation_Operation OperationInvocation::RESET_NODES;
const OperationInvocation_Operation OperationInvocation::SET_VIRTUAL_LINK;
const OperationInvocation_Operation OperationInvocation::DESTROY_VIRTUAL_LINK;
const OperationInvocation_Operation OperationInvocation::Operation_MIN;
const OperationInvocation_Operation OperationInvocation::Operation_MAX;
const int OperationInvocation::Operation_ARRAYSIZE;
#endif  // _MSC_VER
const ::std::string OperationInvocation::_default_arguments_;
#ifndef _MSC_VER
const int OperationInvocation::kOperationFieldNumber;
const int OperationInvocation::kArgumentsFieldNumber;
#endif  // !_MSC_VER

OperationInvocation::OperationInvocation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OperationInvocation::InitAsDefaultInstance() {
}

OperationInvocation::OperationInvocation(const OperationInvocation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OperationInvocation::SharedCtor() {
  _cached_size_ = 0;
  operation_ = 0;
  arguments_ = const_cast< ::std::string*>(&_default_arguments_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OperationInvocation::~OperationInvocation() {
  SharedDtor();
}

void OperationInvocation::SharedDtor() {
  if (arguments_ != &_default_arguments_) {
    delete arguments_;
  }
  if (this != default_instance_) {
  }
}

void OperationInvocation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OperationInvocation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OperationInvocation_descriptor_;
}

const OperationInvocation& OperationInvocation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WSNAppMessages_2eproto();  return *default_instance_;
}

OperationInvocation* OperationInvocation::default_instance_ = NULL;

OperationInvocation* OperationInvocation::New() const {
  return new OperationInvocation;
}

void OperationInvocation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    operation_ = 0;
    if (_has_bit(1)) {
      if (arguments_ != &_default_arguments_) {
        arguments_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OperationInvocation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .de.uniluebeck.itm.tr.runtime.wsnapp.OperationInvocation.Operation operation = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::de::uniluebeck::itm::tr::runtime::wsnapp::OperationInvocation_Operation_IsValid(value)) {
            set_operation(static_cast< ::de::uniluebeck::itm::tr::runtime::wsnapp::OperationInvocation_Operation >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_arguments;
        break;
      }
      
      // optional bytes arguments = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_arguments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_arguments()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OperationInvocation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .de.uniluebeck.itm.tr.runtime.wsnapp.OperationInvocation.Operation operation = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->operation(), output);
  }
  
  // optional bytes arguments = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->arguments(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OperationInvocation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .de.uniluebeck.itm.tr.runtime.wsnapp.OperationInvocation.Operation operation = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->operation(), target);
  }
  
  // optional bytes arguments = 2;
  if (_has_bit(1)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->arguments(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OperationInvocation::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .de.uniluebeck.itm.tr.runtime.wsnapp.OperationInvocation.Operation operation = 1;
    if (has_operation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->operation());
    }
    
    // optional bytes arguments = 2;
    if (has_arguments()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->arguments());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OperationInvocation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OperationInvocation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OperationInvocation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OperationInvocation::MergeFrom(const OperationInvocation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_operation(from.operation());
    }
    if (from._has_bit(1)) {
      set_arguments(from.arguments());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OperationInvocation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperationInvocation::CopyFrom(const OperationInvocation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperationInvocation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void OperationInvocation::Swap(OperationInvocation* other) {
  if (other != this) {
    std::swap(operation_, other->operation_);
    std::swap(arguments_, other->arguments_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OperationInvocation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OperationInvocation_descriptor_;
  metadata.reflection = OperationInvocation_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace wsnapp
}  // namespace runtime
}  // namespace tr
}  // namespace itm
}  // namespace uniluebeck
}  // namespace de

// @@protoc_insertion_point(global_scope)

#endif // ENABLE_TESTBEDSERVICE

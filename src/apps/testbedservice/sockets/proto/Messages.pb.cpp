// Generated by the protocol buffer compiler.  DO NOT EDIT!

#include "../buildfiles/_apps_enable_cmake.h"
#ifdef ENABLE_TESTBEDSERVICE

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Messages.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace de {
namespace uniluebeck {
namespace itm {
namespace gtr {
namespace messaging {

namespace {

const ::google::protobuf::Descriptor* Msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Msg_reflection_ = NULL;
const ::google::protobuf::Descriptor* SingleRequestMultipleResponseRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SingleRequestMultipleResponseRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SingleRequestMultipleResponseResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SingleRequestMultipleResponseResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Messages_2eproto() {
  protobuf_AddDesc_Messages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Messages.proto");
  GOOGLE_CHECK(file != NULL);
  Msg_descriptor_ = file->message_type(0);
  static const int Msg_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, priority_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, validuntil_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, payload_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, replywith_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, replyto_),
  };
  Msg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Msg_descriptor_,
      Msg::default_instance_,
      Msg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Msg));
  SingleRequestMultipleResponseRequest_descriptor_ = file->message_type(1);
  static const int SingleRequestMultipleResponseRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleRequestMultipleResponseRequest, requestid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleRequestMultipleResponseRequest, reliablerequest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleRequestMultipleResponseRequest, reliableresponses_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleRequestMultipleResponseRequest, payload_),
  };
  SingleRequestMultipleResponseRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SingleRequestMultipleResponseRequest_descriptor_,
      SingleRequestMultipleResponseRequest::default_instance_,
      SingleRequestMultipleResponseRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleRequestMultipleResponseRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleRequestMultipleResponseRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SingleRequestMultipleResponseRequest));
  SingleRequestMultipleResponseResponse_descriptor_ = file->message_type(2);
  static const int SingleRequestMultipleResponseResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleRequestMultipleResponseResponse, requestid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleRequestMultipleResponseResponse, payload_),
  };
  SingleRequestMultipleResponseResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SingleRequestMultipleResponseResponse_descriptor_,
      SingleRequestMultipleResponseResponse::default_instance_,
      SingleRequestMultipleResponseResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleRequestMultipleResponseResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleRequestMultipleResponseResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SingleRequestMultipleResponseResponse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Messages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Msg_descriptor_, &Msg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SingleRequestMultipleResponseRequest_descriptor_, &SingleRequestMultipleResponseRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SingleRequestMultipleResponseResponse_descriptor_, &SingleRequestMultipleResponseResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Messages_2eproto() {
  delete Msg::default_instance_;
  delete Msg_reflection_;
  delete SingleRequestMultipleResponseRequest::default_instance_;
  delete SingleRequestMultipleResponseRequest_reflection_;
  delete SingleRequestMultipleResponseResponse::default_instance_;
  delete SingleRequestMultipleResponseResponse_reflection_;
}

void protobuf_AddDesc_Messages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016Messages.proto\022\037de.uniluebeck.itm.gtr."
    "messaging\"\213\001\n\003Msg\022\n\n\002to\030\001 \002(\t\022\014\n\004from\030\002 "
    "\002(\t\022\017\n\007msgType\030\003 \002(\t\022\020\n\010priority\030\004 \002(\r\022\022"
    "\n\nvalidUntil\030\005 \002(\004\022\017\n\007payload\030\006 \001(\014\022\021\n\tr"
    "eplyWith\030\007 \001(\t\022\017\n\007replyTo\030\010 \001(\t\"~\n$Singl"
    "eRequestMultipleResponseRequest\022\021\n\treque"
    "stId\030\001 \002(\t\022\027\n\017reliableRequest\030\002 \002(\010\022\031\n\021r"
    "eliableResponses\030\003 \002(\010\022\017\n\007payload\030\004 \002(\014\""
    "K\n%SingleRequestMultipleResponseResponse"
    "\022\021\n\trequestId\030\001 \002(\t\022\017\n\007payload\030\002 \002(\014B\nB\010"
    "Messages", 408);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Messages.proto", &protobuf_RegisterTypes);
  Msg::default_instance_ = new Msg();
  SingleRequestMultipleResponseRequest::default_instance_ = new SingleRequestMultipleResponseRequest();
  SingleRequestMultipleResponseResponse::default_instance_ = new SingleRequestMultipleResponseResponse();
  Msg::default_instance_->InitAsDefaultInstance();
  SingleRequestMultipleResponseRequest::default_instance_->InitAsDefaultInstance();
  SingleRequestMultipleResponseResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Messages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Messages_2eproto {
  StaticDescriptorInitializer_Messages_2eproto() {
    protobuf_AddDesc_Messages_2eproto();
  }
} static_descriptor_initializer_Messages_2eproto_;


// ===================================================================

const ::std::string Msg::_default_to_;
const ::std::string Msg::_default_from_;
const ::std::string Msg::_default_msgtype_;
const ::std::string Msg::_default_payload_;
const ::std::string Msg::_default_replywith_;
const ::std::string Msg::_default_replyto_;
#ifndef _MSC_VER
const int Msg::kToFieldNumber;
const int Msg::kFromFieldNumber;
const int Msg::kMsgTypeFieldNumber;
const int Msg::kPriorityFieldNumber;
const int Msg::kValidUntilFieldNumber;
const int Msg::kPayloadFieldNumber;
const int Msg::kReplyWithFieldNumber;
const int Msg::kReplyToFieldNumber;
#endif  // !_MSC_VER

Msg::Msg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Msg::InitAsDefaultInstance() {
}

Msg::Msg(const Msg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Msg::SharedCtor() {
  _cached_size_ = 0;
  to_ = const_cast< ::std::string*>(&_default_to_);
  from_ = const_cast< ::std::string*>(&_default_from_);
  msgtype_ = const_cast< ::std::string*>(&_default_msgtype_);
  priority_ = 0u;
  validuntil_ = GOOGLE_ULONGLONG(0);
  payload_ = const_cast< ::std::string*>(&_default_payload_);
  replywith_ = const_cast< ::std::string*>(&_default_replywith_);
  replyto_ = const_cast< ::std::string*>(&_default_replyto_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Msg::~Msg() {
  SharedDtor();
}

void Msg::SharedDtor() {
  if (to_ != &_default_to_) {
    delete to_;
  }
  if (from_ != &_default_from_) {
    delete from_;
  }
  if (msgtype_ != &_default_msgtype_) {
    delete msgtype_;
  }
  if (payload_ != &_default_payload_) {
    delete payload_;
  }
  if (replywith_ != &_default_replywith_) {
    delete replywith_;
  }
  if (replyto_ != &_default_replyto_) {
    delete replyto_;
  }
  if (this != default_instance_) {
  }
}

void Msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Msg_descriptor_;
}

const Msg& Msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Messages_2eproto();  return *default_instance_;
}

Msg* Msg::default_instance_ = NULL;

Msg* Msg::New() const {
  return new Msg;
}

void Msg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (to_ != &_default_to_) {
        to_->clear();
      }
    }
    if (_has_bit(1)) {
      if (from_ != &_default_from_) {
        from_->clear();
      }
    }
    if (_has_bit(2)) {
      if (msgtype_ != &_default_msgtype_) {
        msgtype_->clear();
      }
    }
    priority_ = 0u;
    validuntil_ = GOOGLE_ULONGLONG(0);
    if (_has_bit(5)) {
      if (payload_ != &_default_payload_) {
        payload_->clear();
      }
    }
    if (_has_bit(6)) {
      if (replywith_ != &_default_replywith_) {
        replywith_->clear();
      }
    }
    if (_has_bit(7)) {
      if (replyto_ != &_default_replyto_) {
        replyto_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string to = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->to().data(), this->to().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_from;
        break;
      }
      
      // required string from = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_from:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->from().data(), this->from().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_msgType;
        break;
      }
      
      // required string msgType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msgType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgtype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgtype().data(), this->msgtype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_priority;
        break;
      }
      
      // required uint32 priority = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_priority:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &priority_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_validUntil;
        break;
      }
      
      // required uint64 validUntil = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_validUntil:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &validuntil_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_payload;
        break;
      }
      
      // optional bytes payload = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_payload:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_replyWith;
        break;
      }
      
      // optional string replyWith = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_replyWith:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_replywith()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->replywith().data(), this->replywith().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_replyTo;
        break;
      }
      
      // optional string replyTo = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_replyTo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_replyto()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->replyto().data(), this->replyto().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string to = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->to().data(), this->to().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->to(), output);
  }
  
  // required string from = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from().data(), this->from().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->from(), output);
  }
  
  // required string msgType = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgtype().data(), this->msgtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->msgtype(), output);
  }
  
  // required uint32 priority = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->priority(), output);
  }
  
  // required uint64 validUntil = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->validuntil(), output);
  }
  
  // optional bytes payload = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->payload(), output);
  }
  
  // optional string replyWith = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->replywith().data(), this->replywith().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->replywith(), output);
  }
  
  // optional string replyTo = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->replyto().data(), this->replyto().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->replyto(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Msg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string to = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->to().data(), this->to().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->to(), target);
  }
  
  // required string from = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from().data(), this->from().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->from(), target);
  }
  
  // required string msgType = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgtype().data(), this->msgtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->msgtype(), target);
  }
  
  // required uint32 priority = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->priority(), target);
  }
  
  // required uint64 validUntil = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->validuntil(), target);
  }
  
  // optional bytes payload = 6;
  if (_has_bit(5)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->payload(), target);
  }
  
  // optional string replyWith = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->replywith().data(), this->replywith().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->replywith(), target);
  }
  
  // optional string replyTo = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->replyto().data(), this->replyto().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->replyto(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Msg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string to = 1;
    if (has_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->to());
    }
    
    // required string from = 2;
    if (has_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->from());
    }
    
    // required string msgType = 3;
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgtype());
    }
    
    // required uint32 priority = 4;
    if (has_priority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->priority());
    }
    
    // required uint64 validUntil = 5;
    if (has_validuntil()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->validuntil());
    }
    
    // optional bytes payload = 6;
    if (has_payload()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->payload());
    }
    
    // optional string replyWith = 7;
    if (has_replywith()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->replywith());
    }
    
    // optional string replyTo = 8;
    if (has_replyto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->replyto());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Msg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Msg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Msg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Msg::MergeFrom(const Msg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_to(from.to());
    }
    if (from._has_bit(1)) {
      set_from(from.from());
    }
    if (from._has_bit(2)) {
      set_msgtype(from.msgtype());
    }
    if (from._has_bit(3)) {
      set_priority(from.priority());
    }
    if (from._has_bit(4)) {
      set_validuntil(from.validuntil());
    }
    if (from._has_bit(5)) {
      set_payload(from.payload());
    }
    if (from._has_bit(6)) {
      set_replywith(from.replywith());
    }
    if (from._has_bit(7)) {
      set_replyto(from.replyto());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Msg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg::CopyFrom(const Msg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void Msg::Swap(Msg* other) {
  if (other != this) {
    std::swap(to_, other->to_);
    std::swap(from_, other->from_);
    std::swap(msgtype_, other->msgtype_);
    std::swap(priority_, other->priority_);
    std::swap(validuntil_, other->validuntil_);
    std::swap(payload_, other->payload_);
    std::swap(replywith_, other->replywith_);
    std::swap(replyto_, other->replyto_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Msg_descriptor_;
  metadata.reflection = Msg_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string SingleRequestMultipleResponseRequest::_default_requestid_;
const ::std::string SingleRequestMultipleResponseRequest::_default_payload_;
#ifndef _MSC_VER
const int SingleRequestMultipleResponseRequest::kRequestIdFieldNumber;
const int SingleRequestMultipleResponseRequest::kReliableRequestFieldNumber;
const int SingleRequestMultipleResponseRequest::kReliableResponsesFieldNumber;
const int SingleRequestMultipleResponseRequest::kPayloadFieldNumber;
#endif  // !_MSC_VER

SingleRequestMultipleResponseRequest::SingleRequestMultipleResponseRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SingleRequestMultipleResponseRequest::InitAsDefaultInstance() {
}

SingleRequestMultipleResponseRequest::SingleRequestMultipleResponseRequest(const SingleRequestMultipleResponseRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SingleRequestMultipleResponseRequest::SharedCtor() {
  _cached_size_ = 0;
  requestid_ = const_cast< ::std::string*>(&_default_requestid_);
  reliablerequest_ = false;
  reliableresponses_ = false;
  payload_ = const_cast< ::std::string*>(&_default_payload_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SingleRequestMultipleResponseRequest::~SingleRequestMultipleResponseRequest() {
  SharedDtor();
}

void SingleRequestMultipleResponseRequest::SharedDtor() {
  if (requestid_ != &_default_requestid_) {
    delete requestid_;
  }
  if (payload_ != &_default_payload_) {
    delete payload_;
  }
  if (this != default_instance_) {
  }
}

void SingleRequestMultipleResponseRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SingleRequestMultipleResponseRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SingleRequestMultipleResponseRequest_descriptor_;
}

const SingleRequestMultipleResponseRequest& SingleRequestMultipleResponseRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Messages_2eproto();  return *default_instance_;
}

SingleRequestMultipleResponseRequest* SingleRequestMultipleResponseRequest::default_instance_ = NULL;

SingleRequestMultipleResponseRequest* SingleRequestMultipleResponseRequest::New() const {
  return new SingleRequestMultipleResponseRequest;
}

void SingleRequestMultipleResponseRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (requestid_ != &_default_requestid_) {
        requestid_->clear();
      }
    }
    reliablerequest_ = false;
    reliableresponses_ = false;
    if (_has_bit(3)) {
      if (payload_ != &_default_payload_) {
        payload_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SingleRequestMultipleResponseRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string requestId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_requestid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->requestid().data(), this->requestid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reliableRequest;
        break;
      }
      
      // required bool reliableRequest = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reliableRequest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reliablerequest_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_reliableResponses;
        break;
      }
      
      // required bool reliableResponses = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reliableResponses:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reliableresponses_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_payload;
        break;
      }
      
      // required bytes payload = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_payload:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SingleRequestMultipleResponseRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string requestId = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->requestid().data(), this->requestid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->requestid(), output);
  }
  
  // required bool reliableRequest = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->reliablerequest(), output);
  }
  
  // required bool reliableResponses = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->reliableresponses(), output);
  }
  
  // required bytes payload = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->payload(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SingleRequestMultipleResponseRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string requestId = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->requestid().data(), this->requestid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->requestid(), target);
  }
  
  // required bool reliableRequest = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->reliablerequest(), target);
  }
  
  // required bool reliableResponses = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->reliableresponses(), target);
  }
  
  // required bytes payload = 4;
  if (_has_bit(3)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->payload(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SingleRequestMultipleResponseRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string requestId = 1;
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->requestid());
    }
    
    // required bool reliableRequest = 2;
    if (has_reliablerequest()) {
      total_size += 1 + 1;
    }
    
    // required bool reliableResponses = 3;
    if (has_reliableresponses()) {
      total_size += 1 + 1;
    }
    
    // required bytes payload = 4;
    if (has_payload()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->payload());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SingleRequestMultipleResponseRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SingleRequestMultipleResponseRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SingleRequestMultipleResponseRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SingleRequestMultipleResponseRequest::MergeFrom(const SingleRequestMultipleResponseRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_requestid(from.requestid());
    }
    if (from._has_bit(1)) {
      set_reliablerequest(from.reliablerequest());
    }
    if (from._has_bit(2)) {
      set_reliableresponses(from.reliableresponses());
    }
    if (from._has_bit(3)) {
      set_payload(from.payload());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SingleRequestMultipleResponseRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleRequestMultipleResponseRequest::CopyFrom(const SingleRequestMultipleResponseRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleRequestMultipleResponseRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void SingleRequestMultipleResponseRequest::Swap(SingleRequestMultipleResponseRequest* other) {
  if (other != this) {
    std::swap(requestid_, other->requestid_);
    std::swap(reliablerequest_, other->reliablerequest_);
    std::swap(reliableresponses_, other->reliableresponses_);
    std::swap(payload_, other->payload_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SingleRequestMultipleResponseRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SingleRequestMultipleResponseRequest_descriptor_;
  metadata.reflection = SingleRequestMultipleResponseRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string SingleRequestMultipleResponseResponse::_default_requestid_;
const ::std::string SingleRequestMultipleResponseResponse::_default_payload_;
#ifndef _MSC_VER
const int SingleRequestMultipleResponseResponse::kRequestIdFieldNumber;
const int SingleRequestMultipleResponseResponse::kPayloadFieldNumber;
#endif  // !_MSC_VER

SingleRequestMultipleResponseResponse::SingleRequestMultipleResponseResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SingleRequestMultipleResponseResponse::InitAsDefaultInstance() {
}

SingleRequestMultipleResponseResponse::SingleRequestMultipleResponseResponse(const SingleRequestMultipleResponseResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SingleRequestMultipleResponseResponse::SharedCtor() {
  _cached_size_ = 0;
  requestid_ = const_cast< ::std::string*>(&_default_requestid_);
  payload_ = const_cast< ::std::string*>(&_default_payload_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SingleRequestMultipleResponseResponse::~SingleRequestMultipleResponseResponse() {
  SharedDtor();
}

void SingleRequestMultipleResponseResponse::SharedDtor() {
  if (requestid_ != &_default_requestid_) {
    delete requestid_;
  }
  if (payload_ != &_default_payload_) {
    delete payload_;
  }
  if (this != default_instance_) {
  }
}

void SingleRequestMultipleResponseResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SingleRequestMultipleResponseResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SingleRequestMultipleResponseResponse_descriptor_;
}

const SingleRequestMultipleResponseResponse& SingleRequestMultipleResponseResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Messages_2eproto();  return *default_instance_;
}

SingleRequestMultipleResponseResponse* SingleRequestMultipleResponseResponse::default_instance_ = NULL;

SingleRequestMultipleResponseResponse* SingleRequestMultipleResponseResponse::New() const {
  return new SingleRequestMultipleResponseResponse;
}

void SingleRequestMultipleResponseResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (requestid_ != &_default_requestid_) {
        requestid_->clear();
      }
    }
    if (_has_bit(1)) {
      if (payload_ != &_default_payload_) {
        payload_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SingleRequestMultipleResponseResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string requestId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_requestid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->requestid().data(), this->requestid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_payload;
        break;
      }
      
      // required bytes payload = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_payload:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SingleRequestMultipleResponseResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string requestId = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->requestid().data(), this->requestid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->requestid(), output);
  }
  
  // required bytes payload = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->payload(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SingleRequestMultipleResponseResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string requestId = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->requestid().data(), this->requestid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->requestid(), target);
  }
  
  // required bytes payload = 2;
  if (_has_bit(1)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->payload(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SingleRequestMultipleResponseResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string requestId = 1;
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->requestid());
    }
    
    // required bytes payload = 2;
    if (has_payload()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->payload());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SingleRequestMultipleResponseResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SingleRequestMultipleResponseResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SingleRequestMultipleResponseResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SingleRequestMultipleResponseResponse::MergeFrom(const SingleRequestMultipleResponseResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_requestid(from.requestid());
    }
    if (from._has_bit(1)) {
      set_payload(from.payload());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SingleRequestMultipleResponseResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleRequestMultipleResponseResponse::CopyFrom(const SingleRequestMultipleResponseResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleRequestMultipleResponseResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void SingleRequestMultipleResponseResponse::Swap(SingleRequestMultipleResponseResponse* other) {
  if (other != this) {
    std::swap(requestid_, other->requestid_);
    std::swap(payload_, other->payload_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SingleRequestMultipleResponseResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SingleRequestMultipleResponseResponse_descriptor_;
  metadata.reflection = SingleRequestMultipleResponseResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace messaging
}  // namespace gtr
}  // namespace itm
}  // namespace uniluebeck
}  // namespace de

// @@protoc_insertion_point(global_scope)

#endif // ENABLE_TESTBEDSERVICE

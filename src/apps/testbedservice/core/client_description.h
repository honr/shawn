/* client_description.h
   Generated by wsdl2h 1.2.9l from http://localhost:8080/controller?wsdl and typemap.dat
   2010-04-23 00:37:44 GMT
   Copyright (C) 2001-2007 Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL or Genivia's license for commercial use.
*/

/* NOTE:

 - Compile this file with soapcpp2 to complete the code generation process.
 - Use soapcpp2 option -I to specify paths for #import
   To build with STL, 'stlvector.h' is imported from 'import' dir in package.
 - Use wsdl2h options -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control schema namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Use Doxygen (www.doxygen.org) to browse this file.
 - Use wsdl2h option -l to view the software license terms.

   DO NOT include this file directly into your project.
   Include only the soapcpp2-generated headers and source code files.
*/

//gsoapopt w

/******************************************************************************\
 *                                                                            *
 * http://testbed.wisebed.eu/                                                 *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

shawnts = "http://testbed.wisebed.eu/"
sts1 = ""

*/

//gsoap sts1  schema namespace:	
//gsoap shawnts schema namespace:	http://testbed.wisebed.eu/
//gsoap sts1  schema form:	unqualified
//gsoap shawnts schema form:	unqualified

/******************************************************************************\
 *                                                                            *
 * Schema Types                                                               *
 *                                                                            *
\******************************************************************************/

/// Built-in type "xs:base64Binary".
class xsd__base64Binary
{	unsigned char *__ptr;
	int __size;
	char *id, *type, *options; // NOTE: for DIME and MTOM XOP attachments only
	struct soap *soap;
};


//  Forward declaration of class shawnts__message.
class shawnts__message;

//  Forward declaration of class shawnts__textMessage.
class shawnts__textMessage;

//  Forward declaration of class shawnts__binaryMessage.
class shawnts__binaryMessage;

//  Forward declaration of class shawnts__freeResponse.
class shawnts__freeResponse;

//  Forward declaration of class shawnts__getInstanceResponse.
class shawnts__getInstanceResponse;

//  Forward declaration of class shawnts__getInstance.
class shawnts__getInstance;

//  Forward declaration of class shawnts__UnknownReservationIdException.
class shawnts__UnknownReservationIdException;

//  Forward declaration of class shawnts__ExperimentNotRunningException.
class shawnts__ExperimentNotRunningException;

//  Forward declaration of class shawnts__free.
class shawnts__free;

//  Forward declaration of class shawnts__receiveStatus.
class shawnts__receiveStatus;

//  Forward declaration of class shawnts__requestStatus.
class shawnts__requestStatus;

//  Forward declaration of class shawnts__status.
class shawnts__status;

//  Forward declaration of class shawnts__receive.
class shawnts__receive;

/// "http://testbed.wisebed.eu/":messageLevel is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'shawnts__messageLevel' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum shawnts__messageLevel
{
	shawnts__messageLevel__TRACE,	///< xs:string value="TRACE"
	shawnts__messageLevel__DEBUG,	///< xs:string value="DEBUG"
	shawnts__messageLevel__INFO,	///< xs:string value="INFO"
	shawnts__messageLevel__WARN,	///< xs:string value="WARN"
	shawnts__messageLevel__ERROR,	///< xs:string value="ERROR"
	shawnts__messageLevel__FATAL,	///< xs:string value="FATAL"
};

/// "http://testbed.wisebed.eu/":message is a complexType.
class shawnts__message
{ public:
/// Element sourceNodeId of type xs:string.
    char*                                sourceNodeId                   1;	///< Required element.
/// Element timestamp of type xs:dateTime.
    time_t                               timestamp                      1;	///< Required element.
/// Element textMessage of type "http://testbed.wisebed.eu/":textMessage.
    shawnts__textMessage*                textMessage                    0;	///< Optional element.
/// Element binaryMessage of type "http://testbed.wisebed.eu/":binaryMessage.
    shawnts__binaryMessage*              binaryMessage                  0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://testbed.wisebed.eu/":textMessage is a complexType.
class shawnts__textMessage
{ public:
/// Element msg of type xs:string.
    char*                                msg                            1;	///< Required element.
/// Element messageLevel of type "http://testbed.wisebed.eu/":messageLevel.
    enum shawnts__messageLevel*          messageLevel                   0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://testbed.wisebed.eu/":binaryMessage is a complexType.
class shawnts__binaryMessage
{ public:
/// Element binaryData of type xs:base64Binary.
    xsd__base64Binary                    binaryData                     1;	///< Required element.
/// Element binaryType of type xs:byte.
    short*                               binaryType                     0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://testbed.wisebed.eu/":freeResponse is a complexType.
class shawnts__freeResponse
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://testbed.wisebed.eu/":getInstanceResponse is a complexType.
class shawnts__getInstanceResponse
{ public:
/// Element return of type xs:string.
    char*                                return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://testbed.wisebed.eu/":getInstance is a complexType.
class shawnts__getInstance
{ public:
/// Element reservationId of type xs:string.
    char*                                reservationId                  1;	///< Required element.
/// Element controller of type xs:string.
    char*                                controller                     1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://testbed.wisebed.eu/":UnknownReservationIdException is a complexType.
class shawnts__UnknownReservationIdException
{ public:
/// Element message of type xs:string.
    char*                                message                        0;	///< Optional element.
/// Element reservationId of type xs:string.
    char*                                reservationId                  1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://testbed.wisebed.eu/":ExperimentNotRunningException is a complexType.
class shawnts__ExperimentNotRunningException
{ public:
/// Element message of type xs:string.
    char*                                message                        0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://testbed.wisebed.eu/":free is a complexType.
class shawnts__free
{ public:
/// Element reservationId of type xs:string.
    char*                                reservationId                  1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://testbed.wisebed.eu/":receiveStatus is a complexType.
class shawnts__receiveStatus
{ public:
/// Element status of type "http://testbed.wisebed.eu/":requestStatus.
    shawnts__requestStatus*              status                         1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://testbed.wisebed.eu/":requestStatus is a complexType.
class shawnts__requestStatus
{ public:
/// Element requestId of type xs:string.
    char*                                requestId                      1;	///< Required element.
/// Size of array of shawnts__status* is 1..unbounded
    int                                  __sizestatus                  ;
/// Pointer to array of length 1..unbounded
    shawnts__status*                    *status                        ;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://testbed.wisebed.eu/":status is a complexType.
class shawnts__status
{ public:
/// Element nodeId of type xs:string.
    char*                                nodeId                         1;	///< Required element.
/// Element value of type xs:int.
    int*                                 value                          0;	///< Optional element.
/// Element msg of type xs:string.
    char*                                msg                            0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://testbed.wisebed.eu/":receive is a complexType.
class shawnts__receive
{ public:
/// Element msg of type "http://testbed.wisebed.eu/":message.
    shawnts__message*                    msg                            1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// Element "http://testbed.wisebed.eu/":ExperimentNotRunningException of type "http://testbed.wisebed.eu/":ExperimentNotRunningException.
/// Note: use wsdl2h option -g to generate this global element declaration.

/// Element "http://testbed.wisebed.eu/":UnknownReservationIdException of type "http://testbed.wisebed.eu/":UnknownReservationIdException.
/// Note: use wsdl2h option -g to generate this global element declaration.

/// Element "http://testbed.wisebed.eu/":free of type "http://testbed.wisebed.eu/":free.
/// Note: use wsdl2h option -g to generate this global element declaration.

/// Element "http://testbed.wisebed.eu/":freeResponse of type "http://testbed.wisebed.eu/":freeResponse.
/// Note: use wsdl2h option -g to generate this global element declaration.

/// Element "http://testbed.wisebed.eu/":getInstance of type "http://testbed.wisebed.eu/":getInstance.
/// Note: use wsdl2h option -g to generate this global element declaration.

/// Element "http://testbed.wisebed.eu/":getInstanceResponse of type xs:string.
/// Note: use wsdl2h option -g to generate this global element declaration.

/// Element "http://testbed.wisebed.eu/":message of type "http://testbed.wisebed.eu/":message.
/// Note: use wsdl2h option -g to generate this global element declaration.

/// Element "http://testbed.wisebed.eu/":receive of type "http://testbed.wisebed.eu/":receive.
/// Note: use wsdl2h option -g to generate this global element declaration.

/// Element "http://testbed.wisebed.eu/":receiveStatus of type "http://testbed.wisebed.eu/":receiveStatus.
/// Note: use wsdl2h option -g to generate this global element declaration.

/// Element "http://testbed.wisebed.eu/":urn of type xs:string.
/// Note: use wsdl2h option -g to generate this global element declaration.

/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/


//gsoap shawnts service name:	ControllerPortBinding 
//gsoap shawnts service type:	Controller 
//gsoap shawnts service port:	http://localhost:8080/controller 
//gsoap shawnts service namespace:	http://testbed.wisebed.eu/ 
//gsoap shawnts service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage ControllerService Definitions

@section ControllerService_bindings Bindings
  - @ref ControllerPortBinding

*/

/**

@page ControllerPortBinding Binding "ControllerPortBinding"

@section ControllerPortBinding_operations Operations of Binding  "ControllerPortBinding"
  - @ref __shawnts__receive
  - @ref __shawnts__receiveStatus

@section ControllerPortBinding_ports Endpoints of Binding  "ControllerPortBinding"
  - http://localhost:8080/controller

Note: use wsdl2h option -N to change the service binding prefix name

*/

/******************************************************************************\
 *                                                                            *
 * ControllerPortBinding                                                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * __shawnts__receive                                                         *
 *                                                                            *
\******************************************************************************/


/// Operation "__shawnts__receive" of service binding "ControllerPortBinding"

/**

Operation details:

  - One-way message
  - SOAP document/literal style

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___shawnts__receive(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    shawnts__receive*                   shawnts__receive_,
    // response parameters:
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __shawnts__receive(
    struct soap *soap,
    // request parameters:
    shawnts__receive*                   shawnts__receive_,
    // response parameters:
  );
@endcode

C++ proxy class (defined in soapControllerPortBindingProxy.h):
  class ControllerPortBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap shawnts service method-style:	receive document
//gsoap shawnts service method-encoding:	receive literal
//gsoap shawnts service method-action:	receive ""
int __shawnts__receive(
    shawnts__receive*                   shawnts__receive_,	///< Request parameter
    void	///< One-way message: no response parameter
);

/******************************************************************************\
 *                                                                            *
 * __shawnts__receiveStatus                                                   *
 *                                                                            *
\******************************************************************************/


/// Operation "__shawnts__receiveStatus" of service binding "ControllerPortBinding"

/**

Operation details:

  - One-way message
  - SOAP document/literal style

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___shawnts__receiveStatus(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    shawnts__receiveStatus*             shawnts__receiveStatus_,
    // response parameters:
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __shawnts__receiveStatus(
    struct soap *soap,
    // request parameters:
    shawnts__receiveStatus*             shawnts__receiveStatus_,
    // response parameters:
  );
@endcode

C++ proxy class (defined in soapControllerPortBindingProxy.h):
  class ControllerPortBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap shawnts service method-style:	receiveStatus document
//gsoap shawnts service method-encoding:	receiveStatus literal
//gsoap shawnts service method-action:	receiveStatus ""
int __shawnts__receiveStatus(
    shawnts__receiveStatus*             shawnts__receiveStatus_,	///< Request parameter
    void	///< One-way message: no response parameter
);

/* End of client_description.h */

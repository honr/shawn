/* server_description.h
   Generated by wsdl2h 1.2.9l from WSNService.wsdl and typemap.dat
   2010-05-03 20:23:00 GMT
   Copyright (C) 2001-2007 Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL or Genivia's license for commercial use.
*/

/* NOTE:

 - Compile this file with soapcpp2 to complete the code generation process.
 - Use soapcpp2 option -I to specify paths for #import
   To build with STL, 'stlvector.h' is imported from 'import' dir in package.
 - Use wsdl2h options -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control schema namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Use Doxygen (www.doxygen.org) to browse this file.
 - Use wsdl2h option -l to view the software license terms.

   DO NOT include this file directly into your project.
   Include only the soapcpp2-generated headers and source code files.
*/

//gsoapopt w

/******************************************************************************\
 *                                                                            *
 * urn:WSNService                                                             *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

shawnts = "urn:WSNService"
ns1 = ""
ns2 = "urn:CommonTypes"

*/

//gsoap ns1   schema namespace:	
//gsoap shawnts schema namespace:	urn:WSNService
//gsoap ns2   schema namespace:	urn:CommonTypes
//gsoap ns1   schema form:	unqualified
//gsoap shawnts schema form:	unqualified
//gsoap ns2   schema form:	unqualified

/******************************************************************************\
 *                                                                            *
 * Schema Types                                                               *
 *                                                                            *
\******************************************************************************/

namespace shawn_server {

/// Built-in type "xs:base64Binary".
class xsd__base64Binary
{	unsigned char *__ptr;
	int __size;
	char *id, *type, *options; // NOTE: for DIME and MTOM XOP attachments only
	struct soap *soap;
};


//  Forward declaration of class shawnts__getVersion.
class shawnts__getVersion;

//  Forward declaration of class shawnts__getVersionResponse.
class shawnts__getVersionResponse;

//  Forward declaration of class shawnts__resetNodes.
class shawnts__resetNodes;

//  Forward declaration of class shawnts__flashPrograms.
class shawnts__flashPrograms;

//  Forward declaration of class shawnts__program.
class shawnts__program;

//  Forward declaration of class shawnts__programMetaData.
class shawnts__programMetaData;

//  Forward declaration of class shawnts__areNodesAlive.
class shawnts__areNodesAlive;

//  Forward declaration of class shawnts__setVirtualLink.
class shawnts__setVirtualLink;

//  Forward declaration of class shawnts__setStartTime.
class shawnts__setStartTime;

//  Forward declaration of class shawnts__enableNode.
class shawnts__enableNode;

//  Forward declaration of class shawnts__getFilters.
class shawnts__getFilters;

//  Forward declaration of class shawnts__getFiltersResponse.
class shawnts__getFiltersResponse;

//  Forward declaration of class shawnts__getNeighbourhood.
class shawnts__getNeighbourhood;

//  Forward declaration of class shawnts__getNeighbourhoodResponse.
class shawnts__getNeighbourhoodResponse;

//  Forward declaration of class shawnts__UnknownNodeUrnException.
class shawnts__UnknownNodeUrnException;

//  Forward declaration of class shawnts__disablePhysicalLink.
class shawnts__disablePhysicalLink;

//  Forward declaration of class shawnts__getPropertyValueOf.
class shawnts__getPropertyValueOf;

//  Forward declaration of class shawnts__getPropertyValueOfResponse.
class shawnts__getPropertyValueOfResponse;

//  Forward declaration of class shawnts__describeCapabilities.
class shawnts__describeCapabilities;

//  Forward declaration of class shawnts__describeCapabilitiesResponse.
class shawnts__describeCapabilitiesResponse;

//  Forward declaration of class shawnts__UnsupportedOperationException.
class shawnts__UnsupportedOperationException;

//  Forward declaration of class shawnts__send.
class shawnts__send;

//  Forward declaration of class shawnts__disableNode.
class shawnts__disableNode;

//  Forward declaration of class shawnts__destroyVirtualLink.
class shawnts__destroyVirtualLink;

//  Forward declaration of class shawnts__enablePhysicalLink.
class shawnts__enablePhysicalLink;

//  Forward declaration of class shawnts__sendResponse.
class shawnts__sendResponse;

//  Forward declaration of class shawnts__areNodesAliveResponse.
class shawnts__areNodesAliveResponse;

//  Forward declaration of class shawnts__defineNetwork.
class shawnts__defineNetwork;

//  Forward declaration of class shawnts__defineNetworkResponse.
class shawnts__defineNetworkResponse;

//  Forward declaration of class shawnts__destroyVirtualLinkResponse.
class shawnts__destroyVirtualLinkResponse;

//  Forward declaration of class shawnts__disableNodeResponse.
class shawnts__disableNodeResponse;

//  Forward declaration of class shawnts__disablePhysicalLinkResponse.
class shawnts__disablePhysicalLinkResponse;

//  Forward declaration of class shawnts__enableNodeResponse.
class shawnts__enableNodeResponse;

//  Forward declaration of class shawnts__enablePhysicalLinkResponse.
class shawnts__enablePhysicalLinkResponse;

//  Forward declaration of class shawnts__flashProgramsResponse.
class shawnts__flashProgramsResponse;

//  Forward declaration of class shawnts__resetNodesResponse.
class shawnts__resetNodesResponse;

//  Forward declaration of class shawnts__setStartTimeResponse.
class shawnts__setStartTimeResponse;

//  Forward declaration of class shawnts__setVirtualLinkResponse.
class shawnts__setVirtualLinkResponse;

//  Forward declaration of class ns2__message.
class ns2__message;

//  Forward declaration of class ns2__textMessage.
class ns2__textMessage;

//  Forward declaration of class ns2__binaryMessage.
class ns2__binaryMessage;

//  Forward declaration of class ns2__getNetwork.
class ns2__getNetwork;

//  Forward declaration of class ns2__getNetworkResponse.
class ns2__getNetworkResponse;

/// "urn:CommonTypes":requestId is a simpleType restriction of xs:string.
typedef char* ns2__requestId;

/// "urn:CommonTypes":messageType is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns2__messageType' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns2__messageType
{
	ns2__messageType__TEXT,	///< xs:string value="TEXT"
	ns2__messageType__BINARY,	///< xs:string value="BINARY"
};

/// "urn:CommonTypes":messageLevel is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns2__messageLevel' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns2__messageLevel
{
	ns2__messageLevel__TRACE,	///< xs:string value="TRACE"
	ns2__messageLevel__DEBUG,	///< xs:string value="DEBUG"
	ns2__messageLevel__INFO,	///< xs:string value="INFO"
	ns2__messageLevel__WARN,	///< xs:string value="WARN"
	ns2__messageLevel__ERROR,	///< xs:string value="ERROR"
	ns2__messageLevel__FATAL,	///< xs:string value="FATAL"
};

/// "urn:CommonTypes":urn is a simpleType restriction of xs:string.
/// Content pattern is "urn:.*"
typedef char* ns2__urn "urn:.*";

/// "urn:WSNService":getVersion is a complexType.
class shawnts__getVersion
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:WSNService":getVersionResponse is a complexType.
class shawnts__getVersionResponse
{ public:
/// Element return of type xs:string.
    char*                                return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:WSNService":resetNodes is a complexType.
class shawnts__resetNodes
{ public:
/// Size of array of ns2__urn is 1..unbounded
    int                                  __sizenodes                   ;
/// Pointer to array of length 1..unbounded
    ns2__urn                            *nodes                          1;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:WSNService":flashPrograms is a complexType.
class shawnts__flashPrograms
{ public:
/// Size of array of char* is 1..unbounded
    int                                  __sizenodeIds                 ;
/// Pointer to array of length 1..unbounded
    char*                               *nodeIds                        1;
/// Size of array of int is 1..unbounded
    int                                  __sizeprogramIndices          ;
/// Pointer to array of length 1..unbounded
    int                                 *programIndices                 1;
/// Size of array of shawnts__program* is 1..unbounded
    int                                  __sizeprograms                ;
/// Pointer to array of length 1..unbounded
    shawnts__program*                   *programs                       1;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:WSNService":program is a complexType.
class shawnts__program
{ public:
/// Element metaData of type "urn:WSNService":programMetaData.
    shawnts__programMetaData*            metaData                       0;	///< Optional element.
/// Element program of type xs:base64Binary.
    xsd__base64Binary                    program                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:WSNService":programMetaData is a complexType.
class shawnts__programMetaData
{ public:
/// Element version of type xs:string.
    char*                                version                        0;	///< Optional element.
/// Element name of type xs:string.
    char*                                name                           0;	///< Optional element.
/// Element platform of type xs:string.
    char*                                platform                       0;	///< Optional element.
/// Element other of type xs:string.
    char*                                other                          0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:WSNService":areNodesAlive is a complexType.
class shawnts__areNodesAlive
{ public:
/// Size of array of char* is 1..unbounded
    int                                  __sizenodes                   ;
/// Pointer to array of length 1..unbounded
    char*                               *nodes                          1;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:WSNService":setVirtualLink is a complexType.
class shawnts__setVirtualLink
{ public:
/// Element sourceNode of type xs:string.
    char*                                sourceNode                     1;	///< Required element.
/// Element targetNode of type xs:string.
    char*                                targetNode                     1;	///< Required element.
/// Element remoteServiceInstance of type xs:string.
    char*                                remoteServiceInstance          1;	///< Required element.
/// Size of array of char* is 0..unbounded
    int                                  __sizeparameters              ;
/// Pointer to array of length 0..unbounded
    char*                               *parameters                     0;	///< Nullable pointer.
/// Size of array of char* is 0..unbounded
    int                                  __sizefilters                 ;
/// Pointer to array of length 0..unbounded
    char*                               *filters                        0;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:WSNService":setStartTime is a complexType.
class shawnts__setStartTime
{ public:
/// Element time of type xs:dateTime.
    time_t                               time                           1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:WSNService":enableNode is a complexType.
class shawnts__enableNode
{ public:
/// Element node of type xs:string.
    char*                                node                           1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:WSNService":getFilters is a complexType.
class shawnts__getFilters
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:WSNService":getFiltersResponse is a complexType.
class shawnts__getFiltersResponse
{ public:
/// Size of array of char* is 0..unbounded
    int                                  __sizereturn_                 ;
/// Pointer to array of length 0..unbounded
    char*                               *return_                        0;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:WSNService":getNeighbourhood is a complexType.
class shawnts__getNeighbourhood
{ public:
/// Element node of type xs:string.
    char*                                node                           1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:WSNService":getNeighbourhoodResponse is a complexType.
class shawnts__getNeighbourhoodResponse
{ public:
/// Size of array of char* is 0..unbounded
    int                                  __sizereturn_                 ;
/// Pointer to array of length 0..unbounded
    char*                               *return_                        0;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:WSNService":UnknownNodeUrnException is a complexType.
class shawnts__UnknownNodeUrnException
{ public:
/// Element message of type xs:string.
    char*                                message                        0;	///< Optional element.
/// Size of array of char* is 1..unbounded
    int                                  __sizeurn                     ;
/// Pointer to array of length 1..unbounded
    char*                               *urn                            1;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:WSNService":disablePhysicalLink is a complexType.
class shawnts__disablePhysicalLink
{ public:
/// Element nodeA of type xs:string.
    char*                                nodeA                          1;	///< Required element.
/// Element nodeB of type xs:string.
    char*                                nodeB                          1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:WSNService":getPropertyValueOf is a complexType.
class shawnts__getPropertyValueOf
{ public:
/// Element node of type xs:string.
    char*                                node                           1;	///< Required element.
/// Element propertyName of type xs:string.
    char*                                propertyName                   1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:WSNService":getPropertyValueOfResponse is a complexType.
class shawnts__getPropertyValueOfResponse
{ public:
/// Element return of type xs:string.
    char*                                return_                        0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:WSNService":describeCapabilities is a complexType.
class shawnts__describeCapabilities
{ public:
/// Element capability of type xs:string.
    char*                                capability                     1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:WSNService":describeCapabilitiesResponse is a complexType.
class shawnts__describeCapabilitiesResponse
{ public:
/// Element return of type xs:string.
    char*                                return_                        0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:WSNService":UnsupportedOperationException is a complexType.
class shawnts__UnsupportedOperationException
{ public:
/// Element message of type xs:string.
    char*                                message                        0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:WSNService":send is a complexType.
class shawnts__send
{ public:
/// Size of array of char* is 1..unbounded
    int                                  __sizenodeIds                 ;
/// Pointer to array of length 1..unbounded
    char*                               *nodeIds                        1;
/// Element message of type "urn:CommonTypes":message.
    ns2__message*                        message                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:WSNService":disableNode is a complexType.
class shawnts__disableNode
{ public:
/// Element node of type xs:string.
    char*                                node                           1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:WSNService":destroyVirtualLink is a complexType.
class shawnts__destroyVirtualLink
{ public:
/// Element sourceNode of type xs:string.
    char*                                sourceNode                     1;	///< Required element.
/// Element targetNode of type xs:string.
    char*                                targetNode                     1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:WSNService":enablePhysicalLink is a complexType.
class shawnts__enablePhysicalLink
{ public:
/// Element nodeA of type xs:string.
    char*                                nodeA                          1;	///< Required element.
/// Element nodeB of type xs:string.
    char*                                nodeB                          1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:WSNService":sendResponse is a complexType.
class shawnts__sendResponse
{ public:
/// Element return of type "urn:CommonTypes":requestId.
    ns2__requestId                       return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:WSNService":areNodesAliveResponse is a complexType.
class shawnts__areNodesAliveResponse
{ public:
/// Element return of type "urn:CommonTypes":requestId.
    ns2__requestId                       return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:WSNService":defineNetwork is a complexType.
class shawnts__defineNetwork
{ public:
/// Element newNetwork of type xs:string.
    char*                                newNetwork                     1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:WSNService":defineNetworkResponse is a complexType.
class shawnts__defineNetworkResponse
{ public:
/// Element return of type "urn:CommonTypes":requestId.
    ns2__requestId                       return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:WSNService":destroyVirtualLinkResponse is a complexType.
class shawnts__destroyVirtualLinkResponse
{ public:
/// Element return of type "urn:CommonTypes":requestId.
    ns2__requestId                       return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:WSNService":disableNodeResponse is a complexType.
class shawnts__disableNodeResponse
{ public:
/// Element return of type "urn:CommonTypes":requestId.
    ns2__requestId                       return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:WSNService":disablePhysicalLinkResponse is a complexType.
class shawnts__disablePhysicalLinkResponse
{ public:
/// Element return of type xs:string.
    char*                                return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:WSNService":enableNodeResponse is a complexType.
class shawnts__enableNodeResponse
{ public:
/// Element return of type "urn:CommonTypes":requestId.
    ns2__requestId                       return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:WSNService":enablePhysicalLinkResponse is a complexType.
class shawnts__enablePhysicalLinkResponse
{ public:
/// Element return of type "urn:CommonTypes":requestId.
    ns2__requestId                       return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:WSNService":flashProgramsResponse is a complexType.
class shawnts__flashProgramsResponse
{ public:
/// Element return of type "urn:CommonTypes":requestId.
    ns2__requestId                       return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:WSNService":resetNodesResponse is a complexType.
class shawnts__resetNodesResponse
{ public:
/// Element return of type "urn:CommonTypes":requestId.
    ns2__requestId                       return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:WSNService":setStartTimeResponse is a complexType.
class shawnts__setStartTimeResponse
{ public:
/// Element return of type "urn:CommonTypes":requestId.
    ns2__requestId                       return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:WSNService":setVirtualLinkResponse is a complexType.
class shawnts__setVirtualLinkResponse
{ public:
/// Element return of type "urn:CommonTypes":requestId.
    ns2__requestId                       return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:CommonTypes":message is a complexType.
class ns2__message
{ public:
/// Element sourceNodeId of type xs:string.
    char*                                sourceNodeId                   1;	///< Required element.
/// Element timestamp of type xs:dateTime.
    time_t                               timestamp                      1;	///< Required element.
/// CHOICE OF ELEMENTS FOR choice
    int                                  __union_message               ;	///< Union _ns2__union_message selector: set to SOAP_UNION__ns2__union_message_<fieldname>
    union _ns2__union_message
    {
/// Element textMessage of type "urn:CommonTypes":textMessage.
    ns2__textMessage*                    textMessage                    1;	///< Required element.
/// Element binaryMessage of type "urn:CommonTypes":binaryMessage.
    ns2__binaryMessage*                  binaryMessage                  1;	///< Required element.
    }                                    union_message                 ;
//  END OF CHOICE
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:CommonTypes":textMessage is a complexType.
class ns2__textMessage
{ public:
/// Element msg of type xs:string.
    char*                                msg                            1;	///< Required element.
/// Element messageLevel of type "urn:CommonTypes":messageLevel.
    enum ns2__messageLevel*              messageLevel                   0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:CommonTypes":binaryMessage is a complexType.
class ns2__binaryMessage
{ public:
/// Element binaryData of type xs:base64Binary.
    xsd__base64Binary                    binaryData                     1;	///< Required element.
/// Element binaryType of type xs:byte.
    short*                               binaryType                     0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:CommonTypes":getNetwork is a complexType.
class ns2__getNetwork
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:CommonTypes":getNetworkResponse is a complexType.
class ns2__getNetworkResponse
{ public:
/// Element return of type xs:string.
    char*                                return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// Element "urn:WSNService":areNodesAlive of type "urn:WSNService":areNodesAlive.
/// Note: use wsdl2h option -g to generate this global element declaration.

/// Element "urn:WSNService":describeCapabilities of type "urn:WSNService":describeCapabilities.
/// Note: use wsdl2h option -g to generate this global element declaration.

/// Element "urn:WSNService":describeCapabilitiesResponse of type "urn:WSNService":describeCapabilitiesResponse.
/// Note: use wsdl2h option -g to generate this global element declaration.

/// Element "urn:WSNService":destroyVirtualLink of type "urn:WSNService":destroyVirtualLink.
/// Note: use wsdl2h option -g to generate this global element declaration.

/// Element "urn:WSNService":disableNode of type "urn:WSNService":disableNode.
/// Note: use wsdl2h option -g to generate this global element declaration.

/// Element "urn:WSNService":disablePhysicalLink of type "urn:WSNService":disablePhysicalLink.
/// Note: use wsdl2h option -g to generate this global element declaration.

/// Element "urn:WSNService":enableNode of type "urn:WSNService":enableNode.
/// Note: use wsdl2h option -g to generate this global element declaration.

/// Element "urn:WSNService":enablePhysicalLink of type "urn:WSNService":enablePhysicalLink.
/// Note: use wsdl2h option -g to generate this global element declaration.

/// Element "urn:WSNService":flashPrograms of type "urn:WSNService":flashPrograms.
/// Note: use wsdl2h option -g to generate this global element declaration.

/// Element "urn:WSNService":getFilters of type "urn:WSNService":getFilters.
/// Note: use wsdl2h option -g to generate this global element declaration.

/// Element "urn:WSNService":getFiltersResponse of type "urn:WSNService":getFiltersResponse.
/// Note: use wsdl2h option -g to generate this global element declaration.

/// Element "urn:WSNService":getNeighbourhood of type "urn:WSNService":getNeighbourhood.
/// Note: use wsdl2h option -g to generate this global element declaration.

/// Element "urn:WSNService":getNeighbourhoodResponse of type "urn:WSNService":getNeighbourhoodResponse.
/// Note: use wsdl2h option -g to generate this global element declaration.

/// Element "urn:WSNService":getPropertyValueOf of type "urn:WSNService":getPropertyValueOf.
/// Note: use wsdl2h option -g to generate this global element declaration.

/// Element "urn:WSNService":getPropertyValueOfResponse of type "urn:WSNService":getPropertyValueOfResponse.
/// Note: use wsdl2h option -g to generate this global element declaration.

/// Element "urn:WSNService":getVersion of type "urn:WSNService":getVersion.
/// Note: use wsdl2h option -g to generate this global element declaration.

/// Element "urn:WSNService":getVersionResponse of type "urn:WSNService":getVersionResponse.
/// Note: use wsdl2h option -g to generate this global element declaration.

/// Element "urn:WSNService":program of type "urn:WSNService":program.
/// Note: use wsdl2h option -g to generate this global element declaration.

/// Element "urn:WSNService":programMetaData of type "urn:WSNService":programMetaData.
/// Note: use wsdl2h option -g to generate this global element declaration.

/// Element "urn:WSNService":resetNodes of type "urn:WSNService":resetNodes.
/// Note: use wsdl2h option -g to generate this global element declaration.

/// Element "urn:WSNService":send of type "urn:WSNService":send.
/// Note: use wsdl2h option -g to generate this global element declaration.

/// Element "urn:WSNService":setStartTime of type "urn:WSNService":setStartTime.
/// Note: use wsdl2h option -g to generate this global element declaration.

/// Element "urn:WSNService":setVirtualLink of type "urn:WSNService":setVirtualLink.
/// Note: use wsdl2h option -g to generate this global element declaration.

/// Element "urn:WSNService":UnknownNodeUrnException of type "urn:WSNService":UnknownNodeUrnException.
/// Note: use wsdl2h option -g to generate this global element declaration.

/// Element "urn:WSNService":UnsupportedOperationException of type "urn:WSNService":UnsupportedOperationException.
/// Note: use wsdl2h option -g to generate this global element declaration.

/// Element "urn:WSNService":areNodesAliveResponse of type "urn:WSNService":areNodesAliveResponse.
/// Note: use wsdl2h option -g to generate this global element declaration.

/// Element "urn:WSNService":sendResponse of type "urn:WSNService":sendResponse.
/// Note: use wsdl2h option -g to generate this global element declaration.

/// Element "urn:WSNService":defineNetwork of type "urn:WSNService":defineNetwork.
/// Note: use wsdl2h option -g to generate this global element declaration.

/// Element "urn:WSNService":defineNetworkResponse of type "urn:WSNService":defineNetworkResponse.
/// Note: use wsdl2h option -g to generate this global element declaration.

/// Element "urn:WSNService":disableNodeResponse of type "urn:WSNService":disableNodeResponse.
/// Note: use wsdl2h option -g to generate this global element declaration.

/// Element "urn:WSNService":disablePhysicalLinkResponse of type "urn:WSNService":disablePhysicalLinkResponse.
/// Note: use wsdl2h option -g to generate this global element declaration.

/// Element "urn:WSNService":enableNodeResponse of type "urn:WSNService":enableNodeResponse.
/// Note: use wsdl2h option -g to generate this global element declaration.

/// Element "urn:WSNService":enablePhysicalLinkResponse of type "urn:WSNService":enablePhysicalLinkResponse.
/// Note: use wsdl2h option -g to generate this global element declaration.

/// Element "urn:WSNService":flashProgramsResponse of type "urn:WSNService":flashProgramsResponse.
/// Note: use wsdl2h option -g to generate this global element declaration.

/// Element "urn:WSNService":resetNodesResponse of type "urn:WSNService":resetNodesResponse.
/// Note: use wsdl2h option -g to generate this global element declaration.

/// Element "urn:WSNService":setStartTimeResponse of type "urn:WSNService":setStartTimeResponse.
/// Note: use wsdl2h option -g to generate this global element declaration.

/// Element "urn:WSNService":setVirtualLinkResponse of type "urn:WSNService":setVirtualLinkResponse.
/// Note: use wsdl2h option -g to generate this global element declaration.

/// Element "urn:WSNService":destroyVirtualLinkResponse of type "urn:WSNService":setVirtualLinkResponse.
/// Note: use wsdl2h option -g to generate this global element declaration.

/// Element "urn:CommonTypes":getNetwork of type "urn:CommonTypes":getNetwork.
/// Note: use wsdl2h option -g to generate this global element declaration.

/// Element "urn:CommonTypes":getNetworkResponse of type "urn:CommonTypes":getNetworkResponse.
/// Note: use wsdl2h option -g to generate this global element declaration.

/// Element "urn:CommonTypes":message of type "urn:CommonTypes":message.
/// Note: use wsdl2h option -g to generate this global element declaration.

/// Element "urn:CommonTypes":urn of type "urn:CommonTypes":urn.
/// Note: use wsdl2h option -g to generate this global element declaration.

/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/


//gsoap shawnts service name:	WSNPortBinding 
//gsoap shawnts service type:	WSN 
//gsoap shawnts service port:	REPLACE_WITH_ACTUAL_URL 
//gsoap shawnts service namespace:	urn:WSNService 
//gsoap shawnts service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage WSNService Definitions

@section WSNService_bindings Bindings
  - @ref WSNPortBinding

*/

/**

@page WSNPortBinding Binding "WSNPortBinding"

@section WSNPortBinding_operations Operations of Binding  "WSNPortBinding"
  - @ref __shawnts__send
  - @ref __shawnts__getVersion
  - @ref __shawnts__areNodesAlive
  - @ref __shawnts__defineNetwork
  - @ref __shawnts__describeCapabilities
  - @ref __shawnts__destroyVirtualLink
  - @ref __shawnts__disableNode
  - @ref __shawnts__disablePhysicalLink
  - @ref __shawnts__enableNode
  - @ref __shawnts__enablePhysicalLink
  - @ref __shawnts__flashPrograms
  - @ref __shawnts__getFilters
  - @ref __shawnts__getNeighbourhood
  - @ref __shawnts__getNetwork
  - @ref __shawnts__getPropertyValueOf
  - @ref __shawnts__resetNodes
  - @ref __shawnts__setStartTime
  - @ref __shawnts__setVirtualLink

@section WSNPortBinding_ports Endpoints of Binding  "WSNPortBinding"
  - REPLACE_WITH_ACTUAL_URL

Note: use wsdl2h option -N to change the service binding prefix name

*/

/******************************************************************************\
 *                                                                            *
 * SOAP Fault Detail                                                          *
 *                                                                            *
\******************************************************************************/

/**

The SOAP Fault is part of the gSOAP context and its content is accessed
through the soap.fault->detail variable (SOAP 1.1) or the
soap.fault->SOAP_ENV__Detail variable (SOAP 1.2).
Use option -j to omit.

*/
struct SOAP_ENV__Detail
{
    int                                  __type                        ;	///< set to SOAP_TYPE_X for a serializable type X
    void                                *fault                         ;	///< points to serializable object X or NULL
    _XML                                 __any                         ;	///< Catch any element content in XML string.
    shawnts__UnknownNodeUrnException*    shawnts__UnknownNodeUrnException_;
///< SOAP Fault element ""urn:WSNService":UnknownNodeUrnException" part "fault"
    shawnts__UnsupportedOperationException*  shawnts__UnsupportedOperationException_;
///< SOAP Fault element ""urn:WSNService":UnsupportedOperationException" part "fault"
};

/******************************************************************************\
 *                                                                            *
 * WSNPortBinding                                                             *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * __shawnts__send                                                            *
 *                                                                            *
\******************************************************************************/


/// Operation "__shawnts__send" of service binding "WSNPortBinding"

/**

Operation details:

  - SOAP document/literal style

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___shawnts__send(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    shawnts__send*                      shawnts__send_,
    // response parameters:
    shawnts__sendResponse*              shawnts__sendResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __shawnts__send(
    struct soap *soap,
    // request parameters:
    shawnts__send*                      shawnts__send_,
    // response parameters:
    shawnts__sendResponse*              shawnts__sendResponse_
  );
@endcode

C++ proxy class (defined in soapWSNPortBindingProxy.h):
  class WSNPortBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap shawnts service method-style:	send document
//gsoap shawnts service method-encoding:	send literal
//gsoap shawnts service method-action:	send ""
int __shawnts__send(
    shawnts__send*                      shawnts__send_,	///< Request parameter
    shawnts__sendResponse*              shawnts__sendResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * __shawnts__getVersion                                                      *
 *                                                                            *
\******************************************************************************/


/// Operation "__shawnts__getVersion" of service binding "WSNPortBinding"

/**

Operation details:

  - SOAP document/literal style

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___shawnts__getVersion(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    shawnts__getVersion*                shawnts__getVersion_,
    // response parameters:
    shawnts__getVersionResponse*        shawnts__getVersionResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __shawnts__getVersion(
    struct soap *soap,
    // request parameters:
    shawnts__getVersion*                shawnts__getVersion_,
    // response parameters:
    shawnts__getVersionResponse*        shawnts__getVersionResponse_
  );
@endcode

C++ proxy class (defined in soapWSNPortBindingProxy.h):
  class WSNPortBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap shawnts service method-style:	getVersion document
//gsoap shawnts service method-encoding:	getVersion literal
//gsoap shawnts service method-action:	getVersion ""
int __shawnts__getVersion(
    shawnts__getVersion*                shawnts__getVersion_,	///< Request parameter
    shawnts__getVersionResponse*        shawnts__getVersionResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * __shawnts__areNodesAlive                                                   *
 *                                                                            *
\******************************************************************************/


/// Operation "__shawnts__areNodesAlive" of service binding "WSNPortBinding"

/**

Operation details:

  - SOAP document/literal style

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___shawnts__areNodesAlive(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    shawnts__areNodesAlive*             shawnts__areNodesAlive_,
    // response parameters:
    shawnts__areNodesAliveResponse*     shawnts__areNodesAliveResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __shawnts__areNodesAlive(
    struct soap *soap,
    // request parameters:
    shawnts__areNodesAlive*             shawnts__areNodesAlive_,
    // response parameters:
    shawnts__areNodesAliveResponse*     shawnts__areNodesAliveResponse_
  );
@endcode

C++ proxy class (defined in soapWSNPortBindingProxy.h):
  class WSNPortBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap shawnts service method-style:	areNodesAlive document
//gsoap shawnts service method-encoding:	areNodesAlive literal
//gsoap shawnts service method-action:	areNodesAlive ""
int __shawnts__areNodesAlive(
    shawnts__areNodesAlive*             shawnts__areNodesAlive_,	///< Request parameter
    shawnts__areNodesAliveResponse*     shawnts__areNodesAliveResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * __shawnts__defineNetwork                                                   *
 *                                                                            *
\******************************************************************************/


/// Operation "__shawnts__defineNetwork" of service binding "WSNPortBinding"

/**

Operation details:

  - SOAP document/literal style

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___shawnts__defineNetwork(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    shawnts__defineNetwork*             shawnts__defineNetwork_,
    // response parameters:
    shawnts__defineNetworkResponse*     shawnts__defineNetworkResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __shawnts__defineNetwork(
    struct soap *soap,
    // request parameters:
    shawnts__defineNetwork*             shawnts__defineNetwork_,
    // response parameters:
    shawnts__defineNetworkResponse*     shawnts__defineNetworkResponse_
  );
@endcode

C++ proxy class (defined in soapWSNPortBindingProxy.h):
  class WSNPortBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap shawnts service method-style:	defineNetwork document
//gsoap shawnts service method-encoding:	defineNetwork literal
//gsoap shawnts service method-action:	defineNetwork ""
int __shawnts__defineNetwork(
    shawnts__defineNetwork*             shawnts__defineNetwork_,	///< Request parameter
    shawnts__defineNetworkResponse*     shawnts__defineNetworkResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * __shawnts__describeCapabilities                                            *
 *                                                                            *
\******************************************************************************/


/// Operation "__shawnts__describeCapabilities" of service binding "WSNPortBinding"

/**

Operation details:

  - SOAP document/literal style
  - SOAP Fault: "urn:WSNService":UnsupportedOperationException (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___shawnts__describeCapabilities(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    shawnts__describeCapabilities*      shawnts__describeCapabilities_,
    // response parameters:
    shawnts__describeCapabilitiesResponse* shawnts__describeCapabilitiesResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __shawnts__describeCapabilities(
    struct soap *soap,
    // request parameters:
    shawnts__describeCapabilities*      shawnts__describeCapabilities_,
    // response parameters:
    shawnts__describeCapabilitiesResponse* shawnts__describeCapabilitiesResponse_
  );
@endcode

C++ proxy class (defined in soapWSNPortBindingProxy.h):
  class WSNPortBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap shawnts service method-style:	describeCapabilities document
//gsoap shawnts service method-encoding:	describeCapabilities literal
//gsoap shawnts service method-action:	describeCapabilities ""
//gsoap shawnts service method-fault:	describeCapabilities shawnts__UnsupportedOperationException_
int __shawnts__describeCapabilities(
    shawnts__describeCapabilities*      shawnts__describeCapabilities_,	///< Request parameter
    shawnts__describeCapabilitiesResponse* shawnts__describeCapabilitiesResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * __shawnts__destroyVirtualLink                                              *
 *                                                                            *
\******************************************************************************/


/// Operation "__shawnts__destroyVirtualLink" of service binding "WSNPortBinding"

/**

Operation details:

  - SOAP document/literal style

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___shawnts__destroyVirtualLink(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    shawnts__destroyVirtualLink*        shawnts__destroyVirtualLink_,
    // response parameters:
    shawnts__setVirtualLinkResponse*    shawnts__destroyVirtualLinkResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __shawnts__destroyVirtualLink(
    struct soap *soap,
    // request parameters:
    shawnts__destroyVirtualLink*        shawnts__destroyVirtualLink_,
    // response parameters:
    shawnts__setVirtualLinkResponse*    shawnts__destroyVirtualLinkResponse_
  );
@endcode

C++ proxy class (defined in soapWSNPortBindingProxy.h):
  class WSNPortBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap shawnts service method-style:	destroyVirtualLink document
//gsoap shawnts service method-encoding:	destroyVirtualLink literal
//gsoap shawnts service method-action:	destroyVirtualLink ""
int __shawnts__destroyVirtualLink(
    shawnts__destroyVirtualLink*        shawnts__destroyVirtualLink_,	///< Request parameter
    shawnts__setVirtualLinkResponse*    shawnts__destroyVirtualLinkResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * __shawnts__disableNode                                                     *
 *                                                                            *
\******************************************************************************/


/// Operation "__shawnts__disableNode" of service binding "WSNPortBinding"

/**

Operation details:

  - SOAP document/literal style

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___shawnts__disableNode(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    shawnts__disableNode*               shawnts__disableNode_,
    // response parameters:
    shawnts__disableNodeResponse*       shawnts__disableNodeResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __shawnts__disableNode(
    struct soap *soap,
    // request parameters:
    shawnts__disableNode*               shawnts__disableNode_,
    // response parameters:
    shawnts__disableNodeResponse*       shawnts__disableNodeResponse_
  );
@endcode

C++ proxy class (defined in soapWSNPortBindingProxy.h):
  class WSNPortBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap shawnts service method-style:	disableNode document
//gsoap shawnts service method-encoding:	disableNode literal
//gsoap shawnts service method-action:	disableNode ""
int __shawnts__disableNode(
    shawnts__disableNode*               shawnts__disableNode_,	///< Request parameter
    shawnts__disableNodeResponse*       shawnts__disableNodeResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * __shawnts__disablePhysicalLink                                             *
 *                                                                            *
\******************************************************************************/


/// Operation "__shawnts__disablePhysicalLink" of service binding "WSNPortBinding"

/**

Operation details:

  - SOAP document/literal style

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___shawnts__disablePhysicalLink(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    shawnts__disablePhysicalLink*       shawnts__disablePhysicalLink_,
    // response parameters:
    shawnts__disablePhysicalLinkResponse* shawnts__disablePhysicalLinkResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __shawnts__disablePhysicalLink(
    struct soap *soap,
    // request parameters:
    shawnts__disablePhysicalLink*       shawnts__disablePhysicalLink_,
    // response parameters:
    shawnts__disablePhysicalLinkResponse* shawnts__disablePhysicalLinkResponse_
  );
@endcode

C++ proxy class (defined in soapWSNPortBindingProxy.h):
  class WSNPortBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap shawnts service method-style:	disablePhysicalLink document
//gsoap shawnts service method-encoding:	disablePhysicalLink literal
//gsoap shawnts service method-action:	disablePhysicalLink ""
int __shawnts__disablePhysicalLink(
    shawnts__disablePhysicalLink*       shawnts__disablePhysicalLink_,	///< Request parameter
    shawnts__disablePhysicalLinkResponse* shawnts__disablePhysicalLinkResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * __shawnts__enableNode                                                      *
 *                                                                            *
\******************************************************************************/


/// Operation "__shawnts__enableNode" of service binding "WSNPortBinding"

/**

Operation details:

  - SOAP document/literal style

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___shawnts__enableNode(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    shawnts__enableNode*                shawnts__enableNode_,
    // response parameters:
    shawnts__enableNodeResponse*        shawnts__enableNodeResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __shawnts__enableNode(
    struct soap *soap,
    // request parameters:
    shawnts__enableNode*                shawnts__enableNode_,
    // response parameters:
    shawnts__enableNodeResponse*        shawnts__enableNodeResponse_
  );
@endcode

C++ proxy class (defined in soapWSNPortBindingProxy.h):
  class WSNPortBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap shawnts service method-style:	enableNode document
//gsoap shawnts service method-encoding:	enableNode literal
//gsoap shawnts service method-action:	enableNode ""
int __shawnts__enableNode(
    shawnts__enableNode*                shawnts__enableNode_,	///< Request parameter
    shawnts__enableNodeResponse*        shawnts__enableNodeResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * __shawnts__enablePhysicalLink                                              *
 *                                                                            *
\******************************************************************************/


/// Operation "__shawnts__enablePhysicalLink" of service binding "WSNPortBinding"

/**

Operation details:

  - SOAP document/literal style

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___shawnts__enablePhysicalLink(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    shawnts__enablePhysicalLink*        shawnts__enablePhysicalLink_,
    // response parameters:
    shawnts__enablePhysicalLinkResponse* shawnts__enablePhysicalLinkResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __shawnts__enablePhysicalLink(
    struct soap *soap,
    // request parameters:
    shawnts__enablePhysicalLink*        shawnts__enablePhysicalLink_,
    // response parameters:
    shawnts__enablePhysicalLinkResponse* shawnts__enablePhysicalLinkResponse_
  );
@endcode

C++ proxy class (defined in soapWSNPortBindingProxy.h):
  class WSNPortBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap shawnts service method-style:	enablePhysicalLink document
//gsoap shawnts service method-encoding:	enablePhysicalLink literal
//gsoap shawnts service method-action:	enablePhysicalLink ""
int __shawnts__enablePhysicalLink(
    shawnts__enablePhysicalLink*        shawnts__enablePhysicalLink_,	///< Request parameter
    shawnts__enablePhysicalLinkResponse* shawnts__enablePhysicalLinkResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * __shawnts__flashPrograms                                                   *
 *                                                                            *
\******************************************************************************/


/// Operation "__shawnts__flashPrograms" of service binding "WSNPortBinding"

/**

Operation details:

  - SOAP document/literal style

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___shawnts__flashPrograms(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    shawnts__flashPrograms*             shawnts__flashPrograms_,
    // response parameters:
    shawnts__flashProgramsResponse*     shawnts__flashProgramsResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __shawnts__flashPrograms(
    struct soap *soap,
    // request parameters:
    shawnts__flashPrograms*             shawnts__flashPrograms_,
    // response parameters:
    shawnts__flashProgramsResponse*     shawnts__flashProgramsResponse_
  );
@endcode

C++ proxy class (defined in soapWSNPortBindingProxy.h):
  class WSNPortBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap shawnts service method-style:	flashPrograms document
//gsoap shawnts service method-encoding:	flashPrograms literal
//gsoap shawnts service method-action:	flashPrograms ""
int __shawnts__flashPrograms(
    shawnts__flashPrograms*             shawnts__flashPrograms_,	///< Request parameter
    shawnts__flashProgramsResponse*     shawnts__flashProgramsResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * __shawnts__getFilters                                                      *
 *                                                                            *
\******************************************************************************/


/// Operation "__shawnts__getFilters" of service binding "WSNPortBinding"

/**

Operation details:

  - SOAP document/literal style

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___shawnts__getFilters(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    shawnts__getFilters*                shawnts__getFilters_,
    // response parameters:
    shawnts__getFiltersResponse*        shawnts__getFiltersResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __shawnts__getFilters(
    struct soap *soap,
    // request parameters:
    shawnts__getFilters*                shawnts__getFilters_,
    // response parameters:
    shawnts__getFiltersResponse*        shawnts__getFiltersResponse_
  );
@endcode

C++ proxy class (defined in soapWSNPortBindingProxy.h):
  class WSNPortBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap shawnts service method-style:	getFilters document
//gsoap shawnts service method-encoding:	getFilters literal
//gsoap shawnts service method-action:	getFilters ""
int __shawnts__getFilters(
    shawnts__getFilters*                shawnts__getFilters_,	///< Request parameter
    shawnts__getFiltersResponse*        shawnts__getFiltersResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * __shawnts__getNeighbourhood                                                *
 *                                                                            *
\******************************************************************************/


/// Operation "__shawnts__getNeighbourhood" of service binding "WSNPortBinding"

/**

Operation details:

  - SOAP document/literal style
  - SOAP Fault: "urn:WSNService":UnknownNodeUrnException (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___shawnts__getNeighbourhood(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    shawnts__getNeighbourhood*          shawnts__getNeighbourhood_,
    // response parameters:
    shawnts__getNeighbourhoodResponse*  shawnts__getNeighbourhoodResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __shawnts__getNeighbourhood(
    struct soap *soap,
    // request parameters:
    shawnts__getNeighbourhood*          shawnts__getNeighbourhood_,
    // response parameters:
    shawnts__getNeighbourhoodResponse*  shawnts__getNeighbourhoodResponse_
  );
@endcode

C++ proxy class (defined in soapWSNPortBindingProxy.h):
  class WSNPortBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap shawnts service method-style:	getNeighbourhood document
//gsoap shawnts service method-encoding:	getNeighbourhood literal
//gsoap shawnts service method-action:	getNeighbourhood ""
//gsoap shawnts service method-fault:	getNeighbourhood shawnts__UnknownNodeUrnException_
int __shawnts__getNeighbourhood(
    shawnts__getNeighbourhood*          shawnts__getNeighbourhood_,	///< Request parameter
    shawnts__getNeighbourhoodResponse*  shawnts__getNeighbourhoodResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * __shawnts__getNetwork                                                      *
 *                                                                            *
\******************************************************************************/


/// Operation "__shawnts__getNetwork" of service binding "WSNPortBinding"

/**

Operation details:

  - SOAP document/literal style

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___shawnts__getNetwork(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns2__getNetwork*                    ns2__getNetwork_,
    // response parameters:
    ns2__getNetworkResponse*            ns2__getNetworkResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __shawnts__getNetwork(
    struct soap *soap,
    // request parameters:
    ns2__getNetwork*                    ns2__getNetwork_,
    // response parameters:
    ns2__getNetworkResponse*            ns2__getNetworkResponse_
  );
@endcode

C++ proxy class (defined in soapWSNPortBindingProxy.h):
  class WSNPortBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap shawnts service method-style:	getNetwork document
//gsoap shawnts service method-encoding:	getNetwork literal
//gsoap shawnts service method-action:	getNetwork ""
int __shawnts__getNetwork(
    ns2__getNetwork*                    ns2__getNetwork_,	///< Request parameter
    ns2__getNetworkResponse*            ns2__getNetworkResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * __shawnts__getPropertyValueOf                                              *
 *                                                                            *
\******************************************************************************/


/// Operation "__shawnts__getPropertyValueOf" of service binding "WSNPortBinding"

/**

Operation details:

  - SOAP document/literal style
  - SOAP Fault: "urn:WSNService":UnknownNodeUrnException (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___shawnts__getPropertyValueOf(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    shawnts__getPropertyValueOf*        shawnts__getPropertyValueOf_,
    // response parameters:
    shawnts__getPropertyValueOfResponse* shawnts__getPropertyValueOfResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __shawnts__getPropertyValueOf(
    struct soap *soap,
    // request parameters:
    shawnts__getPropertyValueOf*        shawnts__getPropertyValueOf_,
    // response parameters:
    shawnts__getPropertyValueOfResponse* shawnts__getPropertyValueOfResponse_
  );
@endcode

C++ proxy class (defined in soapWSNPortBindingProxy.h):
  class WSNPortBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap shawnts service method-style:	getPropertyValueOf document
//gsoap shawnts service method-encoding:	getPropertyValueOf literal
//gsoap shawnts service method-action:	getPropertyValueOf ""
//gsoap shawnts service method-fault:	getPropertyValueOf shawnts__UnknownNodeUrnException_
int __shawnts__getPropertyValueOf(
    shawnts__getPropertyValueOf*        shawnts__getPropertyValueOf_,	///< Request parameter
    shawnts__getPropertyValueOfResponse* shawnts__getPropertyValueOfResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * __shawnts__resetNodes                                                      *
 *                                                                            *
\******************************************************************************/


/// Operation "__shawnts__resetNodes" of service binding "WSNPortBinding"

/**

Operation details:

  - SOAP document/literal style

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___shawnts__resetNodes(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    shawnts__resetNodes*                shawnts__resetNodes_,
    // response parameters:
    shawnts__resetNodesResponse*        shawnts__resetNodesResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __shawnts__resetNodes(
    struct soap *soap,
    // request parameters:
    shawnts__resetNodes*                shawnts__resetNodes_,
    // response parameters:
    shawnts__resetNodesResponse*        shawnts__resetNodesResponse_
  );
@endcode

C++ proxy class (defined in soapWSNPortBindingProxy.h):
  class WSNPortBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap shawnts service method-style:	resetNodes document
//gsoap shawnts service method-encoding:	resetNodes literal
//gsoap shawnts service method-action:	resetNodes ""
int __shawnts__resetNodes(
    shawnts__resetNodes*                shawnts__resetNodes_,	///< Request parameter
    shawnts__resetNodesResponse*        shawnts__resetNodesResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * __shawnts__setStartTime                                                    *
 *                                                                            *
\******************************************************************************/


/// Operation "__shawnts__setStartTime" of service binding "WSNPortBinding"

/**

Operation details:

  - SOAP document/literal style

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___shawnts__setStartTime(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    shawnts__setStartTime*              shawnts__setStartTime_,
    // response parameters:
    shawnts__setStartTimeResponse*      shawnts__setStartTimeResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __shawnts__setStartTime(
    struct soap *soap,
    // request parameters:
    shawnts__setStartTime*              shawnts__setStartTime_,
    // response parameters:
    shawnts__setStartTimeResponse*      shawnts__setStartTimeResponse_
  );
@endcode

C++ proxy class (defined in soapWSNPortBindingProxy.h):
  class WSNPortBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap shawnts service method-style:	setStartTime document
//gsoap shawnts service method-encoding:	setStartTime literal
//gsoap shawnts service method-action:	setStartTime ""
int __shawnts__setStartTime(
    shawnts__setStartTime*              shawnts__setStartTime_,	///< Request parameter
    shawnts__setStartTimeResponse*      shawnts__setStartTimeResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * __shawnts__setVirtualLink                                                  *
 *                                                                            *
\******************************************************************************/


/// Operation "__shawnts__setVirtualLink" of service binding "WSNPortBinding"

/**

Operation details:

  - SOAP document/literal style

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___shawnts__setVirtualLink(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    shawnts__setVirtualLink*            shawnts__setVirtualLink_,
    // response parameters:
    shawnts__setVirtualLinkResponse*    shawnts__setVirtualLinkResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __shawnts__setVirtualLink(
    struct soap *soap,
    // request parameters:
    shawnts__setVirtualLink*            shawnts__setVirtualLink_,
    // response parameters:
    shawnts__setVirtualLinkResponse*    shawnts__setVirtualLinkResponse_
  );
@endcode

C++ proxy class (defined in soapWSNPortBindingProxy.h):
  class WSNPortBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap shawnts service method-style:	setVirtualLink document
//gsoap shawnts service method-encoding:	setVirtualLink literal
//gsoap shawnts service method-action:	setVirtualLink ""
int __shawnts__setVirtualLink(
    shawnts__setVirtualLink*            shawnts__setVirtualLink_,	///< Request parameter
    shawnts__setVirtualLinkResponse*    shawnts__setVirtualLinkResponse_	///< Response parameter
);

}

/* End of server_description.h */

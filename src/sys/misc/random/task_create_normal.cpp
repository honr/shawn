/************************************************************************
 ** This file is part of the network simulator Shawn.                  **
 ** Copyright (C) 2004-2007 by the SwarmNet (www.swarmnet.de) project  **
 ** Shawn is free software; you can redistribute it and/or modify it   **
 ** under the terms of the BSD License. Refer to the shawn-licence.txt **
 ** file in the root of the Shawn source tree for further details.     **
 ************************************************************************/

#include "sys/misc/random/normal_random_variable.h"
#include "sys/misc/random/task_create_normal.h"
#include "sys/simulation/simulation_controller.h"
#include "sys/simulation/simulation_environment.h"
#include "sys/misc/random/random_variable_keeper.h"
#include "sys/util/defutils.h"
#include <sstream>
#include <math.h>

namespace shawn
{


   SimulationTaskCreateNormal::
   SimulationTaskCreateNormal()
   {}
   // ----------------------------------------------------------------------
   SimulationTaskCreateNormal::
   ~SimulationTaskCreateNormal()
   {}
   // ----------------------------------------------------------------------
   void
   SimulationTaskCreateNormal::
   run( SimulationController& sc )
      throw( std::runtime_error )
   {
      NormalRandomVariable* var = new NormalRandomVariable;
      const SimulationEnvironment& se = sc.environment();

      bool stddevset;
      bool varset;

      double stddev = se.optional_double_param("stddev",1.0,&stddevset);
      double variance = se.optional_double_param("variance",1.0,&varset);

      try {
         if( varset )
            if( stddevset )
               {
                  if( !EQDOUBLE(stddev*stddev,variance) )
                     {
                        std::ostringstream oss;
                        oss << "impossible to create distribution with variance "
                            << variance
                            << " and standard deviation "
                            << stddev;
                        throw std::runtime_error(oss.str());
                     }
                  var->set_standard_deviation(stddev);
               }
            else
               var->set_variance(variance);
         else
            var->set_standard_deviation(stddev);
         
         var->set_mean( se.optional_double_param("mean",0.0) );
         var->set_name( se.optional_string_param("name","") );
         var->init();
      }
      catch( std::runtime_error& ) {
         delete var;
         throw;
      }
      sc.random_variable_keeper_w().add(var);
   }
   // ----------------------------------------------------------------------
   std::string
   SimulationTaskCreateNormal::
   name( void )
      const throw()
   {
      return std::string("create_normal");
   }
   // ----------------------------------------------------------------------
   std::string
   SimulationTaskCreateNormal::
   description( void )
      const throw()
   {
      return std::string("creates a random variable with normal distribution with mean $mean, variance $variance or standard deviation $stddev (whichever is given). gets name $name, if specified, otherwise an autogenerated name");
   }

}

/*-----------------------------------------------------------------------
 * Source  $Source: /cvs/shawn/shawn/sys/misc/random/task_create_normal.cpp,v $
 * Version $Revision$
 * Date    $Date$
 *-----------------------------------------------------------------------
 * $Log: task_create_normal.cpp,v $
 *-----------------------------------------------------------------------*/

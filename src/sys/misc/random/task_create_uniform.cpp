/************************************************************************
 ** This file is part of the network simulator Shawn.                  **
 ** Copyright (C) 2004-2007 by the SwarmNet (www.swarmnet.de) project  **
 ** Shawn is free software; you can redistribute it and/or modify it   **
 ** under the terms of the BSD License. Refer to the shawn-licence.txt **
 ** file in the root of the Shawn source tree for further details.     **
 ************************************************************************/

#include "sys/misc/random/uniform_random_variable.h"
#include "sys/misc/random/task_create_uniform.h"
#include "sys/simulation/simulation_controller.h"
#include "sys/simulation/simulation_environment.h"
#include "sys/misc/random/random_variable_keeper.h"


namespace shawn
{


   SimulationTaskCreateUniform::
   SimulationTaskCreateUniform()
   {}
   // ----------------------------------------------------------------------
   SimulationTaskCreateUniform::
   ~SimulationTaskCreateUniform()
   {}
   // ----------------------------------------------------------------------
   void
   SimulationTaskCreateUniform::
   run( SimulationController& sc )
      throw( std::runtime_error )
   {
      UniformRandomVariable* var = new UniformRandomVariable;
      
      try {
         const SimulationEnvironment& se = sc.environment();

         var->set_lower_bound( se.optional_double_param("lower",0.0) );
         var->set_upper_bound( se.optional_double_param("upper",1.0) );
         var->set_lower_bound_inclusive( se.optional_bool_param("lower_incl",true) );
         var->set_upper_bound_inclusive( se.optional_bool_param("upper_incl",false) );
         var->set_name( se.optional_string_param("name","") );
         var->init();
      }
      catch( std::runtime_error& ) {
         delete var;
         throw;
      }
      sc.random_variable_keeper_w().add(var);
      std::cout << "added " << var->name() << std::endl;
   }
   // ----------------------------------------------------------------------
   std::string
   SimulationTaskCreateUniform::
   name( void )
      const throw()
   {
      return std::string("create_uniform");
   }
   // ----------------------------------------------------------------------
   std::string
   SimulationTaskCreateUniform::
   description( void )
      const throw()
   {
      return std::string("creates a random variable with uniform distribution on $lower..$upper (endpoints inclusive iff $lower_incl resp. $upper_incl). gets name $name, if specified, otherwise an autogenerated name");
   }

}

/*-----------------------------------------------------------------------
 * Source  $Source: /cvs/shawn/shawn/sys/misc/random/task_create_uniform.cpp,v $
 * Version $Revision: 1.3 $
 * Date    $Date: 2005/08/05 10:00:40 $
 *-----------------------------------------------------------------------
 * $Log: task_create_uniform.cpp,v $
 *-----------------------------------------------------------------------*/

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.29
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */


#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC)
#   if (__SUNPRO_CC <= 0x560)
#     define SWIGTEMPLATEDISAMBIGUATOR template
#   else
#     define SWIGTEMPLATEDISAMBIGUATOR 
#   endif
# else
#   define SWIGTEMPLATEDISAMBIGUATOR 
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER)
# define _CRT_SECURE_NO_DEPRECATE
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTELC__)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" } };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#include <string>


	#include "../src/sys/util/defutils.h"


	#include "../src/sys/util/refcnt_pointable.h"


	#include "../src/sys/tag.h"
	#include "../src/sys/util/refcnt_pointer.h"


	#include "../src/sys/tag_container.h"


	#include "../src/sys/tag.h"


	// SWIG thinks that Inner is a global class, so we need to trick
	// the C++ compiler into understanding this so called global
	// type.
	typedef shawn::Tag::const_entry_iterator::IteratorData IteratorData;
	typedef shawn::Tag::const_entry_iterator const_entry_iterator;


	#include "../src/sys/tag_syncable.h"


	#include "../src/sys/vec.h"


	#include "../src/sys/misc/node_change_listener.h"


	#include "../src/sys/misc/skipnull_iterator.h"

	//typedef std::vector< shawn::Node* > vector_node_t;


	#include "../src/sys/util/keeper_managed.h"


	#include "../src/sys/simulation/simulation_task.h"


	#include "../src/sys/node_movement.h"


	#include "../src/sys/message.h"


	#include "../src/sys/processor.h"


	#include "../src/sys/world.h"


	#include "../src/sys/node.h"


	#include "../src/sys/simulation/simulation_environment.h"


	#include "../src/sys/simulation/simulation_controller.h"


	#include "../src/sys/simulation/shawn_simulation_controller.h"


	#include "../src/sys/event_scheduler.h"


	extern shawn::ShawnSimulationController* master_init();


#ifdef __cplusplus
extern "C" {
#endif

JNIEXPORT jdouble JNICALL Java_de_swarmnet_shawn_ShawnJNI_EPSILON_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double) .00001;
  
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_new_1RefcntPointable(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  shawn::RefcntPointable *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (shawn::RefcntPointable *)new shawn::RefcntPointable();
  *(shawn::RefcntPointable **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_delete_1RefcntPointable(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  shawn::RefcntPointable *arg1 = (shawn::RefcntPointable *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::RefcntPointable **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_RefcntPointable_1reference_1counter_1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  shawn::RefcntPointable *arg1 = (shawn::RefcntPointable *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::RefcntPointable **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->reference_counter_ = arg2;
  
}


JNIEXPORT jint JNICALL Java_de_swarmnet_shawn_ShawnJNI_RefcntPointable_1reference_1counter_1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  shawn::RefcntPointable *arg1 = (shawn::RefcntPointable *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::RefcntPointable **)&jarg1; 
  result = (int) ((arg1)->reference_counter_);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_new_1RefcntPointer_1Tag_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  shawn::RefcntPointer<shawn::Tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (shawn::RefcntPointer<shawn::Tag > *)new shawn::RefcntPointer<shawn::Tag >();
  *(shawn::RefcntPointer<shawn::Tag > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_new_1RefcntPointer_1Tag_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  shawn::RefcntPointer<shawn::Tag >::TargetType *arg1 = (shawn::RefcntPointer<shawn::Tag >::TargetType *) 0 ;
  shawn::RefcntPointer<shawn::Tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::RefcntPointer<shawn::Tag >::TargetType **)&jarg1; 
  result = (shawn::RefcntPointer<shawn::Tag > *)new shawn::RefcntPointer<shawn::Tag >(arg1);
  *(shawn::RefcntPointer<shawn::Tag > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_new_1RefcntPointer_1Tag_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  shawn::RefcntPointer<shawn::Tag >::SelfType *arg1 = 0 ;
  shawn::RefcntPointer<shawn::Tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::RefcntPointer<shawn::Tag >::SelfType **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shawn::RefcntPointer<shawn::Tag >::SelfType const & reference is null");
    return 0;
  } 
  result = (shawn::RefcntPointer<shawn::Tag > *)new shawn::RefcntPointer<shawn::Tag >((shawn::RefcntPointer<shawn::Tag >::SelfType const &)*arg1);
  *(shawn::RefcntPointer<shawn::Tag > **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_delete_1RefcntPointer_1Tag(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  shawn::RefcntPointer<shawn::Tag > *arg1 = (shawn::RefcntPointer<shawn::Tag > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::RefcntPointer<shawn::Tag > **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jboolean JNICALL Java_de_swarmnet_shawn_ShawnJNI_RefcntPointer_1Tag_1is_1null(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  shawn::RefcntPointer<shawn::Tag > *arg1 = (shawn::RefcntPointer<shawn::Tag > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::RefcntPointer<shawn::Tag > **)&jarg1; 
  result = (bool)((shawn::RefcntPointer<shawn::Tag > const *)arg1)->is_null();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_de_swarmnet_shawn_ShawnJNI_RefcntPointer_1Tag_1is_1not_1null(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  shawn::RefcntPointer<shawn::Tag > *arg1 = (shawn::RefcntPointer<shawn::Tag > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::RefcntPointer<shawn::Tag > **)&jarg1; 
  result = (bool)((shawn::RefcntPointer<shawn::Tag > const *)arg1)->is_not_null();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_RefcntPointer_1Tag_1_1_1ref_1_1(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  shawn::RefcntPointer<shawn::Tag > *arg1 = (shawn::RefcntPointer<shawn::Tag > *) 0 ;
  shawn::Tag *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::RefcntPointer<shawn::Tag > **)&jarg1; 
  {
    shawn::Tag &_result_ref = ((shawn::RefcntPointer<shawn::Tag > const *)arg1)->operator *();
    result = (shawn::Tag *) &_result_ref;
  }
  *(shawn::Tag **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_RefcntPointer_1Tag_1_1_1deref_1_1(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  shawn::RefcntPointer<shawn::Tag > *arg1 = (shawn::RefcntPointer<shawn::Tag > *) 0 ;
  shawn::Tag *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::RefcntPointer<shawn::Tag > **)&jarg1; 
  result = (shawn::Tag *)((shawn::RefcntPointer<shawn::Tag > const *)arg1)->operator ->();
  *(shawn::Tag **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_RefcntPointer_1Tag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  shawn::RefcntPointer<shawn::Tag > *arg1 = (shawn::RefcntPointer<shawn::Tag > *) 0 ;
  shawn::Tag *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::RefcntPointer<shawn::Tag > **)&jarg1; 
  result = (shawn::Tag *)((shawn::RefcntPointer<shawn::Tag > const *)arg1)->get();
  *(shawn::Tag **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_RefcntPointer_1Tag_1assign_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  shawn::RefcntPointer<shawn::Tag > *arg1 = (shawn::RefcntPointer<shawn::Tag > *) 0 ;
  shawn::RefcntPointer<shawn::Tag >::SelfType *arg2 = 0 ;
  shawn::RefcntPointer<shawn::Tag >::SelfType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::RefcntPointer<shawn::Tag > **)&jarg1; 
  arg2 = *(shawn::RefcntPointer<shawn::Tag >::SelfType **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shawn::RefcntPointer<shawn::Tag >::SelfType const & reference is null");
    return 0;
  } 
  {
    shawn::RefcntPointer<shawn::Tag >::SelfType &_result_ref = (arg1)->operator =((shawn::RefcntPointer<shawn::Tag >::SelfType const &)*arg2);
    result = (shawn::RefcntPointer<shawn::Tag >::SelfType *) &_result_ref;
  }
  *(shawn::RefcntPointer<shawn::Tag >::SelfType **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_RefcntPointer_1Tag_1assign_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  shawn::RefcntPointer<shawn::Tag > *arg1 = (shawn::RefcntPointer<shawn::Tag > *) 0 ;
  shawn::RefcntPointer<shawn::Tag >::TargetType *arg2 = (shawn::RefcntPointer<shawn::Tag >::TargetType *) 0 ;
  shawn::RefcntPointer<shawn::Tag >::SelfType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::RefcntPointer<shawn::Tag > **)&jarg1; 
  arg2 = *(shawn::RefcntPointer<shawn::Tag >::TargetType **)&jarg2; 
  {
    shawn::RefcntPointer<shawn::Tag >::SelfType &_result_ref = (arg1)->operator =(arg2);
    result = (shawn::RefcntPointer<shawn::Tag >::SelfType *) &_result_ref;
  }
  *(shawn::RefcntPointer<shawn::Tag >::SelfType **)&jresult = result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_de_swarmnet_shawn_ShawnJNI_RefcntPointer_1Tag_1lesserThan_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  shawn::RefcntPointer<shawn::Tag > *arg1 = (shawn::RefcntPointer<shawn::Tag > *) 0 ;
  shawn::RefcntPointer<shawn::Tag >::SelfType *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::RefcntPointer<shawn::Tag > **)&jarg1; 
  arg2 = *(shawn::RefcntPointer<shawn::Tag >::SelfType **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shawn::RefcntPointer<shawn::Tag >::SelfType const & reference is null");
    return 0;
  } 
  result = (bool)((shawn::RefcntPointer<shawn::Tag > const *)arg1)->operator <((shawn::RefcntPointer<shawn::Tag >::SelfType const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_de_swarmnet_shawn_ShawnJNI_RefcntPointer_1Tag_1lesserEqual_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  shawn::RefcntPointer<shawn::Tag > *arg1 = (shawn::RefcntPointer<shawn::Tag > *) 0 ;
  shawn::RefcntPointer<shawn::Tag >::SelfType *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::RefcntPointer<shawn::Tag > **)&jarg1; 
  arg2 = *(shawn::RefcntPointer<shawn::Tag >::SelfType **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shawn::RefcntPointer<shawn::Tag >::SelfType const & reference is null");
    return 0;
  } 
  result = (bool)((shawn::RefcntPointer<shawn::Tag > const *)arg1)->operator <=((shawn::RefcntPointer<shawn::Tag >::SelfType const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_de_swarmnet_shawn_ShawnJNI_RefcntPointer_1Tag_1greaterThan_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  shawn::RefcntPointer<shawn::Tag > *arg1 = (shawn::RefcntPointer<shawn::Tag > *) 0 ;
  shawn::RefcntPointer<shawn::Tag >::SelfType *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::RefcntPointer<shawn::Tag > **)&jarg1; 
  arg2 = *(shawn::RefcntPointer<shawn::Tag >::SelfType **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shawn::RefcntPointer<shawn::Tag >::SelfType const & reference is null");
    return 0;
  } 
  result = (bool)((shawn::RefcntPointer<shawn::Tag > const *)arg1)->operator >((shawn::RefcntPointer<shawn::Tag >::SelfType const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_de_swarmnet_shawn_ShawnJNI_RefcntPointer_1Tag_1greaterEqual_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  shawn::RefcntPointer<shawn::Tag > *arg1 = (shawn::RefcntPointer<shawn::Tag > *) 0 ;
  shawn::RefcntPointer<shawn::Tag >::SelfType *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::RefcntPointer<shawn::Tag > **)&jarg1; 
  arg2 = *(shawn::RefcntPointer<shawn::Tag >::SelfType **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shawn::RefcntPointer<shawn::Tag >::SelfType const & reference is null");
    return 0;
  } 
  result = (bool)((shawn::RefcntPointer<shawn::Tag > const *)arg1)->operator >=((shawn::RefcntPointer<shawn::Tag >::SelfType const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_de_swarmnet_shawn_ShawnJNI_RefcntPointer_1Tag_1equals_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  shawn::RefcntPointer<shawn::Tag > *arg1 = (shawn::RefcntPointer<shawn::Tag > *) 0 ;
  shawn::RefcntPointer<shawn::Tag >::SelfType *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::RefcntPointer<shawn::Tag > **)&jarg1; 
  arg2 = *(shawn::RefcntPointer<shawn::Tag >::SelfType **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shawn::RefcntPointer<shawn::Tag >::SelfType const & reference is null");
    return 0;
  } 
  result = (bool)((shawn::RefcntPointer<shawn::Tag > const *)arg1)->operator ==((shawn::RefcntPointer<shawn::Tag >::SelfType const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_de_swarmnet_shawn_ShawnJNI_RefcntPointer_1Tag_1isDifferent_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  shawn::RefcntPointer<shawn::Tag > *arg1 = (shawn::RefcntPointer<shawn::Tag > *) 0 ;
  shawn::RefcntPointer<shawn::Tag >::SelfType *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::RefcntPointer<shawn::Tag > **)&jarg1; 
  arg2 = *(shawn::RefcntPointer<shawn::Tag >::SelfType **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shawn::RefcntPointer<shawn::Tag >::SelfType const & reference is null");
    return 0;
  } 
  result = (bool)((shawn::RefcntPointer<shawn::Tag > const *)arg1)->operator !=((shawn::RefcntPointer<shawn::Tag >::SelfType const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_de_swarmnet_shawn_ShawnJNI_RefcntPointer_1Tag_1lesserThan_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  shawn::RefcntPointer<shawn::Tag > *arg1 = (shawn::RefcntPointer<shawn::Tag > *) 0 ;
  shawn::Tag *arg2 = (shawn::Tag *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::RefcntPointer<shawn::Tag > **)&jarg1; 
  arg2 = *(shawn::Tag **)&jarg2; 
  result = (bool)((shawn::RefcntPointer<shawn::Tag > const *)arg1)->operator <((shawn::Tag const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_de_swarmnet_shawn_ShawnJNI_RefcntPointer_1Tag_1lesserEqual_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  shawn::RefcntPointer<shawn::Tag > *arg1 = (shawn::RefcntPointer<shawn::Tag > *) 0 ;
  shawn::Tag *arg2 = (shawn::Tag *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::RefcntPointer<shawn::Tag > **)&jarg1; 
  arg2 = *(shawn::Tag **)&jarg2; 
  result = (bool)((shawn::RefcntPointer<shawn::Tag > const *)arg1)->operator <=((shawn::Tag const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_de_swarmnet_shawn_ShawnJNI_RefcntPointer_1Tag_1greaterThan_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  shawn::RefcntPointer<shawn::Tag > *arg1 = (shawn::RefcntPointer<shawn::Tag > *) 0 ;
  shawn::Tag *arg2 = (shawn::Tag *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::RefcntPointer<shawn::Tag > **)&jarg1; 
  arg2 = *(shawn::Tag **)&jarg2; 
  result = (bool)((shawn::RefcntPointer<shawn::Tag > const *)arg1)->operator >((shawn::Tag const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_de_swarmnet_shawn_ShawnJNI_RefcntPointer_1Tag_1greaterEqual_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  shawn::RefcntPointer<shawn::Tag > *arg1 = (shawn::RefcntPointer<shawn::Tag > *) 0 ;
  shawn::Tag *arg2 = (shawn::Tag *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::RefcntPointer<shawn::Tag > **)&jarg1; 
  arg2 = *(shawn::Tag **)&jarg2; 
  result = (bool)((shawn::RefcntPointer<shawn::Tag > const *)arg1)->operator >=((shawn::Tag const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_de_swarmnet_shawn_ShawnJNI_RefcntPointer_1Tag_1equals_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  shawn::RefcntPointer<shawn::Tag > *arg1 = (shawn::RefcntPointer<shawn::Tag > *) 0 ;
  shawn::Tag *arg2 = (shawn::Tag *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::RefcntPointer<shawn::Tag > **)&jarg1; 
  arg2 = *(shawn::Tag **)&jarg2; 
  result = (bool)((shawn::RefcntPointer<shawn::Tag > const *)arg1)->operator ==((shawn::Tag const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_de_swarmnet_shawn_ShawnJNI_RefcntPointer_1Tag_1isDifferent_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  shawn::RefcntPointer<shawn::Tag > *arg1 = (shawn::RefcntPointer<shawn::Tag > *) 0 ;
  shawn::Tag *arg2 = (shawn::Tag *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::RefcntPointer<shawn::Tag > **)&jarg1; 
  arg2 = *(shawn::Tag **)&jarg2; 
  result = (bool)((shawn::RefcntPointer<shawn::Tag > const *)arg1)->operator !=((shawn::Tag const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_de_swarmnet_shawn_ShawnJNI_RefcntPointer_1Tag_1name(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  shawn::RefcntPointer<shawn::Tag > *arg1 = (shawn::RefcntPointer<shawn::Tag > *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::RefcntPointer<shawn::Tag > **)&jarg1; 
  {
    std::string const &_result_ref = (*arg1)->name();
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_de_swarmnet_shawn_ShawnJNI_RefcntPointer_1Tag_1is_1locked(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  shawn::RefcntPointer<shawn::Tag > *arg1 = (shawn::RefcntPointer<shawn::Tag > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::RefcntPointer<shawn::Tag > **)&jarg1; 
  result = (bool)(*arg1)->is_locked();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_RefcntPointer_1Tag_1lock(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  shawn::RefcntPointer<shawn::Tag > *arg1 = (shawn::RefcntPointer<shawn::Tag > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::RefcntPointer<shawn::Tag > **)&jarg1; 
  (*arg1)->lock();
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_RefcntPointer_1Tag_1unlock(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  shawn::RefcntPointer<shawn::Tag > *arg1 = (shawn::RefcntPointer<shawn::Tag > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::RefcntPointer<shawn::Tag > **)&jarg1; 
  (*arg1)->unlock();
}


JNIEXPORT jstring JNICALL Java_de_swarmnet_shawn_ShawnJNI_RefcntPointer_1Tag_1type_1identifier(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  shawn::RefcntPointer<shawn::Tag > *arg1 = (shawn::RefcntPointer<shawn::Tag > *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::RefcntPointer<shawn::Tag > **)&jarg1; 
  {
    std::string const &_result_ref = (*arg1)->type_identifier();
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_de_swarmnet_shawn_ShawnJNI_RefcntPointer_1Tag_1encoded_1content(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  shawn::RefcntPointer<shawn::Tag > *arg1 = (shawn::RefcntPointer<shawn::Tag > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::RefcntPointer<shawn::Tag > **)&jarg1; 
  try {
    result = (*arg1)->encoded_content();
  }
  catch(std::runtime_error &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ std::runtime_error exception thrown");
    return 0; 
  }
  
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_RefcntPointer_1Tag_1set_1persistency(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  shawn::RefcntPointer<shawn::Tag > *arg1 = (shawn::RefcntPointer<shawn::Tag > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::RefcntPointer<shawn::Tag > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->set_persistency(arg2);
}


JNIEXPORT jboolean JNICALL Java_de_swarmnet_shawn_ShawnJNI_RefcntPointer_1Tag_1is_1persistent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  shawn::RefcntPointer<shawn::Tag > *arg1 = (shawn::RefcntPointer<shawn::Tag > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::RefcntPointer<shawn::Tag > **)&jarg1; 
  result = (bool)(*arg1)->is_persistent();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_RefcntPointer_1Tag_1begin_1entries(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  shawn::RefcntPointer<shawn::Tag > *arg1 = (shawn::RefcntPointer<shawn::Tag > *) 0 ;
  const_entry_iterator result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::RefcntPointer<shawn::Tag > **)&jarg1; 
  result = (*arg1)->begin_entries();
  *(const_entry_iterator **)&jresult = new const_entry_iterator((const_entry_iterator &)result); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_RefcntPointer_1Tag_1end_1entries(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  shawn::RefcntPointer<shawn::Tag > *arg1 = (shawn::RefcntPointer<shawn::Tag > *) 0 ;
  const_entry_iterator result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::RefcntPointer<shawn::Tag > **)&jarg1; 
  result = (*arg1)->end_entries();
  *(const_entry_iterator **)&jresult = new const_entry_iterator((const_entry_iterator &)result); 
  return jresult;
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_RefcntPointer_1Tag_1add_1indexed_1entry(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3) {
  shawn::RefcntPointer<shawn::Tag > *arg1 = (shawn::RefcntPointer<shawn::Tag > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::RefcntPointer<shawn::Tag > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  try {
    (*arg1)->add_indexed_entry((std::string const &)*arg2,(std::string const &)*arg3);
  }
  catch(std::runtime_error &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ std::runtime_error exception thrown");
    return ; 
  }
  
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_RefcntPointer_1Tag_1add_1value_1entry(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  shawn::RefcntPointer<shawn::Tag > *arg1 = (shawn::RefcntPointer<shawn::Tag > *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::RefcntPointer<shawn::Tag > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    (*arg1)->add_value_entry((std::string const &)*arg2);
  }
  catch(std::runtime_error &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ std::runtime_error exception thrown");
    return ; 
  }
  
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_RefcntPointer_1Tag_1add_1tag(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  shawn::RefcntPointer<shawn::Tag > *arg1 = (shawn::RefcntPointer<shawn::Tag > *) 0 ;
  shawn::RefcntPointer<shawn::Tag > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::RefcntPointer<shawn::Tag > **)&jarg1; 
  arg2 = *(shawn::RefcntPointer<shawn::Tag > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shawn::RefcntPointer<shawn::Tag > const & reference is null");
    return ;
  } 
  (*arg1)->add_tag((shawn::RefcntPointer<shawn::Tag > const &)*arg2);
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_RefcntPointer_1Tag_1remove_1tag(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  shawn::RefcntPointer<shawn::Tag > *arg1 = (shawn::RefcntPointer<shawn::Tag > *) 0 ;
  shawn::RefcntPointer<shawn::Tag const > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::RefcntPointer<shawn::Tag > **)&jarg1; 
  arg2 = *(shawn::RefcntPointer<shawn::Tag const > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shawn::RefcntPointer<shawn::Tag const > const & reference is null");
    return ;
  } 
  (*arg1)->remove_tag((shawn::RefcntPointer<shawn::Tag const > const &)*arg2);
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_RefcntPointer_1Tag_1remove_1tag_1by_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  shawn::RefcntPointer<shawn::Tag > *arg1 = (shawn::RefcntPointer<shawn::Tag > *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::RefcntPointer<shawn::Tag > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (*arg1)->remove_tag_by_name((std::string const &)*arg2);
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_RefcntPointer_1Tag_1clear_1tags(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  shawn::RefcntPointer<shawn::Tag > *arg1 = (shawn::RefcntPointer<shawn::Tag > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::RefcntPointer<shawn::Tag > **)&jarg1; 
  (*arg1)->clear_tags();
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_RefcntPointer_1Tag_1find_1tag(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  shawn::RefcntPointer<shawn::Tag > *arg1 = (shawn::RefcntPointer<shawn::Tag > *) 0 ;
  std::string *arg2 = 0 ;
  shawn::RefcntPointer<shawn::Tag const > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::RefcntPointer<shawn::Tag > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (*arg1)->find_tag((std::string const &)*arg2);
  *(shawn::RefcntPointer<shawn::Tag const > **)&jresult = new shawn::RefcntPointer<shawn::Tag const >((shawn::RefcntPointer<shawn::Tag const > &)result); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_RefcntPointer_1Tag_1find_1tag_1w(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  shawn::RefcntPointer<shawn::Tag > *arg1 = (shawn::RefcntPointer<shawn::Tag > *) 0 ;
  std::string *arg2 = 0 ;
  shawn::RefcntPointer<shawn::Tag > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::RefcntPointer<shawn::Tag > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (*arg1)->find_tag_w((std::string const &)*arg2);
  *(shawn::RefcntPointer<shawn::Tag > **)&jresult = new shawn::RefcntPointer<shawn::Tag >((shawn::RefcntPointer<shawn::Tag > &)result); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_RefcntPointer_1Tag_1begin_1tags(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  shawn::RefcntPointer<shawn::Tag > *arg1 = (shawn::RefcntPointer<shawn::Tag > *) 0 ;
  shawn::TagContainer::tag_iterator result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::RefcntPointer<shawn::Tag > **)&jarg1; 
  result = (*arg1)->begin_tags();
  *(shawn::TagContainer::tag_iterator **)&jresult = new shawn::TagContainer::tag_iterator((shawn::TagContainer::tag_iterator &)result); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_RefcntPointer_1Tag_1end_1tags(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  shawn::RefcntPointer<shawn::Tag > *arg1 = (shawn::RefcntPointer<shawn::Tag > *) 0 ;
  shawn::TagContainer::tag_iterator result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::RefcntPointer<shawn::Tag > **)&jarg1; 
  result = (*arg1)->end_tags();
  *(shawn::TagContainer::tag_iterator **)&jresult = new shawn::TagContainer::tag_iterator((shawn::TagContainer::tag_iterator &)result); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_RefcntPointer_1Tag_1count_1tags(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  shawn::RefcntPointer<shawn::Tag > *arg1 = (shawn::RefcntPointer<shawn::Tag > *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::RefcntPointer<shawn::Tag > **)&jarg1; 
  result = (unsigned int)(*arg1)->count_tags();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_RefcntPointer_1Tag_1reference_1counter_1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  shawn::RefcntPointer<shawn::Tag > *arg1 = (shawn::RefcntPointer<shawn::Tag > *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::RefcntPointer<shawn::Tag > **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (*arg1)->reference_counter_ = arg2;
  
}


JNIEXPORT jint JNICALL Java_de_swarmnet_shawn_ShawnJNI_RefcntPointer_1Tag_1reference_1counter_1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  shawn::RefcntPointer<shawn::Tag > *arg1 = (shawn::RefcntPointer<shawn::Tag > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::RefcntPointer<shawn::Tag > **)&jarg1; 
  result = (int) ((*arg1)->reference_counter_);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_new_1RefcntPointer_1ConstTag_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  shawn::RefcntPointer<shawn::Tag const > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (shawn::RefcntPointer<shawn::Tag const > *)new shawn::RefcntPointer<shawn::Tag const >();
  *(shawn::RefcntPointer<shawn::Tag const > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_new_1RefcntPointer_1ConstTag_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  shawn::RefcntPointer<shawn::Tag const >::TargetType *arg1 = (shawn::RefcntPointer<shawn::Tag const >::TargetType *) 0 ;
  shawn::RefcntPointer<shawn::Tag const > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::RefcntPointer<shawn::Tag const >::TargetType **)&jarg1; 
  result = (shawn::RefcntPointer<shawn::Tag const > *)new shawn::RefcntPointer<shawn::Tag const >(arg1);
  *(shawn::RefcntPointer<shawn::Tag const > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_new_1RefcntPointer_1ConstTag_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  shawn::RefcntPointer<shawn::Tag const >::SelfType *arg1 = 0 ;
  shawn::RefcntPointer<shawn::Tag const > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::RefcntPointer<shawn::Tag const >::SelfType **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shawn::RefcntPointer<shawn::Tag const >::SelfType const & reference is null");
    return 0;
  } 
  result = (shawn::RefcntPointer<shawn::Tag const > *)new shawn::RefcntPointer<shawn::Tag const >((shawn::RefcntPointer<shawn::Tag const >::SelfType const &)*arg1);
  *(shawn::RefcntPointer<shawn::Tag const > **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_delete_1RefcntPointer_1ConstTag(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  shawn::RefcntPointer<shawn::Tag const > *arg1 = (shawn::RefcntPointer<shawn::Tag const > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::RefcntPointer<shawn::Tag const > **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jboolean JNICALL Java_de_swarmnet_shawn_ShawnJNI_RefcntPointer_1ConstTag_1is_1null(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  shawn::RefcntPointer<shawn::Tag const > *arg1 = (shawn::RefcntPointer<shawn::Tag const > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::RefcntPointer<shawn::Tag const > **)&jarg1; 
  result = (bool)((shawn::RefcntPointer<shawn::Tag const > const *)arg1)->is_null();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_de_swarmnet_shawn_ShawnJNI_RefcntPointer_1ConstTag_1is_1not_1null(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  shawn::RefcntPointer<shawn::Tag const > *arg1 = (shawn::RefcntPointer<shawn::Tag const > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::RefcntPointer<shawn::Tag const > **)&jarg1; 
  result = (bool)((shawn::RefcntPointer<shawn::Tag const > const *)arg1)->is_not_null();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_RefcntPointer_1ConstTag_1_1_1ref_1_1(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  shawn::RefcntPointer<shawn::Tag const > *arg1 = (shawn::RefcntPointer<shawn::Tag const > *) 0 ;
  shawn::Tag *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::RefcntPointer<shawn::Tag const > **)&jarg1; 
  {
    shawn::Tag const &_result_ref = ((shawn::RefcntPointer<shawn::Tag const > const *)arg1)->operator *();
    result = (shawn::Tag *) &_result_ref;
  }
  *(shawn::Tag **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_RefcntPointer_1ConstTag_1_1_1deref_1_1(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  shawn::RefcntPointer<shawn::Tag const > *arg1 = (shawn::RefcntPointer<shawn::Tag const > *) 0 ;
  shawn::Tag *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::RefcntPointer<shawn::Tag const > **)&jarg1; 
  result = (shawn::Tag *)((shawn::RefcntPointer<shawn::Tag const > const *)arg1)->operator ->();
  *(shawn::Tag **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_RefcntPointer_1ConstTag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  shawn::RefcntPointer<shawn::Tag const > *arg1 = (shawn::RefcntPointer<shawn::Tag const > *) 0 ;
  shawn::Tag *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::RefcntPointer<shawn::Tag const > **)&jarg1; 
  result = (shawn::Tag *)((shawn::RefcntPointer<shawn::Tag const > const *)arg1)->get();
  *(shawn::Tag **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_RefcntPointer_1ConstTag_1assign_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  shawn::RefcntPointer<shawn::Tag const > *arg1 = (shawn::RefcntPointer<shawn::Tag const > *) 0 ;
  shawn::RefcntPointer<shawn::Tag const >::SelfType *arg2 = 0 ;
  shawn::RefcntPointer<shawn::Tag const >::SelfType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::RefcntPointer<shawn::Tag const > **)&jarg1; 
  arg2 = *(shawn::RefcntPointer<shawn::Tag const >::SelfType **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shawn::RefcntPointer<shawn::Tag const >::SelfType const & reference is null");
    return 0;
  } 
  {
    shawn::RefcntPointer<shawn::Tag const >::SelfType &_result_ref = (arg1)->operator =((shawn::RefcntPointer<shawn::Tag const >::SelfType const &)*arg2);
    result = (shawn::RefcntPointer<shawn::Tag const >::SelfType *) &_result_ref;
  }
  *(shawn::RefcntPointer<shawn::Tag const >::SelfType **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_RefcntPointer_1ConstTag_1assign_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  shawn::RefcntPointer<shawn::Tag const > *arg1 = (shawn::RefcntPointer<shawn::Tag const > *) 0 ;
  shawn::RefcntPointer<shawn::Tag const >::TargetType *arg2 = (shawn::RefcntPointer<shawn::Tag const >::TargetType *) 0 ;
  shawn::RefcntPointer<shawn::Tag const >::SelfType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::RefcntPointer<shawn::Tag const > **)&jarg1; 
  arg2 = *(shawn::RefcntPointer<shawn::Tag const >::TargetType **)&jarg2; 
  {
    shawn::RefcntPointer<shawn::Tag const >::SelfType &_result_ref = (arg1)->operator =(arg2);
    result = (shawn::RefcntPointer<shawn::Tag const >::SelfType *) &_result_ref;
  }
  *(shawn::RefcntPointer<shawn::Tag const >::SelfType **)&jresult = result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_de_swarmnet_shawn_ShawnJNI_RefcntPointer_1ConstTag_1lesserThan_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  shawn::RefcntPointer<shawn::Tag const > *arg1 = (shawn::RefcntPointer<shawn::Tag const > *) 0 ;
  shawn::RefcntPointer<shawn::Tag const >::SelfType *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::RefcntPointer<shawn::Tag const > **)&jarg1; 
  arg2 = *(shawn::RefcntPointer<shawn::Tag const >::SelfType **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shawn::RefcntPointer<shawn::Tag const >::SelfType const & reference is null");
    return 0;
  } 
  result = (bool)((shawn::RefcntPointer<shawn::Tag const > const *)arg1)->operator <((shawn::RefcntPointer<shawn::Tag const >::SelfType const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_de_swarmnet_shawn_ShawnJNI_RefcntPointer_1ConstTag_1lesserEqual_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  shawn::RefcntPointer<shawn::Tag const > *arg1 = (shawn::RefcntPointer<shawn::Tag const > *) 0 ;
  shawn::RefcntPointer<shawn::Tag const >::SelfType *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::RefcntPointer<shawn::Tag const > **)&jarg1; 
  arg2 = *(shawn::RefcntPointer<shawn::Tag const >::SelfType **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shawn::RefcntPointer<shawn::Tag const >::SelfType const & reference is null");
    return 0;
  } 
  result = (bool)((shawn::RefcntPointer<shawn::Tag const > const *)arg1)->operator <=((shawn::RefcntPointer<shawn::Tag const >::SelfType const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_de_swarmnet_shawn_ShawnJNI_RefcntPointer_1ConstTag_1greaterThan_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  shawn::RefcntPointer<shawn::Tag const > *arg1 = (shawn::RefcntPointer<shawn::Tag const > *) 0 ;
  shawn::RefcntPointer<shawn::Tag const >::SelfType *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::RefcntPointer<shawn::Tag const > **)&jarg1; 
  arg2 = *(shawn::RefcntPointer<shawn::Tag const >::SelfType **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shawn::RefcntPointer<shawn::Tag const >::SelfType const & reference is null");
    return 0;
  } 
  result = (bool)((shawn::RefcntPointer<shawn::Tag const > const *)arg1)->operator >((shawn::RefcntPointer<shawn::Tag const >::SelfType const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_de_swarmnet_shawn_ShawnJNI_RefcntPointer_1ConstTag_1greaterEqual_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  shawn::RefcntPointer<shawn::Tag const > *arg1 = (shawn::RefcntPointer<shawn::Tag const > *) 0 ;
  shawn::RefcntPointer<shawn::Tag const >::SelfType *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::RefcntPointer<shawn::Tag const > **)&jarg1; 
  arg2 = *(shawn::RefcntPointer<shawn::Tag const >::SelfType **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shawn::RefcntPointer<shawn::Tag const >::SelfType const & reference is null");
    return 0;
  } 
  result = (bool)((shawn::RefcntPointer<shawn::Tag const > const *)arg1)->operator >=((shawn::RefcntPointer<shawn::Tag const >::SelfType const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_de_swarmnet_shawn_ShawnJNI_RefcntPointer_1ConstTag_1equals_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  shawn::RefcntPointer<shawn::Tag const > *arg1 = (shawn::RefcntPointer<shawn::Tag const > *) 0 ;
  shawn::RefcntPointer<shawn::Tag const >::SelfType *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::RefcntPointer<shawn::Tag const > **)&jarg1; 
  arg2 = *(shawn::RefcntPointer<shawn::Tag const >::SelfType **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shawn::RefcntPointer<shawn::Tag const >::SelfType const & reference is null");
    return 0;
  } 
  result = (bool)((shawn::RefcntPointer<shawn::Tag const > const *)arg1)->operator ==((shawn::RefcntPointer<shawn::Tag const >::SelfType const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_de_swarmnet_shawn_ShawnJNI_RefcntPointer_1ConstTag_1isDifferent_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  shawn::RefcntPointer<shawn::Tag const > *arg1 = (shawn::RefcntPointer<shawn::Tag const > *) 0 ;
  shawn::RefcntPointer<shawn::Tag const >::SelfType *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::RefcntPointer<shawn::Tag const > **)&jarg1; 
  arg2 = *(shawn::RefcntPointer<shawn::Tag const >::SelfType **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shawn::RefcntPointer<shawn::Tag const >::SelfType const & reference is null");
    return 0;
  } 
  result = (bool)((shawn::RefcntPointer<shawn::Tag const > const *)arg1)->operator !=((shawn::RefcntPointer<shawn::Tag const >::SelfType const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_de_swarmnet_shawn_ShawnJNI_RefcntPointer_1ConstTag_1lesserThan_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  shawn::RefcntPointer<shawn::Tag const > *arg1 = (shawn::RefcntPointer<shawn::Tag const > *) 0 ;
  shawn::Tag *arg2 = (shawn::Tag *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::RefcntPointer<shawn::Tag const > **)&jarg1; 
  arg2 = *(shawn::Tag **)&jarg2; 
  result = (bool)((shawn::RefcntPointer<shawn::Tag const > const *)arg1)->operator <((shawn::Tag const const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_de_swarmnet_shawn_ShawnJNI_RefcntPointer_1ConstTag_1lesserEqual_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  shawn::RefcntPointer<shawn::Tag const > *arg1 = (shawn::RefcntPointer<shawn::Tag const > *) 0 ;
  shawn::Tag *arg2 = (shawn::Tag *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::RefcntPointer<shawn::Tag const > **)&jarg1; 
  arg2 = *(shawn::Tag **)&jarg2; 
  result = (bool)((shawn::RefcntPointer<shawn::Tag const > const *)arg1)->operator <=((shawn::Tag const const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_de_swarmnet_shawn_ShawnJNI_RefcntPointer_1ConstTag_1greaterThan_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  shawn::RefcntPointer<shawn::Tag const > *arg1 = (shawn::RefcntPointer<shawn::Tag const > *) 0 ;
  shawn::Tag *arg2 = (shawn::Tag *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::RefcntPointer<shawn::Tag const > **)&jarg1; 
  arg2 = *(shawn::Tag **)&jarg2; 
  result = (bool)((shawn::RefcntPointer<shawn::Tag const > const *)arg1)->operator >((shawn::Tag const const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_de_swarmnet_shawn_ShawnJNI_RefcntPointer_1ConstTag_1greaterEqual_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  shawn::RefcntPointer<shawn::Tag const > *arg1 = (shawn::RefcntPointer<shawn::Tag const > *) 0 ;
  shawn::Tag *arg2 = (shawn::Tag *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::RefcntPointer<shawn::Tag const > **)&jarg1; 
  arg2 = *(shawn::Tag **)&jarg2; 
  result = (bool)((shawn::RefcntPointer<shawn::Tag const > const *)arg1)->operator >=((shawn::Tag const const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_de_swarmnet_shawn_ShawnJNI_RefcntPointer_1ConstTag_1equals_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  shawn::RefcntPointer<shawn::Tag const > *arg1 = (shawn::RefcntPointer<shawn::Tag const > *) 0 ;
  shawn::Tag *arg2 = (shawn::Tag *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::RefcntPointer<shawn::Tag const > **)&jarg1; 
  arg2 = *(shawn::Tag **)&jarg2; 
  result = (bool)((shawn::RefcntPointer<shawn::Tag const > const *)arg1)->operator ==((shawn::Tag const const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_de_swarmnet_shawn_ShawnJNI_RefcntPointer_1ConstTag_1isDifferent_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  shawn::RefcntPointer<shawn::Tag const > *arg1 = (shawn::RefcntPointer<shawn::Tag const > *) 0 ;
  shawn::Tag *arg2 = (shawn::Tag *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::RefcntPointer<shawn::Tag const > **)&jarg1; 
  arg2 = *(shawn::Tag **)&jarg2; 
  result = (bool)((shawn::RefcntPointer<shawn::Tag const > const *)arg1)->operator !=((shawn::Tag const const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_de_swarmnet_shawn_ShawnJNI_RefcntPointer_1ConstTag_1name(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  shawn::RefcntPointer<shawn::Tag const > *arg1 = (shawn::RefcntPointer<shawn::Tag const > *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::RefcntPointer<shawn::Tag const > **)&jarg1; 
  {
    std::string const &_result_ref = (*arg1)->name();
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_de_swarmnet_shawn_ShawnJNI_RefcntPointer_1ConstTag_1is_1locked(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  shawn::RefcntPointer<shawn::Tag const > *arg1 = (shawn::RefcntPointer<shawn::Tag const > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::RefcntPointer<shawn::Tag const > **)&jarg1; 
  result = (bool)(*arg1)->is_locked();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_de_swarmnet_shawn_ShawnJNI_RefcntPointer_1ConstTag_1type_1identifier(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  shawn::RefcntPointer<shawn::Tag const > *arg1 = (shawn::RefcntPointer<shawn::Tag const > *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::RefcntPointer<shawn::Tag const > **)&jarg1; 
  {
    std::string const &_result_ref = (*arg1)->type_identifier();
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_de_swarmnet_shawn_ShawnJNI_RefcntPointer_1ConstTag_1encoded_1content(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  shawn::RefcntPointer<shawn::Tag const > *arg1 = (shawn::RefcntPointer<shawn::Tag const > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::RefcntPointer<shawn::Tag const > **)&jarg1; 
  try {
    result = (*arg1)->encoded_content();
  }
  catch(std::runtime_error &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ std::runtime_error exception thrown");
    return 0; 
  }
  
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_de_swarmnet_shawn_ShawnJNI_RefcntPointer_1ConstTag_1is_1persistent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  shawn::RefcntPointer<shawn::Tag const > *arg1 = (shawn::RefcntPointer<shawn::Tag const > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::RefcntPointer<shawn::Tag const > **)&jarg1; 
  result = (bool)(*arg1)->is_persistent();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_RefcntPointer_1ConstTag_1begin_1entries(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  shawn::RefcntPointer<shawn::Tag const > *arg1 = (shawn::RefcntPointer<shawn::Tag const > *) 0 ;
  const_entry_iterator result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::RefcntPointer<shawn::Tag const > **)&jarg1; 
  result = (*arg1)->begin_entries();
  *(const_entry_iterator **)&jresult = new const_entry_iterator((const_entry_iterator &)result); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_RefcntPointer_1ConstTag_1end_1entries(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  shawn::RefcntPointer<shawn::Tag const > *arg1 = (shawn::RefcntPointer<shawn::Tag const > *) 0 ;
  const_entry_iterator result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::RefcntPointer<shawn::Tag const > **)&jarg1; 
  result = (*arg1)->end_entries();
  *(const_entry_iterator **)&jresult = new const_entry_iterator((const_entry_iterator &)result); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_RefcntPointer_1ConstTag_1find_1tag(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  shawn::RefcntPointer<shawn::Tag const > *arg1 = (shawn::RefcntPointer<shawn::Tag const > *) 0 ;
  std::string *arg2 = 0 ;
  shawn::RefcntPointer<shawn::Tag const > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::RefcntPointer<shawn::Tag const > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (*arg1)->find_tag((std::string const &)*arg2);
  *(shawn::RefcntPointer<shawn::Tag const > **)&jresult = new shawn::RefcntPointer<shawn::Tag const >((shawn::RefcntPointer<shawn::Tag const > &)result); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_RefcntPointer_1ConstTag_1begin_1tags(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  shawn::RefcntPointer<shawn::Tag const > *arg1 = (shawn::RefcntPointer<shawn::Tag const > *) 0 ;
  shawn::TagContainer::tag_iterator result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::RefcntPointer<shawn::Tag const > **)&jarg1; 
  result = (*arg1)->begin_tags();
  *(shawn::TagContainer::tag_iterator **)&jresult = new shawn::TagContainer::tag_iterator((shawn::TagContainer::tag_iterator &)result); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_RefcntPointer_1ConstTag_1end_1tags(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  shawn::RefcntPointer<shawn::Tag const > *arg1 = (shawn::RefcntPointer<shawn::Tag const > *) 0 ;
  shawn::TagContainer::tag_iterator result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::RefcntPointer<shawn::Tag const > **)&jarg1; 
  result = (*arg1)->end_tags();
  *(shawn::TagContainer::tag_iterator **)&jresult = new shawn::TagContainer::tag_iterator((shawn::TagContainer::tag_iterator &)result); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_RefcntPointer_1ConstTag_1count_1tags(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  shawn::RefcntPointer<shawn::Tag const > *arg1 = (shawn::RefcntPointer<shawn::Tag const > *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::RefcntPointer<shawn::Tag const > **)&jarg1; 
  result = (unsigned int)(*arg1)->count_tags();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_de_swarmnet_shawn_ShawnJNI_RefcntPointer_1ConstTag_1reference_1counter_1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  shawn::RefcntPointer<shawn::Tag const > *arg1 = (shawn::RefcntPointer<shawn::Tag const > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::RefcntPointer<shawn::Tag const > **)&jarg1; 
  result = (int) ((*arg1)->reference_counter_);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_new_1TagContainer(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  shawn::TagContainer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (shawn::TagContainer *)new shawn::TagContainer();
  *(shawn::TagContainer **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_delete_1TagContainer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  shawn::TagContainer *arg1 = (shawn::TagContainer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::TagContainer **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_TagContainer_1add_1tag(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  shawn::TagContainer *arg1 = (shawn::TagContainer *) 0 ;
  shawn::RefcntPointer<shawn::Tag > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::TagContainer **)&jarg1; 
  arg2 = *(shawn::RefcntPointer<shawn::Tag > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shawn::RefcntPointer<shawn::Tag > const & reference is null");
    return ;
  } 
  (arg1)->add_tag((shawn::RefcntPointer<shawn::Tag > const &)*arg2);
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_TagContainer_1remove_1tag(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  shawn::TagContainer *arg1 = (shawn::TagContainer *) 0 ;
  shawn::RefcntPointer<shawn::Tag const > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::TagContainer **)&jarg1; 
  arg2 = *(shawn::RefcntPointer<shawn::Tag const > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shawn::RefcntPointer<shawn::Tag const > const & reference is null");
    return ;
  } 
  (arg1)->remove_tag((shawn::RefcntPointer<shawn::Tag const > const &)*arg2);
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_TagContainer_1remove_1tag_1by_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  shawn::TagContainer *arg1 = (shawn::TagContainer *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::TagContainer **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->remove_tag_by_name((std::string const &)*arg2);
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_TagContainer_1clear_1tags(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  shawn::TagContainer *arg1 = (shawn::TagContainer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::TagContainer **)&jarg1; 
  (arg1)->clear_tags();
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_TagContainer_1find_1tag(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  shawn::TagContainer *arg1 = (shawn::TagContainer *) 0 ;
  std::string *arg2 = 0 ;
  shawn::RefcntPointer<shawn::Tag const > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::TagContainer **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = ((shawn::TagContainer const *)arg1)->find_tag((std::string const &)*arg2);
  *(shawn::RefcntPointer<shawn::Tag const > **)&jresult = new shawn::RefcntPointer<shawn::Tag const >((shawn::RefcntPointer<shawn::Tag const > &)result); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_TagContainer_1find_1tag_1w(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  shawn::TagContainer *arg1 = (shawn::TagContainer *) 0 ;
  std::string *arg2 = 0 ;
  shawn::RefcntPointer<shawn::Tag > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::TagContainer **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (arg1)->find_tag_w((std::string const &)*arg2);
  *(shawn::RefcntPointer<shawn::Tag > **)&jresult = new shawn::RefcntPointer<shawn::Tag >((shawn::RefcntPointer<shawn::Tag > &)result); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_TagContainer_1begin_1tags(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  shawn::TagContainer *arg1 = (shawn::TagContainer *) 0 ;
  shawn::TagContainer::tag_iterator result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::TagContainer **)&jarg1; 
  result = ((shawn::TagContainer const *)arg1)->begin_tags();
  *(shawn::TagContainer::tag_iterator **)&jresult = new shawn::TagContainer::tag_iterator((shawn::TagContainer::tag_iterator &)result); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_TagContainer_1end_1tags(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  shawn::TagContainer *arg1 = (shawn::TagContainer *) 0 ;
  shawn::TagContainer::tag_iterator result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::TagContainer **)&jarg1; 
  result = ((shawn::TagContainer const *)arg1)->end_tags();
  *(shawn::TagContainer::tag_iterator **)&jresult = new shawn::TagContainer::tag_iterator((shawn::TagContainer::tag_iterator &)result); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_TagContainer_1count_1tags(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  shawn::TagContainer *arg1 = (shawn::TagContainer *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::TagContainer **)&jarg1; 
  result = (unsigned int)((shawn::TagContainer const *)arg1)->count_tags();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_delete_1IteratorData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  IteratorData *arg1 = (IteratorData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(IteratorData **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_IteratorData_1next(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  IteratorData *arg1 = (IteratorData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(IteratorData **)&jarg1; 
  (arg1)->next();
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_IteratorData_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  IteratorData *arg1 = (IteratorData *) 0 ;
  IteratorData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(IteratorData **)&jarg1; 
  result = (IteratorData *)((IteratorData const *)arg1)->clone();
  *(IteratorData **)&jresult = result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_de_swarmnet_shawn_ShawnJNI_IteratorData_1has_1index(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  IteratorData *arg1 = (IteratorData *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(IteratorData **)&jarg1; 
  result = (bool)((IteratorData const *)arg1)->has_index();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_de_swarmnet_shawn_ShawnJNI_IteratorData_1index(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  IteratorData *arg1 = (IteratorData *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(IteratorData **)&jarg1; 
  result = ((IteratorData const *)arg1)->index();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_de_swarmnet_shawn_ShawnJNI_IteratorData_1value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  IteratorData *arg1 = (IteratorData *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(IteratorData **)&jarg1; 
  result = ((IteratorData const *)arg1)->value();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_de_swarmnet_shawn_ShawnJNI_IteratorData_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  IteratorData *arg1 = (IteratorData *) 0 ;
  IteratorData *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(IteratorData **)&jarg1; 
  arg2 = *(IteratorData **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "IteratorData const & reference is null");
    return 0;
  } 
  result = (bool)((IteratorData const *)arg1)->operator ==((IteratorData const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_new_1const_1entry_1iterator_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  const_entry_iterator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (const_entry_iterator *)new const_entry_iterator();
  *(const_entry_iterator **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_new_1const_1entry_1iterator_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  const_entry_iterator *arg1 = 0 ;
  const_entry_iterator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(const_entry_iterator **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "const_entry_iterator const & reference is null");
    return 0;
  } 
  result = (const_entry_iterator *)new const_entry_iterator((const_entry_iterator const &)*arg1);
  *(const_entry_iterator **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_new_1const_1entry_1iterator_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  IteratorData *arg1 = (IteratorData *) 0 ;
  const_entry_iterator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(IteratorData **)&jarg1; 
  result = (const_entry_iterator *)new const_entry_iterator(arg1);
  *(const_entry_iterator **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_delete_1const_1entry_1iterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  const_entry_iterator *arg1 = (const_entry_iterator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(const_entry_iterator **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jstring JNICALL Java_de_swarmnet_shawn_ShawnJNI_const_1entry_1iterator_1_1_1ref_1_1(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  const_entry_iterator *arg1 = (const_entry_iterator *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(const_entry_iterator **)&jarg1; 
  result = ((const_entry_iterator const *)arg1)->operator *();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_const_1entry_1iterator_1increment(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  const_entry_iterator *arg1 = (const_entry_iterator *) 0 ;
  const_entry_iterator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(const_entry_iterator **)&jarg1; 
  {
    const_entry_iterator &_result_ref = (arg1)->operator ++();
    result = (const_entry_iterator *) &_result_ref;
  }
  *(const_entry_iterator **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_const_1entry_1iterator_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  const_entry_iterator *arg1 = (const_entry_iterator *) 0 ;
  const_entry_iterator *arg2 = 0 ;
  const_entry_iterator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(const_entry_iterator **)&jarg1; 
  arg2 = *(const_entry_iterator **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "const_entry_iterator const & reference is null");
    return 0;
  } 
  {
    const_entry_iterator &_result_ref = (arg1)->operator =((const_entry_iterator const &)*arg2);
    result = (const_entry_iterator *) &_result_ref;
  }
  *(const_entry_iterator **)&jresult = result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_de_swarmnet_shawn_ShawnJNI_const_1entry_1iterator_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  const_entry_iterator *arg1 = (const_entry_iterator *) 0 ;
  const_entry_iterator *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(const_entry_iterator **)&jarg1; 
  arg2 = *(const_entry_iterator **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "const_entry_iterator const & reference is null");
    return 0;
  } 
  result = (bool)((const_entry_iterator const *)arg1)->operator ==((const_entry_iterator const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_de_swarmnet_shawn_ShawnJNI_const_1entry_1iterator_1isDifferent(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  const_entry_iterator *arg1 = (const_entry_iterator *) 0 ;
  const_entry_iterator *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(const_entry_iterator **)&jarg1; 
  arg2 = *(const_entry_iterator **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "const_entry_iterator const & reference is null");
    return 0;
  } 
  result = (bool)((const_entry_iterator const *)arg1)->operator !=((const_entry_iterator const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_de_swarmnet_shawn_ShawnJNI_const_1entry_1iterator_1has_1index(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  const_entry_iterator *arg1 = (const_entry_iterator *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(const_entry_iterator **)&jarg1; 
  result = (bool)((const_entry_iterator const *)arg1)->has_index();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_de_swarmnet_shawn_ShawnJNI_const_1entry_1iterator_1index(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  const_entry_iterator *arg1 = (const_entry_iterator *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(const_entry_iterator **)&jarg1; 
  result = ((const_entry_iterator const *)arg1)->index();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_de_swarmnet_shawn_ShawnJNI_const_1entry_1iterator_1value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  const_entry_iterator *arg1 = (const_entry_iterator *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(const_entry_iterator **)&jarg1; 
  result = ((const_entry_iterator const *)arg1)->value();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_delete_1Tag(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  shawn::Tag *arg1 = (shawn::Tag *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::Tag **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jstring JNICALL Java_de_swarmnet_shawn_ShawnJNI_Tag_1name(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  shawn::Tag *arg1 = (shawn::Tag *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::Tag **)&jarg1; 
  {
    std::string const &_result_ref = ((shawn::Tag const *)arg1)->name();
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_de_swarmnet_shawn_ShawnJNI_Tag_1is_1locked(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  shawn::Tag *arg1 = (shawn::Tag *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::Tag **)&jarg1; 
  result = (bool)((shawn::Tag const *)arg1)->is_locked();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_Tag_1lock(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  shawn::Tag *arg1 = (shawn::Tag *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::Tag **)&jarg1; 
  (arg1)->lock();
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_Tag_1unlock(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  shawn::Tag *arg1 = (shawn::Tag *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::Tag **)&jarg1; 
  (arg1)->unlock();
}


JNIEXPORT jstring JNICALL Java_de_swarmnet_shawn_ShawnJNI_Tag_1type_1identifier(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  shawn::Tag *arg1 = (shawn::Tag *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::Tag **)&jarg1; 
  {
    std::string const &_result_ref = ((shawn::Tag const *)arg1)->type_identifier();
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_de_swarmnet_shawn_ShawnJNI_Tag_1encoded_1content(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  shawn::Tag *arg1 = (shawn::Tag *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::Tag **)&jarg1; 
  try {
    result = ((shawn::Tag const *)arg1)->encoded_content();
  }
  catch(std::runtime_error &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ std::runtime_error exception thrown");
    return 0; 
  }
  
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_Tag_1set_1persistency(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  shawn::Tag *arg1 = (shawn::Tag *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::Tag **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->set_persistency(arg2);
}


JNIEXPORT jboolean JNICALL Java_de_swarmnet_shawn_ShawnJNI_Tag_1is_1persistent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  shawn::Tag *arg1 = (shawn::Tag *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::Tag **)&jarg1; 
  result = (bool)((shawn::Tag const *)arg1)->is_persistent();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_Tag_1begin_1entries(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  shawn::Tag *arg1 = (shawn::Tag *) 0 ;
  const_entry_iterator result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::Tag **)&jarg1; 
  result = ((shawn::Tag const *)arg1)->begin_entries();
  *(const_entry_iterator **)&jresult = new const_entry_iterator((const_entry_iterator &)result); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_Tag_1end_1entries(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  shawn::Tag *arg1 = (shawn::Tag *) 0 ;
  const_entry_iterator result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::Tag **)&jarg1; 
  result = ((shawn::Tag const *)arg1)->end_entries();
  *(const_entry_iterator **)&jresult = new const_entry_iterator((const_entry_iterator &)result); 
  return jresult;
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_Tag_1add_1indexed_1entry(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3) {
  shawn::Tag *arg1 = (shawn::Tag *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::Tag **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  try {
    (arg1)->add_indexed_entry((std::string const &)*arg2,(std::string const &)*arg3);
  }
  catch(std::runtime_error &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ std::runtime_error exception thrown");
    return ; 
  }
  
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_Tag_1add_1value_1entry(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  shawn::Tag *arg1 = (shawn::Tag *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::Tag **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    (arg1)->add_value_entry((std::string const &)*arg2);
  }
  catch(std::runtime_error &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ std::runtime_error exception thrown");
    return ; 
  }
  
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_delete_1TagSyncable(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  shawn::TagSyncable *arg1 = (shawn::TagSyncable *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::TagSyncable **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_TagSyncable_1sync_1to_1tags(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  shawn::TagSyncable *arg1 = (shawn::TagSyncable *) 0 ;
  shawn::TagContainer *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::TagSyncable **)&jarg1; 
  arg2 = *(shawn::TagContainer **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shawn::TagContainer & reference is null");
    return ;
  } 
  (arg1)->sync_to_tags(*arg2);
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_TagSyncable_1sync_1from_1tags(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  shawn::TagSyncable *arg1 = (shawn::TagSyncable *) 0 ;
  shawn::TagContainer *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::TagSyncable **)&jarg1; 
  arg2 = *(shawn::TagContainer **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shawn::TagContainer const & reference is null");
    return ;
  } 
  try {
    (arg1)->sync_from_tags((shawn::TagContainer const &)*arg2);
  }
  catch(std::runtime_error &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ std::runtime_error exception thrown");
    return ; 
  }
  
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_new_1Vec_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  shawn::Vec *arg1 = 0 ;
  shawn::Vec *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::Vec **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shawn::Vec const & reference is null");
    return 0;
  } 
  result = (shawn::Vec *)new shawn::Vec((shawn::Vec const &)*arg1);
  *(shawn::Vec **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_new_1Vec_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2, jdouble jarg3) {
  jlong jresult = 0 ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  shawn::Vec *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (shawn::Vec *)new shawn::Vec(arg1,arg2,arg3);
  *(shawn::Vec **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_new_1Vec_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2) {
  jlong jresult = 0 ;
  double arg1 ;
  double arg2 ;
  shawn::Vec *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  result = (shawn::Vec *)new shawn::Vec(arg1,arg2);
  *(shawn::Vec **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_new_1Vec_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jlong jresult = 0 ;
  double arg1 ;
  shawn::Vec *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  result = (shawn::Vec *)new shawn::Vec(arg1);
  *(shawn::Vec **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_new_1Vec_1_1SWIG_14(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  shawn::Vec *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (shawn::Vec *)new shawn::Vec();
  *(shawn::Vec **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_delete_1Vec(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  shawn::Vec *arg1 = (shawn::Vec *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::Vec **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jdouble JNICALL Java_de_swarmnet_shawn_ShawnJNI_Vec_1x(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  shawn::Vec *arg1 = (shawn::Vec *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::Vec **)&jarg1; 
  result = (double)((shawn::Vec const *)arg1)->x();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_de_swarmnet_shawn_ShawnJNI_Vec_1y(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  shawn::Vec *arg1 = (shawn::Vec *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::Vec **)&jarg1; 
  result = (double)((shawn::Vec const *)arg1)->y();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_de_swarmnet_shawn_ShawnJNI_Vec_1z(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  shawn::Vec *arg1 = (shawn::Vec *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::Vec **)&jarg1; 
  result = (double)((shawn::Vec const *)arg1)->z();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_Vec_1subtract(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  shawn::Vec *arg1 = (shawn::Vec *) 0 ;
  shawn::Vec *arg2 = 0 ;
  shawn::Vec result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::Vec **)&jarg1; 
  arg2 = *(shawn::Vec **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shawn::Vec const & reference is null");
    return 0;
  } 
  result = ((shawn::Vec const *)arg1)->operator -((shawn::Vec const &)*arg2);
  *(shawn::Vec **)&jresult = new shawn::Vec((shawn::Vec &)result); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_Vec_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  shawn::Vec *arg1 = (shawn::Vec *) 0 ;
  shawn::Vec *arg2 = 0 ;
  shawn::Vec result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::Vec **)&jarg1; 
  arg2 = *(shawn::Vec **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shawn::Vec const & reference is null");
    return 0;
  } 
  result = ((shawn::Vec const *)arg1)->operator +((shawn::Vec const &)*arg2);
  *(shawn::Vec **)&jresult = new shawn::Vec((shawn::Vec &)result); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_Vec_1subtractAssign(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  shawn::Vec *arg1 = (shawn::Vec *) 0 ;
  shawn::Vec *arg2 = 0 ;
  shawn::Vec *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::Vec **)&jarg1; 
  arg2 = *(shawn::Vec **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shawn::Vec const & reference is null");
    return 0;
  } 
  {
    shawn::Vec &_result_ref = (arg1)->operator -=((shawn::Vec const &)*arg2);
    result = (shawn::Vec *) &_result_ref;
  }
  *(shawn::Vec **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_Vec_1addAssign(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  shawn::Vec *arg1 = (shawn::Vec *) 0 ;
  shawn::Vec *arg2 = 0 ;
  shawn::Vec *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::Vec **)&jarg1; 
  arg2 = *(shawn::Vec **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shawn::Vec const & reference is null");
    return 0;
  } 
  {
    shawn::Vec &_result_ref = (arg1)->operator +=((shawn::Vec const &)*arg2);
    result = (shawn::Vec *) &_result_ref;
  }
  *(shawn::Vec **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_Vec_1mult_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  jlong jresult = 0 ;
  shawn::Vec *arg1 = (shawn::Vec *) 0 ;
  double arg2 ;
  shawn::Vec result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::Vec **)&jarg1; 
  arg2 = (double)jarg2; 
  result = ((shawn::Vec const *)arg1)->operator *(arg2);
  *(shawn::Vec **)&jresult = new shawn::Vec((shawn::Vec &)result); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_Vec_1div(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  jlong jresult = 0 ;
  shawn::Vec *arg1 = (shawn::Vec *) 0 ;
  double arg2 ;
  shawn::Vec result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::Vec **)&jarg1; 
  arg2 = (double)jarg2; 
  result = ((shawn::Vec const *)arg1)->operator /(arg2);
  *(shawn::Vec **)&jresult = new shawn::Vec((shawn::Vec &)result); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_Vec_1multAssign(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  jlong jresult = 0 ;
  shawn::Vec *arg1 = (shawn::Vec *) 0 ;
  double arg2 ;
  shawn::Vec *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::Vec **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    shawn::Vec &_result_ref = (arg1)->operator *=(arg2);
    result = (shawn::Vec *) &_result_ref;
  }
  *(shawn::Vec **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_Vec_1divAssign(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  jlong jresult = 0 ;
  shawn::Vec *arg1 = (shawn::Vec *) 0 ;
  double arg2 ;
  shawn::Vec *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::Vec **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    shawn::Vec &_result_ref = (arg1)->operator /=(arg2);
    result = (shawn::Vec *) &_result_ref;
  }
  *(shawn::Vec **)&jresult = result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_de_swarmnet_shawn_ShawnJNI_Vec_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  shawn::Vec *arg1 = (shawn::Vec *) 0 ;
  shawn::Vec *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::Vec **)&jarg1; 
  arg2 = *(shawn::Vec **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shawn::Vec const & reference is null");
    return 0;
  } 
  result = (bool)((shawn::Vec const *)arg1)->operator ==((shawn::Vec const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_de_swarmnet_shawn_ShawnJNI_Vec_1isDifferent(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  shawn::Vec *arg1 = (shawn::Vec *) 0 ;
  shawn::Vec *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::Vec **)&jarg1; 
  arg2 = *(shawn::Vec **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shawn::Vec const & reference is null");
    return 0;
  } 
  result = (bool)((shawn::Vec const *)arg1)->operator !=((shawn::Vec const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_Vec_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  shawn::Vec *arg1 = (shawn::Vec *) 0 ;
  shawn::Vec *arg2 = 0 ;
  shawn::Vec *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::Vec **)&jarg1; 
  arg2 = *(shawn::Vec **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shawn::Vec const & reference is null");
    return 0;
  } 
  {
    shawn::Vec &_result_ref = (arg1)->operator =((shawn::Vec const &)*arg2);
    result = (shawn::Vec *) &_result_ref;
  }
  *(shawn::Vec **)&jresult = result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_de_swarmnet_shawn_ShawnJNI_Vec_1mult_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jdouble jresult = 0 ;
  shawn::Vec *arg1 = (shawn::Vec *) 0 ;
  shawn::Vec *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::Vec **)&jarg1; 
  arg2 = *(shawn::Vec **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shawn::Vec const & reference is null");
    return 0;
  } 
  result = (double)((shawn::Vec const *)arg1)->operator *((shawn::Vec const &)*arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_de_swarmnet_shawn_ShawnJNI_Vec_1euclidean_1norm(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  shawn::Vec *arg1 = (shawn::Vec *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::Vec **)&jarg1; 
  result = (double)((shawn::Vec const *)arg1)->euclidean_norm();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_de_swarmnet_shawn_ShawnJNI_euclidean_1distance(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jdouble jresult = 0 ;
  shawn::Vec *arg1 = 0 ;
  shawn::Vec *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::Vec **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shawn::Vec const & reference is null");
    return 0;
  } 
  arg2 = *(shawn::Vec **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shawn::Vec const & reference is null");
    return 0;
  } 
  result = (double)shawn::euclidean_distance((shawn::Vec const &)*arg1,(shawn::Vec const &)*arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_cross_1product(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  shawn::Vec *arg1 = 0 ;
  shawn::Vec *arg2 = 0 ;
  shawn::Vec result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::Vec **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shawn::Vec const & reference is null");
    return 0;
  } 
  arg2 = *(shawn::Vec **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shawn::Vec const & reference is null");
    return 0;
  } 
  result = shawn::cross_product((shawn::Vec const &)*arg1,(shawn::Vec const &)*arg2);
  *(shawn::Vec **)&jresult = new shawn::Vec((shawn::Vec &)result); 
  return jresult;
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_delete_1NodeChangeListener(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  shawn::NodeChangeListener *arg1 = (shawn::NodeChangeListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::NodeChangeListener **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_NodeChangeListener_1node_1added(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  shawn::NodeChangeListener *arg1 = (shawn::NodeChangeListener *) 0 ;
  shawn::Node *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::NodeChangeListener **)&jarg1; 
  arg2 = *(shawn::Node **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shawn::Node & reference is null");
    return ;
  } 
  (arg1)->node_added(*arg2);
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_NodeChangeListener_1node_1removed(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  shawn::NodeChangeListener *arg1 = (shawn::NodeChangeListener *) 0 ;
  shawn::Node *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::NodeChangeListener **)&jarg1; 
  arg2 = *(shawn::Node **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shawn::Node & reference is null");
    return ;
  } 
  (arg1)->node_removed(*arg2);
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_NodeChangeListener_1id_1changed(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3) {
  shawn::NodeChangeListener *arg1 = (shawn::NodeChangeListener *) 0 ;
  int arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::NodeChangeListener **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->id_changed(arg2,arg3);
}


JNIEXPORT jboolean JNICALL Java_de_swarmnet_shawn_ShawnJNI_NodeChangeListener_1invalidate(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  shawn::NodeChangeListener *arg1 = (shawn::NodeChangeListener *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::NodeChangeListener **)&jarg1; 
  result = (bool)(arg1)->invalidate();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_delete_1KeeperManaged(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  shawn::KeeperManaged *arg1 = (shawn::KeeperManaged *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::KeeperManaged **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jstring JNICALL Java_de_swarmnet_shawn_ShawnJNI_KeeperManaged_1name(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  shawn::KeeperManaged *arg1 = (shawn::KeeperManaged *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::KeeperManaged **)&jarg1; 
  result = ((shawn::KeeperManaged const *)arg1)->name();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_de_swarmnet_shawn_ShawnJNI_KeeperManaged_1description(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  shawn::KeeperManaged *arg1 = (shawn::KeeperManaged *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::KeeperManaged **)&jarg1; 
  result = ((shawn::KeeperManaged const *)arg1)->description();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_delete_1SimulationTaskResult(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  shawn::SimulationTaskResult *arg1 = (shawn::SimulationTaskResult *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::SimulationTaskResult **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jstring JNICALL Java_de_swarmnet_shawn_ShawnJNI_SimulationTaskResult_1name(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  shawn::SimulationTaskResult *arg1 = (shawn::SimulationTaskResult *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::SimulationTaskResult **)&jarg1; 
  result = (arg1)->name();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_de_swarmnet_shawn_ShawnJNI_SimulationTaskResult_1description(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  shawn::SimulationTaskResult *arg1 = (shawn::SimulationTaskResult *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::SimulationTaskResult **)&jarg1; 
  result = (arg1)->description();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_SimulationTaskResult_1send_1to(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  shawn::SimulationTaskResult *arg1 = (shawn::SimulationTaskResult *) 0 ;
  std::ostream *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::SimulationTaskResult **)&jarg1; 
  arg2 = *(std::ostream **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::ostream & reference is null");
    return ;
  } 
  (arg1)->send_to(*arg2);
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_delete_1SimulationTask(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  shawn::SimulationTask *arg1 = (shawn::SimulationTask *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::SimulationTask **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_SimulationTask_1run(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  shawn::SimulationTask *arg1 = (shawn::SimulationTask *) 0 ;
  shawn::SimulationController *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::SimulationTask **)&jarg1; 
  arg2 = *(shawn::SimulationController **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shawn::SimulationController & reference is null");
    return ;
  } 
  try {
    (arg1)->run(*arg2);
  }
  catch(std::runtime_error &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ std::runtime_error exception thrown");
    return ; 
  }
  
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_SimulationTask_1begin_1results(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  shawn::SimulationTask *arg1 = (shawn::SimulationTask *) 0 ;
  shawn::SimulationTask::ResultSetIt result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::SimulationTask **)&jarg1; 
  result = (arg1)->begin_results();
  *(shawn::SimulationTask::ResultSetIt **)&jresult = new shawn::SimulationTask::ResultSetIt((shawn::SimulationTask::ResultSetIt &)result); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_SimulationTask_1end_1results(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  shawn::SimulationTask *arg1 = (shawn::SimulationTask *) 0 ;
  shawn::SimulationTask::ResultSetIt result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::SimulationTask **)&jarg1; 
  result = (arg1)->end_results();
  *(shawn::SimulationTask::ResultSetIt **)&jresult = new shawn::SimulationTask::ResultSetIt((shawn::SimulationTask::ResultSetIt &)result); 
  return jresult;
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_delete_1NodeMovement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  shawn::NodeMovement *arg1 = (shawn::NodeMovement *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::NodeMovement **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_NodeMovement_1init(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  shawn::NodeMovement *arg1 = (shawn::NodeMovement *) 0 ;
  shawn::Node *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::NodeMovement **)&jarg1; 
  arg2 = *(shawn::Node **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shawn::Node & reference is null");
    return ;
  } 
  (arg1)->init(*arg2);
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_NodeMovement_1init_1from(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  shawn::NodeMovement *arg1 = (shawn::NodeMovement *) 0 ;
  shawn::Node *arg2 = 0 ;
  shawn::NodeMovement *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::NodeMovement **)&jarg1; 
  arg2 = *(shawn::Node **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shawn::Node & reference is null");
    return ;
  } 
  arg3 = *(shawn::NodeMovement **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shawn::NodeMovement & reference is null");
    return ;
  } 
  (arg1)->init_from(*arg2,*arg3);
}


JNIEXPORT jboolean JNICALL Java_de_swarmnet_shawn_ShawnJNI_NodeMovement_1set_1position(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  shawn::NodeMovement *arg1 = (shawn::NodeMovement *) 0 ;
  shawn::Vec *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::NodeMovement **)&jarg1; 
  arg2 = *(shawn::Vec **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shawn::Vec const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->set_position((shawn::Vec const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_NodeMovement_1position(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  shawn::NodeMovement *arg1 = (shawn::NodeMovement *) 0 ;
  shawn::Vec result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::NodeMovement **)&jarg1; 
  result = ((shawn::NodeMovement const *)arg1)->position();
  *(shawn::Vec **)&jresult = new shawn::Vec((shawn::Vec &)result); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_NodeMovement_1velocity(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  shawn::NodeMovement *arg1 = (shawn::NodeMovement *) 0 ;
  shawn::Vec result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::NodeMovement **)&jarg1; 
  result = ((shawn::NodeMovement const *)arg1)->velocity();
  *(shawn::Vec **)&jresult = new shawn::Vec((shawn::Vec &)result); 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_de_swarmnet_shawn_ShawnJNI_NodeMovement_1name(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  shawn::NodeMovement *arg1 = (shawn::NodeMovement *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::NodeMovement **)&jarg1; 
  result = ((shawn::NodeMovement const *)arg1)->name();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


JNIEXPORT jint JNICALL Java_de_swarmnet_shawn_ShawnJNI_NodeMovement_1simulation_1round(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  shawn::NodeMovement *arg1 = (shawn::NodeMovement *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::NodeMovement **)&jarg1; 
  result = (int)((shawn::NodeMovement const *)arg1)->simulation_round();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_de_swarmnet_shawn_ShawnJNI_NodeMovement_1current_1time(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  shawn::NodeMovement *arg1 = (shawn::NodeMovement *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::NodeMovement **)&jarg1; 
  result = (double)((shawn::NodeMovement const *)arg1)->current_time();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_NodeMovement_1world(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  shawn::NodeMovement *arg1 = (shawn::NodeMovement *) 0 ;
  shawn::World *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::NodeMovement **)&jarg1; 
  {
    shawn::World const &_result_ref = ((shawn::NodeMovement const *)arg1)->world();
    result = (shawn::World *) &_result_ref;
  }
  *(shawn::World **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_NodeMovement_1world_1w(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  shawn::NodeMovement *arg1 = (shawn::NodeMovement *) 0 ;
  shawn::World *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::NodeMovement **)&jarg1; 
  {
    shawn::World &_result_ref = (arg1)->world_w();
    result = (shawn::World *) &_result_ref;
  }
  *(shawn::World **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_NodeMovement_1node_1w(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  shawn::NodeMovement *arg1 = (shawn::NodeMovement *) 0 ;
  shawn::Node *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::NodeMovement **)&jarg1; 
  {
    shawn::Node &_result_ref = (arg1)->node_w();
    result = (shawn::Node *) &_result_ref;
  }
  *(shawn::Node **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_NodeMovement_1node(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  shawn::NodeMovement *arg1 = (shawn::NodeMovement *) 0 ;
  shawn::Node *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::NodeMovement **)&jarg1; 
  {
    shawn::Node const &_result_ref = (arg1)->node();
    result = (shawn::Node *) &_result_ref;
  }
  *(shawn::Node **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_new_1Message(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  shawn::Message *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (shawn::Message *)new shawn::Message();
  *(shawn::Message **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_delete_1Message(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  shawn::Message *arg1 = (shawn::Message *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::Message **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jboolean JNICALL Java_de_swarmnet_shawn_ShawnJNI_Message_1is_1unicast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  shawn::Message *arg1 = (shawn::Message *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::Message **)&jarg1; 
  result = (bool)((shawn::Message const *)arg1)->is_unicast();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_de_swarmnet_shawn_ShawnJNI_Message_1unicast_1target(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  shawn::Message *arg1 = (shawn::Message *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::Message **)&jarg1; 
  result = (int)((shawn::Message const *)arg1)->unicast_target();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_de_swarmnet_shawn_ShawnJNI_Message_1is_1loopback_1message(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  shawn::Message *arg1 = (shawn::Message *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::Message **)&jarg1; 
  result = (bool)((shawn::Message const *)arg1)->is_loopback_message();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_Message_1source(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  shawn::Message *arg1 = (shawn::Message *) 0 ;
  shawn::Node *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::Message **)&jarg1; 
  {
    shawn::Node const &_result_ref = ((shawn::Message const *)arg1)->source();
    result = (shawn::Node *) &_result_ref;
  }
  *(shawn::Node **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_Message_1source_1w(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  shawn::Message *arg1 = (shawn::Message *) 0 ;
  shawn::Node *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::Message **)&jarg1; 
  {
    shawn::Node &_result_ref = ((shawn::Message const *)arg1)->source_w();
    result = (shawn::Node *) &_result_ref;
  }
  *(shawn::Node **)&jresult = result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_de_swarmnet_shawn_ShawnJNI_Message_1has_1source(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  shawn::Message *arg1 = (shawn::Message *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::Message **)&jarg1; 
  result = (bool)((shawn::Message const *)arg1)->has_source();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_de_swarmnet_shawn_ShawnJNI_Message_1timestamp_1simulation_1round(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  shawn::Message *arg1 = (shawn::Message *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::Message **)&jarg1; 
  result = (int)((shawn::Message const *)arg1)->timestamp_simulation_round();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_de_swarmnet_shawn_ShawnJNI_Message_1timestamp_1time(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  shawn::Message *arg1 = (shawn::Message *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::Message **)&jarg1; 
  result = (double)((shawn::Message const *)arg1)->timestamp_time();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_Message_1set_1source(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  shawn::Message *arg1 = (shawn::Message *) 0 ;
  shawn::Node *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::Message **)&jarg1; 
  arg2 = *(shawn::Node **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shawn::Node & reference is null");
    return ;
  } 
  (arg1)->set_source(*arg2);
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_Message_1set_1timestamp(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
  shawn::Message *arg1 = (shawn::Message *) 0 ;
  int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::Message **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->set_timestamp(arg2,arg3);
}


JNIEXPORT jint JNICALL Java_de_swarmnet_shawn_ShawnJNI_Message_1size(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  shawn::Message *arg1 = (shawn::Message *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::Message **)&jarg1; 
  result = (int)((shawn::Message const *)arg1)->size();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_Message_1setSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  shawn::Message *arg1 = (shawn::Message *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::Message **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setSize(arg2);
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_new_1Processor(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  shawn::Processor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (shawn::Processor *)new shawn::Processor();
  *(shawn::Processor **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_delete_1Processor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  shawn::Processor *arg1 = (shawn::Processor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::Processor **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_Processor_1set_1owner(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  shawn::Processor *arg1 = (shawn::Processor *) 0 ;
  shawn::Node *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::Processor **)&jarg1; 
  arg2 = *(shawn::Node **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shawn::Node & reference is null");
    return ;
  } 
  (arg1)->set_owner(*arg2);
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_Processor_1owner(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  shawn::Processor *arg1 = (shawn::Processor *) 0 ;
  shawn::Node *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::Processor **)&jarg1; 
  {
    shawn::Node const &_result_ref = ((shawn::Processor const *)arg1)->owner();
    result = (shawn::Node *) &_result_ref;
  }
  *(shawn::Node **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_Processor_1owner_1w(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  shawn::Processor *arg1 = (shawn::Processor *) 0 ;
  shawn::Node *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::Processor **)&jarg1; 
  {
    shawn::Node &_result_ref = (arg1)->owner_w();
    result = (shawn::Node *) &_result_ref;
  }
  *(shawn::Node **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_Processor_1special_1boot(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  shawn::Processor *arg1 = (shawn::Processor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::Processor **)&jarg1; 
  (arg1)->special_boot();
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_Processor_1boot(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  shawn::Processor *arg1 = (shawn::Processor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::Processor **)&jarg1; 
  (arg1)->boot();
}


JNIEXPORT jboolean JNICALL Java_de_swarmnet_shawn_ShawnJNI_Processor_1process_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  shawn::Processor *arg1 = (shawn::Processor *) 0 ;
  shawn::ConstMessageHandle *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::Processor **)&jarg1; 
  arg2 = *(shawn::ConstMessageHandle **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shawn::ConstMessageHandle const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->process_message((shawn::ConstMessageHandle const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_Processor_1work(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  shawn::Processor *arg1 = (shawn::Processor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::Processor **)&jarg1; 
  (arg1)->work();
}


JNIEXPORT jint JNICALL Java_de_swarmnet_shawn_ShawnJNI_Processor_1id(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  shawn::Processor *arg1 = (shawn::Processor *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::Processor **)&jarg1; 
  result = (int)((shawn::Processor const *)arg1)->id();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_de_swarmnet_shawn_ShawnJNI_Processor_1state(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  shawn::Processor *arg1 = (shawn::Processor *) 0 ;
  shawn::Processor::ProcessorState result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::Processor **)&jarg1; 
  result = (shawn::Processor::ProcessorState)((shawn::Processor const *)arg1)->state();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_de_swarmnet_shawn_ShawnJNI_Processor_1auto_1terminate(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  shawn::Processor *arg1 = (shawn::Processor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::Processor **)&jarg1; 
  result = (bool)((shawn::Processor const *)arg1)->auto_terminate();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_de_swarmnet_shawn_ShawnJNI_Processor_1simulation_1round(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  shawn::Processor *arg1 = (shawn::Processor *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::Processor **)&jarg1; 
  result = (int)((shawn::Processor const *)arg1)->simulation_round();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_Processor_1sync_1to_1tags(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  shawn::Processor *arg1 = (shawn::Processor *) 0 ;
  shawn::TagContainer *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::Processor **)&jarg1; 
  arg2 = *(shawn::TagContainer **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shawn::TagContainer & reference is null");
    return ;
  } 
  (arg1)->sync_to_tags(*arg2);
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_Processor_1sync_1from_1tags(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  shawn::Processor *arg1 = (shawn::Processor *) 0 ;
  shawn::TagContainer *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::Processor **)&jarg1; 
  arg2 = *(shawn::TagContainer **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shawn::TagContainer const & reference is null");
    return ;
  } 
  try {
    (arg1)->sync_from_tags((shawn::TagContainer const &)*arg2);
  }
  catch(std::runtime_error &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ std::runtime_error exception thrown");
    return ; 
  }
  
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_new_1World(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  shawn::World *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (shawn::World *)new shawn::World();
  *(shawn::World **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_delete_1World(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  shawn::World *arg1 = (shawn::World *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::World **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_World_1init(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  shawn::World *arg1 = (shawn::World *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::World **)&jarg1; 
  (arg1)->init();
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_World_1add_1node(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  shawn::World *arg1 = (shawn::World *) 0 ;
  shawn::Node *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::World **)&jarg1; 
  arg2 = *(shawn::Node **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shawn::Node & reference is null");
    return ;
  } 
  try {
    (arg1)->add_node(*arg2);
  }
  catch(std::logic_error &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ std::logic_error exception thrown");
    return ; 
  }
  
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_World_1remove_1node(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  shawn::World *arg1 = (shawn::World *) 0 ;
  shawn::Node *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::World **)&jarg1; 
  arg2 = *(shawn::Node **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shawn::Node & reference is null");
    return ;
  } 
  try {
    (arg1)->remove_node(*arg2);
  }
  catch(std::logic_error &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ std::logic_error exception thrown");
    return ; 
  }
  
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_World_1add_1default_1processor(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  shawn::World *arg1 = (shawn::World *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::World **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->add_default_processor((std::string const &)*arg2);
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_World_1set_1edge_1model(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  shawn::World *arg1 = (shawn::World *) 0 ;
  shawn::EdgeModel *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::World **)&jarg1; 
  arg2 = *(shawn::EdgeModel **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shawn::EdgeModel & reference is null");
    return ;
  } 
  (arg1)->set_edge_model(*arg2);
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_World_1set_1transmission_1model(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  shawn::World *arg1 = (shawn::World *) 0 ;
  shawn::TransmissionModel *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::World **)&jarg1; 
  arg2 = *(shawn::TransmissionModel **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shawn::TransmissionModel & reference is null");
    return ;
  } 
  (arg1)->set_transmission_model(*arg2);
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_World_1set_1communication_1model(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  shawn::World *arg1 = (shawn::World *) 0 ;
  shawn::CommunicationModel *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::World **)&jarg1; 
  arg2 = *(shawn::CommunicationModel **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shawn::CommunicationModel & reference is null");
    return ;
  } 
  (arg1)->set_communication_model(*arg2);
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_World_1edge_1model(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  shawn::World *arg1 = (shawn::World *) 0 ;
  shawn::EdgeModel *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::World **)&jarg1; 
  {
    shawn::EdgeModel const &_result_ref = ((shawn::World const *)arg1)->edge_model();
    result = (shawn::EdgeModel *) &_result_ref;
  }
  *(shawn::EdgeModel **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_World_1edge_1model_1w(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  shawn::World *arg1 = (shawn::World *) 0 ;
  shawn::EdgeModel *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::World **)&jarg1; 
  {
    shawn::EdgeModel &_result_ref = (arg1)->edge_model_w();
    result = (shawn::EdgeModel *) &_result_ref;
  }
  *(shawn::EdgeModel **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_World_1transmission_1model(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  shawn::World *arg1 = (shawn::World *) 0 ;
  shawn::TransmissionModel *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::World **)&jarg1; 
  {
    shawn::TransmissionModel const &_result_ref = ((shawn::World const *)arg1)->transmission_model();
    result = (shawn::TransmissionModel *) &_result_ref;
  }
  *(shawn::TransmissionModel **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_World_1transmission_1model_1w(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  shawn::World *arg1 = (shawn::World *) 0 ;
  shawn::TransmissionModel *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::World **)&jarg1; 
  {
    shawn::TransmissionModel &_result_ref = (arg1)->transmission_model_w();
    result = (shawn::TransmissionModel *) &_result_ref;
  }
  *(shawn::TransmissionModel **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_World_1communication_1model(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  shawn::World *arg1 = (shawn::World *) 0 ;
  shawn::CommunicationModel *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::World **)&jarg1; 
  {
    shawn::CommunicationModel const &_result_ref = ((shawn::World const *)arg1)->communication_model();
    result = (shawn::CommunicationModel *) &_result_ref;
  }
  *(shawn::CommunicationModel **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_World_1communication_1model_1w(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  shawn::World *arg1 = (shawn::World *) 0 ;
  shawn::CommunicationModel *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::World **)&jarg1; 
  {
    shawn::CommunicationModel &_result_ref = (arg1)->communication_model_w();
    result = (shawn::CommunicationModel *) &_result_ref;
  }
  *(shawn::CommunicationModel **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_World_1set_1simulation_1controller(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  shawn::World *arg1 = (shawn::World *) 0 ;
  shawn::SimulationController *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::World **)&jarg1; 
  arg2 = *(shawn::SimulationController **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shawn::SimulationController & reference is null");
    return ;
  } 
  (arg1)->set_simulation_controller(*arg2);
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_World_1simulation_1controller_1w(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  shawn::World *arg1 = (shawn::World *) 0 ;
  shawn::SimulationController *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::World **)&jarg1; 
  {
    shawn::SimulationController &_result_ref = (arg1)->simulation_controller_w();
    result = (shawn::SimulationController *) &_result_ref;
  }
  *(shawn::SimulationController **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_World_1simulation_1controller(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  shawn::World *arg1 = (shawn::World *) 0 ;
  shawn::SimulationController *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::World **)&jarg1; 
  {
    shawn::SimulationController const &_result_ref = ((shawn::World const *)arg1)->simulation_controller();
    result = (shawn::SimulationController *) &_result_ref;
  }
  *(shawn::SimulationController **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_World_1set_1movement_1controller(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  shawn::World *arg1 = (shawn::World *) 0 ;
  shawn::MovementController *arg2 = (shawn::MovementController *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::World **)&jarg1; 
  arg2 = *(shawn::MovementController **)&jarg2; 
  (arg1)->set_movement_controller(arg2);
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_World_1movement_1controller_1w(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  shawn::World *arg1 = (shawn::World *) 0 ;
  shawn::MovementController *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::World **)&jarg1; 
  {
    shawn::MovementController &_result_ref = (arg1)->movement_controller_w();
    result = (shawn::MovementController *) &_result_ref;
  }
  *(shawn::MovementController **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_World_1movement_1controller(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  shawn::World *arg1 = (shawn::World *) 0 ;
  shawn::MovementController *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::World **)&jarg1; 
  {
    shawn::MovementController const &_result_ref = ((shawn::World const *)arg1)->movement_controller();
    result = (shawn::MovementController *) &_result_ref;
  }
  *(shawn::MovementController **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_World_1lower_1left(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  shawn::World *arg1 = (shawn::World *) 0 ;
  shawn::Vec *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::World **)&jarg1; 
  {
    shawn::Vec const &_result_ref = ((shawn::World const *)arg1)->lower_left();
    result = (shawn::Vec *) &_result_ref;
  }
  *(shawn::Vec **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_World_1upper_1right(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  shawn::World *arg1 = (shawn::World *) 0 ;
  shawn::Vec *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::World **)&jarg1; 
  {
    shawn::Vec const &_result_ref = ((shawn::World const *)arg1)->upper_right();
    result = (shawn::Vec *) &_result_ref;
  }
  *(shawn::Vec **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_World_1add_1edge(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  shawn::World *arg1 = (shawn::World *) 0 ;
  shawn::Node *arg2 = 0 ;
  shawn::Node *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::World **)&jarg1; 
  arg2 = *(shawn::Node **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shawn::Node & reference is null");
    return ;
  } 
  arg3 = *(shawn::Node **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shawn::Node & reference is null");
    return ;
  } 
  (arg1)->add_edge(*arg2,*arg3);
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_World_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  shawn::World *arg1 = (shawn::World *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::World **)&jarg1; 
  (arg1)->clear();
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_World_1set_1size_1hint(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  shawn::World *arg1 = (shawn::World *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::World **)&jarg1; 
  arg2 = (double)jarg2; 
  try {
    (arg1)->set_size_hint(arg2);
  }
  catch(std::logic_error &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ std::logic_error exception thrown");
    return ; 
  }
  
}


JNIEXPORT jstring JNICALL Java_de_swarmnet_shawn_ShawnJNI_World_1uuid(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  shawn::World *arg1 = (shawn::World *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::World **)&jarg1; 
  {
    std::string const &_result_ref = ((shawn::World const *)arg1)->uuid();
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


JNIEXPORT jint JNICALL Java_de_swarmnet_shawn_ShawnJNI_World_1active_1nodes_1count(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  shawn::World *arg1 = (shawn::World *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::World **)&jarg1; 
  result = (int)((shawn::World const *)arg1)->active_nodes_count();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_de_swarmnet_shawn_ShawnJNI_World_1sleeping_1nodes_1count(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  shawn::World *arg1 = (shawn::World *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::World **)&jarg1; 
  result = (int)((shawn::World const *)arg1)->sleeping_nodes_count();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_de_swarmnet_shawn_ShawnJNI_World_1inactive_1nodes_1count(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  shawn::World *arg1 = (shawn::World *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::World **)&jarg1; 
  result = (int)((shawn::World const *)arg1)->inactive_nodes_count();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_de_swarmnet_shawn_ShawnJNI_World_1is_1done(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  shawn::World *arg1 = (shawn::World *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::World **)&jarg1; 
  result = (bool)((shawn::World const *)arg1)->is_done();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_de_swarmnet_shawn_ShawnJNI_World_1simulation_1round(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  shawn::World *arg1 = (shawn::World *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::World **)&jarg1; 
  result = (int)((shawn::World const *)arg1)->simulation_round();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_de_swarmnet_shawn_ShawnJNI_World_1current_1time(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  shawn::World *arg1 = (shawn::World *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::World **)&jarg1; 
  result = (double)((shawn::World const *)arg1)->current_time();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_de_swarmnet_shawn_ShawnJNI_World_1has_1size_1hint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  shawn::World *arg1 = (shawn::World *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::World **)&jarg1; 
  result = (bool)((shawn::World const *)arg1)->has_size_hint();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_de_swarmnet_shawn_ShawnJNI_World_1size_1hint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  shawn::World *arg1 = (shawn::World *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::World **)&jarg1; 
  try {
    result = (double)((shawn::World const *)arg1)->size_hint();
  }
  catch(std::runtime_error &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ std::runtime_error exception thrown");
    return 0; 
  }
  
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_World_1step(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  shawn::World *arg1 = (shawn::World *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::World **)&jarg1; 
  (arg1)->step();
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_World_1send_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  shawn::World *arg1 = (shawn::World *) 0 ;
  shawn::Node *arg2 = 0 ;
  shawn::MessageHandle *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::World **)&jarg1; 
  arg2 = *(shawn::Node **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shawn::Node const & reference is null");
    return ;
  } 
  arg3 = *(shawn::MessageHandle **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shawn::MessageHandle const & reference is null");
    return ;
  } 
  (arg1)->send_message((shawn::Node const &)*arg2,(shawn::MessageHandle const &)*arg3);
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_World_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  shawn::World *arg1 = (shawn::World *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::World **)&jarg1; 
  (arg1)->reset();
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_World_1add_1node_1change_1listener(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  shawn::World *arg1 = (shawn::World *) 0 ;
  shawn::NodeChangeListener *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::World **)&jarg1; 
  arg2 = *(shawn::NodeChangeListener **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shawn::NodeChangeListener & reference is null");
    return ;
  } 
  (arg1)->add_node_change_listener(*arg2);
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_World_1remove_1node_1change_1listener(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  shawn::World *arg1 = (shawn::World *) 0 ;
  shawn::NodeChangeListener *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::World **)&jarg1; 
  arg2 = *(shawn::NodeChangeListener **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shawn::NodeChangeListener & reference is null");
    return ;
  } 
  (arg1)->remove_node_change_listener(*arg2);
}


JNIEXPORT jboolean JNICALL Java_de_swarmnet_shawn_ShawnJNI_World_1can_1communicate_1bidi(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  shawn::World *arg1 = (shawn::World *) 0 ;
  shawn::Node *arg2 = 0 ;
  shawn::Node *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::World **)&jarg1; 
  arg2 = *(shawn::Node **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shawn::Node const & reference is null");
    return 0;
  } 
  arg3 = *(shawn::Node **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shawn::Node const & reference is null");
    return 0;
  } 
  result = (bool)((shawn::World const *)arg1)->can_communicate_bidi((shawn::Node const &)*arg2,(shawn::Node const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_de_swarmnet_shawn_ShawnJNI_World_1can_1communicate_1uni(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  shawn::World *arg1 = (shawn::World *) 0 ;
  shawn::Node *arg2 = 0 ;
  shawn::Node *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::World **)&jarg1; 
  arg2 = *(shawn::Node **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shawn::Node const & reference is null");
    return 0;
  } 
  arg3 = *(shawn::Node **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shawn::Node const & reference is null");
    return 0;
  } 
  result = (bool)((shawn::World const *)arg1)->can_communicate_uni((shawn::Node const &)*arg2,(shawn::Node const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_de_swarmnet_shawn_ShawnJNI_World_1node_1count(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  shawn::World *arg1 = (shawn::World *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::World **)&jarg1; 
  result = (int)((shawn::World const *)arg1)->node_count();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_de_swarmnet_shawn_ShawnJNI_World_1node_1id_1space_1size(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  shawn::World *arg1 = (shawn::World *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::World **)&jarg1; 
  result = (int)((shawn::World const *)arg1)->node_id_space_size();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_World_1begin_1nodes_1w(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  shawn::World *arg1 = (shawn::World *) 0 ;
  SwigValueWrapper<shawn::SkipNullIterator<shawn::Node,std::vector<shawn::Node * >,shawn::World::NodeVector::iterator > > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::World **)&jarg1; 
  result = (arg1)->begin_nodes_w();
  *(shawn::World::node_iterator **)&jresult = new shawn::World::node_iterator((shawn::World::node_iterator &)result); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_World_1end_1nodes_1w(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  shawn::World *arg1 = (shawn::World *) 0 ;
  SwigValueWrapper<shawn::SkipNullIterator<shawn::Node,std::vector<shawn::Node * >,shawn::World::NodeVector::iterator > > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::World **)&jarg1; 
  result = (arg1)->end_nodes_w();
  *(shawn::World::node_iterator **)&jresult = new shawn::World::node_iterator((shawn::World::node_iterator &)result); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_World_1find_1node_1by_1id_1w(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  shawn::World *arg1 = (shawn::World *) 0 ;
  int arg2 ;
  shawn::Node *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::World **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (shawn::Node *)(arg1)->find_node_by_id_w(arg2);
  *(shawn::Node **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_World_1find_1node_1by_1label_1w(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  shawn::World *arg1 = (shawn::World *) 0 ;
  std::string *arg2 = 0 ;
  shawn::Node *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::World **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (shawn::Node *)(arg1)->find_node_by_label_w((std::string const &)*arg2);
  *(shawn::Node **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_World_1begin_1nodes(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  shawn::World *arg1 = (shawn::World *) 0 ;
  SwigValueWrapper<shawn::SkipNullIterator<shawn::Node const,std::vector<shawn::Node * >,shawn::World::NodeVector::const_iterator > > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::World **)&jarg1; 
  result = ((shawn::World const *)arg1)->begin_nodes();
  *(shawn::World::const_node_iterator **)&jresult = new shawn::World::const_node_iterator((shawn::World::const_node_iterator &)result); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_World_1end_1nodes(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  shawn::World *arg1 = (shawn::World *) 0 ;
  SwigValueWrapper<shawn::SkipNullIterator<shawn::Node const,std::vector<shawn::Node * >,shawn::World::NodeVector::const_iterator > > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::World **)&jarg1; 
  result = ((shawn::World const *)arg1)->end_nodes();
  *(shawn::World::const_node_iterator **)&jresult = new shawn::World::const_node_iterator((shawn::World::const_node_iterator &)result); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_World_1find_1node_1by_1id(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  shawn::World *arg1 = (shawn::World *) 0 ;
  int arg2 ;
  shawn::Node *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::World **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (shawn::Node *)((shawn::World const *)arg1)->find_node_by_id(arg2);
  *(shawn::Node **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_World_1find_1node_1by_1label(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  shawn::World *arg1 = (shawn::World *) 0 ;
  std::string *arg2 = 0 ;
  shawn::Node *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::World **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (shawn::Node *)((shawn::World const *)arg1)->find_node_by_label((std::string const &)*arg2);
  *(shawn::Node **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_World_1begin_1adjacent_1nodes_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  shawn::World *arg1 = (shawn::World *) 0 ;
  shawn::Node *arg2 = 0 ;
  shawn::EdgeModel::CommunicationDirection arg3 ;
  shawn::World::const_adjacency_iterator result;
  shawn::EdgeModel::CommunicationDirection *argp3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::World **)&jarg1; 
  arg2 = *(shawn::Node **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shawn::Node const & reference is null");
    return 0;
  } 
  argp3 = *(shawn::EdgeModel::CommunicationDirection **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null shawn::EdgeModel::CommunicationDirection");
    return 0;
  }
  arg3 = *argp3; 
  result = ((shawn::World const *)arg1)->begin_adjacent_nodes((shawn::Node const &)*arg2,arg3);
  *(shawn::World::const_adjacency_iterator **)&jresult = new shawn::World::const_adjacency_iterator((shawn::World::const_adjacency_iterator &)result); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_World_1begin_1adjacent_1nodes_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  shawn::World *arg1 = (shawn::World *) 0 ;
  shawn::Node *arg2 = 0 ;
  shawn::World::const_adjacency_iterator result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::World **)&jarg1; 
  arg2 = *(shawn::Node **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shawn::Node const & reference is null");
    return 0;
  } 
  result = ((shawn::World const *)arg1)->begin_adjacent_nodes((shawn::Node const &)*arg2);
  *(shawn::World::const_adjacency_iterator **)&jresult = new shawn::World::const_adjacency_iterator((shawn::World::const_adjacency_iterator &)result); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_World_1end_1adjacent_1nodes(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  shawn::World *arg1 = (shawn::World *) 0 ;
  shawn::Node *arg2 = 0 ;
  shawn::World::const_adjacency_iterator result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::World **)&jarg1; 
  arg2 = *(shawn::Node **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shawn::Node const & reference is null");
    return 0;
  } 
  result = ((shawn::World const *)arg1)->end_adjacent_nodes((shawn::Node const &)*arg2);
  *(shawn::World::const_adjacency_iterator **)&jresult = new shawn::World::const_adjacency_iterator((shawn::World::const_adjacency_iterator &)result); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_World_1begin_1adjacent_1nodes_1w_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  shawn::World *arg1 = (shawn::World *) 0 ;
  shawn::Node *arg2 = 0 ;
  shawn::EdgeModel::CommunicationDirection arg3 ;
  shawn::World::adjacency_iterator result;
  shawn::EdgeModel::CommunicationDirection *argp3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::World **)&jarg1; 
  arg2 = *(shawn::Node **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shawn::Node & reference is null");
    return 0;
  } 
  argp3 = *(shawn::EdgeModel::CommunicationDirection **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null shawn::EdgeModel::CommunicationDirection");
    return 0;
  }
  arg3 = *argp3; 
  result = (arg1)->begin_adjacent_nodes_w(*arg2,arg3);
  *(shawn::World::adjacency_iterator **)&jresult = new shawn::World::adjacency_iterator((shawn::World::adjacency_iterator &)result); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_World_1begin_1adjacent_1nodes_1w_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  shawn::World *arg1 = (shawn::World *) 0 ;
  shawn::Node *arg2 = 0 ;
  shawn::World::adjacency_iterator result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::World **)&jarg1; 
  arg2 = *(shawn::Node **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shawn::Node & reference is null");
    return 0;
  } 
  result = (arg1)->begin_adjacent_nodes_w(*arg2);
  *(shawn::World::adjacency_iterator **)&jresult = new shawn::World::adjacency_iterator((shawn::World::adjacency_iterator &)result); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_World_1end_1adjacent_1nodes_1w(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  shawn::World *arg1 = (shawn::World *) 0 ;
  shawn::Node *arg2 = 0 ;
  shawn::World::adjacency_iterator result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::World **)&jarg1; 
  arg2 = *(shawn::Node **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shawn::Node & reference is null");
    return 0;
  } 
  result = (arg1)->end_adjacent_nodes_w(*arg2);
  *(shawn::World::adjacency_iterator **)&jresult = new shawn::World::adjacency_iterator((shawn::World::adjacency_iterator &)result); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_World_1scheduler_1w(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  shawn::World *arg1 = (shawn::World *) 0 ;
  shawn::EventScheduler *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::World **)&jarg1; 
  {
    shawn::EventScheduler &_result_ref = (arg1)->scheduler_w();
    result = (shawn::EventScheduler *) &_result_ref;
  }
  *(shawn::EventScheduler **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_World_1scheduler(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  shawn::World *arg1 = (shawn::World *) 0 ;
  shawn::EventScheduler *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::World **)&jarg1; 
  {
    shawn::EventScheduler const &_result_ref = ((shawn::World const *)arg1)->scheduler();
    result = (shawn::EventScheduler *) &_result_ref;
  }
  *(shawn::EventScheduler **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_World_1add_1pre_1step_1task(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  shawn::World *arg1 = (shawn::World *) 0 ;
  shawn::SimulationTaskHandle *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::World **)&jarg1; 
  arg2 = *(shawn::SimulationTaskHandle **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shawn::SimulationTaskHandle const & reference is null");
    return ;
  } 
  (arg1)->add_pre_step_task((shawn::SimulationTaskHandle const &)*arg2);
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_World_1add_1post_1step_1task(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  shawn::World *arg1 = (shawn::World *) 0 ;
  shawn::SimulationTaskHandle *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::World **)&jarg1; 
  arg2 = *(shawn::SimulationTaskHandle **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shawn::SimulationTaskHandle const & reference is null");
    return ;
  } 
  (arg1)->add_post_step_task((shawn::SimulationTaskHandle const &)*arg2);
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_new_1Neighborhood(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  shawn::Neighborhood *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (shawn::Neighborhood *)new shawn::Neighborhood();
  *(shawn::Neighborhood **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_delete_1Neighborhood(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  shawn::Neighborhood *arg1 = (shawn::Neighborhood *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::Neighborhood **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_new_1NeighborhoodConst(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  shawn::NeighborhoodConst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (shawn::NeighborhoodConst *)new shawn::NeighborhoodConst();
  *(shawn::NeighborhoodConst **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_delete_1NeighborhoodConst(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  shawn::NeighborhoodConst *arg1 = (shawn::NeighborhoodConst *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::NeighborhoodConst **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jstring JNICALL Java_de_swarmnet_shawn_ShawnJNI_Node_1WARN_1HOOD_1STORAGE_1PARAMETER_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    std::string const &_result_ref = shawn::Node::WARN_HOOD_STORAGE_PARAMETER;
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_new_1Node(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  shawn::Node *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (shawn::Node *)new shawn::Node();
  *(shawn::Node **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_delete_1Node(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  shawn::Node *arg1 = (shawn::Node *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::Node **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_Node_1set_1real_1position(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  shawn::Node *arg1 = (shawn::Node *) 0 ;
  shawn::Vec *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::Node **)&jarg1; 
  arg2 = *(shawn::Vec **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shawn::Vec const & reference is null");
    return ;
  } 
  (arg1)->set_real_position((shawn::Vec const &)*arg2);
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_Node_1add_1processor(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  shawn::Node *arg1 = (shawn::Node *) 0 ;
  shawn::ProcessorHandle *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::Node **)&jarg1; 
  arg2 = *(shawn::ProcessorHandle **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shawn::ProcessorHandle const & reference is null");
    return ;
  } 
  (arg1)->add_processor((shawn::ProcessorHandle const &)*arg2);
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_Node_1set_1world(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  shawn::Node *arg1 = (shawn::Node *) 0 ;
  shawn::World *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::Node **)&jarg1; 
  arg2 = *(shawn::World **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shawn::World & reference is null");
    return ;
  } 
  (arg1)->set_world(*arg2);
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_Node_1set_1id(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  shawn::Node *arg1 = (shawn::Node *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::Node **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->set_id(arg2);
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_Node_1set_1label(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  shawn::Node *arg1 = (shawn::Node *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::Node **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->set_label((std::string const &)*arg2);
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_Node_1init(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  shawn::Node *arg1 = (shawn::Node *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::Node **)&jarg1; 
  (arg1)->init();
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_Node_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  shawn::Node *arg1 = (shawn::Node *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::Node **)&jarg1; 
  (arg1)->reset();
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_Node_1step(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  shawn::Node *arg1 = (shawn::Node *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::Node **)&jarg1; 
  (arg1)->step();
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_Node_1send(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  shawn::Node *arg1 = (shawn::Node *) 0 ;
  shawn::MessageHandle *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::Node **)&jarg1; 
  arg2 = *(shawn::MessageHandle **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shawn::MessageHandle const & reference is null");
    return ;
  } 
  (arg1)->send((shawn::MessageHandle const &)*arg2);
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_Node_1receive(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  shawn::Node *arg1 = (shawn::Node *) 0 ;
  shawn::ConstMessageHandle *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::Node **)&jarg1; 
  arg2 = *(shawn::ConstMessageHandle **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shawn::ConstMessageHandle const & reference is null");
    return ;
  } 
  (arg1)->receive((shawn::ConstMessageHandle const &)*arg2);
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_Node_1set_1movement(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  shawn::Node *arg1 = (shawn::Node *) 0 ;
  shawn::NodeMovementHandle *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::Node **)&jarg1; 
  arg2 = *(shawn::NodeMovementHandle **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shawn::NodeMovementHandle const & reference is null");
    return ;
  } 
  (arg1)->set_movement((shawn::NodeMovementHandle const &)*arg2);
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_Node_1movement_1w(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  shawn::Node *arg1 = (shawn::Node *) 0 ;
  shawn::NodeMovement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::Node **)&jarg1; 
  {
    shawn::NodeMovement &_result_ref = (arg1)->movement_w();
    result = (shawn::NodeMovement *) &_result_ref;
  }
  *(shawn::NodeMovement **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_Node_1movement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  shawn::Node *arg1 = (shawn::Node *) 0 ;
  shawn::NodeMovement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::Node **)&jarg1; 
  {
    shawn::NodeMovement const &_result_ref = ((shawn::Node const *)arg1)->movement();
    result = (shawn::NodeMovement *) &_result_ref;
  }
  *(shawn::NodeMovement **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_Node_1real_1position(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  shawn::Node *arg1 = (shawn::Node *) 0 ;
  shawn::Vec result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::Node **)&jarg1; 
  result = ((shawn::Node const *)arg1)->real_position();
  *(shawn::Vec **)&jresult = new shawn::Vec((shawn::Vec &)result); 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_de_swarmnet_shawn_ShawnJNI_Node_1has_1est_1position(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  shawn::Node *arg1 = (shawn::Node *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::Node **)&jarg1; 
  result = (bool)((shawn::Node const *)arg1)->has_est_position();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_Node_1clear_1est_1position(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  shawn::Node *arg1 = (shawn::Node *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::Node **)&jarg1; 
  (arg1)->clear_est_position();
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_Node_1est_1position(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  shawn::Node *arg1 = (shawn::Node *) 0 ;
  shawn::Vec *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::Node **)&jarg1; 
  {
    shawn::Vec const &_result_ref = ((shawn::Node const *)arg1)->est_position();
    result = (shawn::Vec *) &_result_ref;
  }
  *(shawn::Vec **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_Node_1set_1est_1position(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  shawn::Node *arg1 = (shawn::Node *) 0 ;
  shawn::Vec *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::Node **)&jarg1; 
  arg2 = *(shawn::Vec **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shawn::Vec const & reference is null");
    return ;
  } 
  (arg1)->set_est_position((shawn::Vec const &)*arg2);
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_Node_1sync_1to_1tags(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  shawn::Node *arg1 = (shawn::Node *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::Node **)&jarg1; 
  (arg1)->sync_to_tags();
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_Node_1sync_1from_1tags(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  shawn::Node *arg1 = (shawn::Node *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::Node **)&jarg1; 
  try {
    (arg1)->sync_from_tags();
  }
  catch(std::runtime_error &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ std::runtime_error exception thrown");
    return ; 
  }
  
}


JNIEXPORT jint JNICALL Java_de_swarmnet_shawn_ShawnJNI_Node_1id(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  shawn::Node *arg1 = (shawn::Node *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::Node **)&jarg1; 
  result = (int)((shawn::Node const *)arg1)->id();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_de_swarmnet_shawn_ShawnJNI_Node_1label(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  shawn::Node *arg1 = (shawn::Node *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::Node **)&jarg1; 
  {
    std::string const &_result_ref = ((shawn::Node const *)arg1)->label();
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


JNIEXPORT jint JNICALL Java_de_swarmnet_shawn_ShawnJNI_Node_1simulation_1round(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  shawn::Node *arg1 = (shawn::Node *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::Node **)&jarg1; 
  result = (int)((shawn::Node const *)arg1)->simulation_round();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_de_swarmnet_shawn_ShawnJNI_Node_1current_1time(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  shawn::Node *arg1 = (shawn::Node *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::Node **)&jarg1; 
  result = (double)((shawn::Node const *)arg1)->current_time();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_de_swarmnet_shawn_ShawnJNI_Node_1state(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  shawn::Node *arg1 = (shawn::Node *) 0 ;
  shawn::Processor::ProcessorState result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::Node **)&jarg1; 
  result = (shawn::Processor::ProcessorState)((shawn::Node const *)arg1)->state();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_Node_1world(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  shawn::Node *arg1 = (shawn::Node *) 0 ;
  shawn::World *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::Node **)&jarg1; 
  {
    shawn::World const &_result_ref = ((shawn::Node const *)arg1)->world();
    result = (shawn::World *) &_result_ref;
  }
  *(shawn::World **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_Node_1world_1w(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  shawn::Node *arg1 = (shawn::Node *) 0 ;
  shawn::World *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::Node **)&jarg1; 
  {
    shawn::World &_result_ref = (arg1)->world_w();
    result = (shawn::World *) &_result_ref;
  }
  *(shawn::World **)&jresult = result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_de_swarmnet_shawn_ShawnJNI_Node_1is_1special_1node(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  shawn::Node *arg1 = (shawn::Node *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::Node **)&jarg1; 
  result = (bool)((shawn::Node const *)arg1)->is_special_node();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_Node_1begin_1adjacent_1nodes_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  shawn::Node *arg1 = (shawn::Node *) 0 ;
  shawn::EdgeModel::CommunicationDirection arg2 ;
  shawn::Node::const_adjacency_iterator result;
  shawn::EdgeModel::CommunicationDirection *argp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::Node **)&jarg1; 
  argp2 = *(shawn::EdgeModel::CommunicationDirection **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null shawn::EdgeModel::CommunicationDirection");
    return 0;
  }
  arg2 = *argp2; 
  result = ((shawn::Node const *)arg1)->begin_adjacent_nodes(arg2);
  *(shawn::Node::const_adjacency_iterator **)&jresult = new shawn::Node::const_adjacency_iterator((shawn::Node::const_adjacency_iterator &)result); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_Node_1begin_1adjacent_1nodes_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  shawn::Node *arg1 = (shawn::Node *) 0 ;
  shawn::Node::const_adjacency_iterator result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::Node **)&jarg1; 
  result = ((shawn::Node const *)arg1)->begin_adjacent_nodes();
  *(shawn::Node::const_adjacency_iterator **)&jresult = new shawn::Node::const_adjacency_iterator((shawn::Node::const_adjacency_iterator &)result); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_Node_1end_1adjacent_1nodes(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  shawn::Node *arg1 = (shawn::Node *) 0 ;
  shawn::Node::const_adjacency_iterator result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::Node **)&jarg1; 
  result = ((shawn::Node const *)arg1)->end_adjacent_nodes();
  *(shawn::Node::const_adjacency_iterator **)&jresult = new shawn::Node::const_adjacency_iterator((shawn::Node::const_adjacency_iterator &)result); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_Node_1begin_1adjacent_1nodes_1w_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  shawn::Node *arg1 = (shawn::Node *) 0 ;
  shawn::EdgeModel::CommunicationDirection arg2 ;
  shawn::Node::adjacency_iterator result;
  shawn::EdgeModel::CommunicationDirection *argp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::Node **)&jarg1; 
  argp2 = *(shawn::EdgeModel::CommunicationDirection **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null shawn::EdgeModel::CommunicationDirection");
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->begin_adjacent_nodes_w(arg2);
  *(shawn::Node::adjacency_iterator **)&jresult = new shawn::Node::adjacency_iterator((shawn::Node::adjacency_iterator &)result); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_Node_1begin_1adjacent_1nodes_1w_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  shawn::Node *arg1 = (shawn::Node *) 0 ;
  shawn::Node::adjacency_iterator result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::Node **)&jarg1; 
  result = (arg1)->begin_adjacent_nodes_w();
  *(shawn::Node::adjacency_iterator **)&jresult = new shawn::Node::adjacency_iterator((shawn::Node::adjacency_iterator &)result); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_Node_1end_1adjacent_1nodes_1w(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  shawn::Node *arg1 = (shawn::Node *) 0 ;
  shawn::Node::adjacency_iterator result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::Node **)&jarg1; 
  result = (arg1)->end_adjacent_nodes_w();
  *(shawn::Node::adjacency_iterator **)&jresult = new shawn::Node::adjacency_iterator((shawn::Node::adjacency_iterator &)result); 
  return jresult;
}


JNIEXPORT jint JNICALL Java_de_swarmnet_shawn_ShawnJNI_Node_1degree_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  shawn::Node *arg1 = (shawn::Node *) 0 ;
  shawn::EdgeModel::CommunicationDirection arg2 ;
  int result;
  shawn::EdgeModel::CommunicationDirection *argp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::Node **)&jarg1; 
  argp2 = *(shawn::EdgeModel::CommunicationDirection **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null shawn::EdgeModel::CommunicationDirection");
    return 0;
  }
  arg2 = *argp2; 
  result = (int)((shawn::Node const *)arg1)->degree(arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_de_swarmnet_shawn_ShawnJNI_Node_1degree_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  shawn::Node *arg1 = (shawn::Node *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::Node **)&jarg1; 
  result = (int)((shawn::Node const *)arg1)->degree();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_Node_1neighborhood_1w_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  shawn::Node *arg1 = (shawn::Node *) 0 ;
  int arg2 ;
  shawn::EdgeModel::CommunicationDirection arg3 ;
  SwigValueWrapper<shawn::RefcntPointer<shawn::Neighborhood > > result;
  shawn::EdgeModel::CommunicationDirection *argp3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::Node **)&jarg1; 
  arg2 = (int)jarg2; 
  argp3 = *(shawn::EdgeModel::CommunicationDirection **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null shawn::EdgeModel::CommunicationDirection");
    return 0;
  }
  arg3 = *argp3; 
  result = (arg1)->neighborhood_w(arg2,arg3);
  *(shawn::NeighborhoodHandle **)&jresult = new shawn::NeighborhoodHandle((shawn::NeighborhoodHandle &)result); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_Node_1neighborhood_1w_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  shawn::Node *arg1 = (shawn::Node *) 0 ;
  int arg2 ;
  SwigValueWrapper<shawn::RefcntPointer<shawn::Neighborhood > > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::Node **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->neighborhood_w(arg2);
  *(shawn::NeighborhoodHandle **)&jresult = new shawn::NeighborhoodHandle((shawn::NeighborhoodHandle &)result); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_Node_1neighborhood_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  shawn::Node *arg1 = (shawn::Node *) 0 ;
  int arg2 ;
  shawn::EdgeModel::CommunicationDirection arg3 ;
  SwigValueWrapper<shawn::RefcntPointer<shawn::NeighborhoodConst > > result;
  shawn::EdgeModel::CommunicationDirection *argp3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::Node **)&jarg1; 
  arg2 = (int)jarg2; 
  argp3 = *(shawn::EdgeModel::CommunicationDirection **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null shawn::EdgeModel::CommunicationDirection");
    return 0;
  }
  arg3 = *argp3; 
  result = ((shawn::Node const *)arg1)->neighborhood(arg2,arg3);
  *(shawn::NeighborhoodConstHandle **)&jresult = new shawn::NeighborhoodConstHandle((shawn::NeighborhoodConstHandle &)result); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_Node_1neighborhood_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  shawn::Node *arg1 = (shawn::Node *) 0 ;
  int arg2 ;
  SwigValueWrapper<shawn::RefcntPointer<shawn::NeighborhoodConst > > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::Node **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((shawn::Node const *)arg1)->neighborhood(arg2);
  *(shawn::NeighborhoodConstHandle **)&jresult = new shawn::NeighborhoodConstHandle((shawn::NeighborhoodConstHandle &)result); 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_de_swarmnet_shawn_ShawnJNI_Node_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  shawn::Node *arg1 = (shawn::Node *) 0 ;
  shawn::Node *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::Node **)&jarg1; 
  arg2 = *(shawn::Node **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shawn::Node const & reference is null");
    return 0;
  } 
  result = (bool)((shawn::Node const *)arg1)->operator ==((shawn::Node const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_de_swarmnet_shawn_ShawnJNI_Node_1isDifferent(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  shawn::Node *arg1 = (shawn::Node *) 0 ;
  shawn::Node *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::Node **)&jarg1; 
  arg2 = *(shawn::Node **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shawn::Node const & reference is null");
    return 0;
  } 
  result = (bool)((shawn::Node const *)arg1)->operator !=((shawn::Node const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_de_swarmnet_shawn_ShawnJNI_Node_1has_1fixpoint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  shawn::Node *arg1 = (shawn::Node *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::Node **)&jarg1; 
  result = (bool)((shawn::Node const *)arg1)->has_fixpoint();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_de_swarmnet_shawn_ShawnJNI_Node_1component_1extension(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  shawn::Node *arg1 = (shawn::Node *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::Node **)&jarg1; 
  result = (int)((shawn::Node const *)arg1)->component_extension();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_Node_1get_1adjacent_1nodes_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  shawn::Node *arg1 = (shawn::Node *) 0 ;
  shawn::EdgeModel::CommunicationDirection arg2 ;
  SwigValueWrapper<std::set<shawn::Node const * > > result;
  shawn::EdgeModel::CommunicationDirection *argp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::Node **)&jarg1; 
  argp2 = *(shawn::EdgeModel::CommunicationDirection **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null shawn::EdgeModel::CommunicationDirection");
    return 0;
  }
  arg2 = *argp2; 
  result = ((shawn::Node const *)arg1)->get_adjacent_nodes(arg2);
  *(std::set<shawn::Node const * > **)&jresult = new std::set<shawn::Node const * >((std::set<shawn::Node const * > &)result); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_Node_1get_1adjacent_1nodes_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  shawn::Node *arg1 = (shawn::Node *) 0 ;
  SwigValueWrapper<std::set<shawn::Node const * > > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::Node **)&jarg1; 
  result = ((shawn::Node const *)arg1)->get_adjacent_nodes();
  *(std::set<shawn::Node const * > **)&jresult = new std::set<shawn::Node const * >((std::set<shawn::Node const * > &)result); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_Node_1get_1adjacent_1nodes_1w_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  shawn::Node *arg1 = (shawn::Node *) 0 ;
  shawn::EdgeModel::CommunicationDirection arg2 ;
  SwigValueWrapper<std::set<shawn::Node * > > result;
  shawn::EdgeModel::CommunicationDirection *argp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::Node **)&jarg1; 
  argp2 = *(shawn::EdgeModel::CommunicationDirection **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null shawn::EdgeModel::CommunicationDirection");
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->get_adjacent_nodes_w(arg2);
  *(std::set<shawn::Node * > **)&jresult = new std::set<shawn::Node * >((std::set<shawn::Node * > &)result); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_Node_1get_1adjacent_1nodes_1w_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  shawn::Node *arg1 = (shawn::Node *) 0 ;
  SwigValueWrapper<std::set<shawn::Node * > > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::Node **)&jarg1; 
  result = (arg1)->get_adjacent_nodes_w();
  *(std::set<shawn::Node * > **)&jresult = new std::set<shawn::Node * >((std::set<shawn::Node * > &)result); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_new_1SimulationEnvironment(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  shawn::SimulationEnvironment *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (shawn::SimulationEnvironment *)new shawn::SimulationEnvironment();
  *(shawn::SimulationEnvironment **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_delete_1SimulationEnvironment(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  shawn::SimulationEnvironment *arg1 = (shawn::SimulationEnvironment *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::SimulationEnvironment **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_SimulationEnvironment_1push_1parameters(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  shawn::SimulationEnvironment *arg1 = (shawn::SimulationEnvironment *) 0 ;
  shawn::SimulationEnvironment::ParameterSetHandle *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::SimulationEnvironment **)&jarg1; 
  arg2 = *(shawn::SimulationEnvironment::ParameterSetHandle **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shawn::SimulationEnvironment::ParameterSetHandle const & reference is null");
    return ;
  } 
  (arg1)->push_parameters((shawn::SimulationEnvironment::ParameterSetHandle const &)*arg2);
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_SimulationEnvironment_1pop_1parameters(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  shawn::SimulationEnvironment *arg1 = (shawn::SimulationEnvironment *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::SimulationEnvironment **)&jarg1; 
  (arg1)->pop_parameters();
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_SimulationEnvironment_1add_1parameters_1low_1prio(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  shawn::SimulationEnvironment *arg1 = (shawn::SimulationEnvironment *) 0 ;
  shawn::SimulationEnvironment::ParameterSetHandle *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::SimulationEnvironment **)&jarg1; 
  arg2 = *(shawn::SimulationEnvironment::ParameterSetHandle **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shawn::SimulationEnvironment::ParameterSetHandle const & reference is null");
    return ;
  } 
  (arg1)->add_parameters_low_prio((shawn::SimulationEnvironment::ParameterSetHandle const &)*arg2);
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_SimulationEnvironment_1add_1parameters_1high_1prio(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  shawn::SimulationEnvironment *arg1 = (shawn::SimulationEnvironment *) 0 ;
  shawn::SimulationEnvironment::ParameterSetHandle *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::SimulationEnvironment **)&jarg1; 
  arg2 = *(shawn::SimulationEnvironment::ParameterSetHandle **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shawn::SimulationEnvironment::ParameterSetHandle const & reference is null");
    return ;
  } 
  (arg1)->add_parameters_high_prio((shawn::SimulationEnvironment::ParameterSetHandle const &)*arg2);
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_SimulationEnvironment_1add_1parameter_1low_1prio(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3) {
  shawn::SimulationEnvironment *arg1 = (shawn::SimulationEnvironment *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::SimulationEnvironment **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->add_parameter_low_prio((std::string const &)*arg2,(std::string const &)*arg3);
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_SimulationEnvironment_1add_1parameter_1high_1prio(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3) {
  shawn::SimulationEnvironment *arg1 = (shawn::SimulationEnvironment *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::SimulationEnvironment **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->add_parameter_high_prio((std::string const &)*arg2,(std::string const &)*arg3);
}


JNIEXPORT jstring JNICALL Java_de_swarmnet_shawn_ShawnJNI_SimulationEnvironment_1required_1string_1param(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jstring jresult = 0 ;
  shawn::SimulationEnvironment *arg1 = (shawn::SimulationEnvironment *) 0 ;
  std::string *arg2 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::SimulationEnvironment **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    {
      std::string const &_result_ref = ((shawn::SimulationEnvironment const *)arg1)->required_string_param((std::string const &)*arg2);
      result = (std::string *) &_result_ref;
    }
  }
  catch(std::runtime_error &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ std::runtime_error exception thrown");
    return 0; 
  }
  
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_de_swarmnet_shawn_ShawnJNI_SimulationEnvironment_1optional_1string_1param_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3, jlong jarg4) {
  jstring jresult = 0 ;
  shawn::SimulationEnvironment *arg1 = (shawn::SimulationEnvironment *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool *arg4 = (bool *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::SimulationEnvironment **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = *(bool **)&jarg4; 
  try {
    {
      std::string const &_result_ref = ((shawn::SimulationEnvironment const *)arg1)->optional_string_param((std::string const &)*arg2,(std::string const &)*arg3,arg4);
      result = (std::string *) &_result_ref;
    }
  }
  catch(std::runtime_error &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ std::runtime_error exception thrown");
    return 0; 
  }
  
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_de_swarmnet_shawn_ShawnJNI_SimulationEnvironment_1optional_1string_1param_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  shawn::SimulationEnvironment *arg1 = (shawn::SimulationEnvironment *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::SimulationEnvironment **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  try {
    {
      std::string const &_result_ref = ((shawn::SimulationEnvironment const *)arg1)->optional_string_param((std::string const &)*arg2,(std::string const &)*arg3);
      result = (std::string *) &_result_ref;
    }
  }
  catch(std::runtime_error &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ std::runtime_error exception thrown");
    return 0; 
  }
  
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


JNIEXPORT jint JNICALL Java_de_swarmnet_shawn_ShawnJNI_SimulationEnvironment_1required_1int_1param(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  shawn::SimulationEnvironment *arg1 = (shawn::SimulationEnvironment *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::SimulationEnvironment **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    result = (int)((shawn::SimulationEnvironment const *)arg1)->required_int_param((std::string const &)*arg2);
  }
  catch(std::runtime_error &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ std::runtime_error exception thrown");
    return 0; 
  }
  
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_de_swarmnet_shawn_ShawnJNI_SimulationEnvironment_1optional_1int_1param_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3, jlong jarg4) {
  jint jresult = 0 ;
  shawn::SimulationEnvironment *arg1 = (shawn::SimulationEnvironment *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  bool *arg4 = (bool *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::SimulationEnvironment **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  arg4 = *(bool **)&jarg4; 
  try {
    result = (int)((shawn::SimulationEnvironment const *)arg1)->optional_int_param((std::string const &)*arg2,arg3,arg4);
  }
  catch(std::runtime_error &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ std::runtime_error exception thrown");
    return 0; 
  }
  
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_de_swarmnet_shawn_ShawnJNI_SimulationEnvironment_1optional_1int_1param_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3) {
  jint jresult = 0 ;
  shawn::SimulationEnvironment *arg1 = (shawn::SimulationEnvironment *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::SimulationEnvironment **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  try {
    result = (int)((shawn::SimulationEnvironment const *)arg1)->optional_int_param((std::string const &)*arg2,arg3);
  }
  catch(std::runtime_error &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ std::runtime_error exception thrown");
    return 0; 
  }
  
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_de_swarmnet_shawn_ShawnJNI_SimulationEnvironment_1required_1double_1param(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jdouble jresult = 0 ;
  shawn::SimulationEnvironment *arg1 = (shawn::SimulationEnvironment *) 0 ;
  std::string *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::SimulationEnvironment **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    result = (double)((shawn::SimulationEnvironment const *)arg1)->required_double_param((std::string const &)*arg2);
  }
  catch(std::runtime_error &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ std::runtime_error exception thrown");
    return 0; 
  }
  
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_de_swarmnet_shawn_ShawnJNI_SimulationEnvironment_1optional_1double_1param_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jdouble jarg3, jlong jarg4) {
  jdouble jresult = 0 ;
  shawn::SimulationEnvironment *arg1 = (shawn::SimulationEnvironment *) 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  bool *arg4 = (bool *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::SimulationEnvironment **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  arg4 = *(bool **)&jarg4; 
  try {
    result = (double)((shawn::SimulationEnvironment const *)arg1)->optional_double_param((std::string const &)*arg2,arg3,arg4);
  }
  catch(std::runtime_error &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ std::runtime_error exception thrown");
    return 0; 
  }
  
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_de_swarmnet_shawn_ShawnJNI_SimulationEnvironment_1optional_1double_1param_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jdouble jarg3) {
  jdouble jresult = 0 ;
  shawn::SimulationEnvironment *arg1 = (shawn::SimulationEnvironment *) 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::SimulationEnvironment **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  try {
    result = (double)((shawn::SimulationEnvironment const *)arg1)->optional_double_param((std::string const &)*arg2,arg3);
  }
  catch(std::runtime_error &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ std::runtime_error exception thrown");
    return 0; 
  }
  
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_de_swarmnet_shawn_ShawnJNI_SimulationEnvironment_1required_1bool_1param(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jboolean jresult = 0 ;
  shawn::SimulationEnvironment *arg1 = (shawn::SimulationEnvironment *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::SimulationEnvironment **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    result = (bool)((shawn::SimulationEnvironment const *)arg1)->required_bool_param((std::string const &)*arg2);
  }
  catch(std::runtime_error &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ std::runtime_error exception thrown");
    return 0; 
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_de_swarmnet_shawn_ShawnJNI_SimulationEnvironment_1optional_1bool_1param_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jboolean jarg3, jlong jarg4) {
  jboolean jresult = 0 ;
  shawn::SimulationEnvironment *arg1 = (shawn::SimulationEnvironment *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  bool *arg4 = (bool *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::SimulationEnvironment **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = jarg3 ? true : false; 
  arg4 = *(bool **)&jarg4; 
  try {
    result = (bool)((shawn::SimulationEnvironment const *)arg1)->optional_bool_param((std::string const &)*arg2,arg3,arg4);
  }
  catch(std::runtime_error &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ std::runtime_error exception thrown");
    return 0; 
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_de_swarmnet_shawn_ShawnJNI_SimulationEnvironment_1optional_1bool_1param_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jboolean jarg3) {
  jboolean jresult = 0 ;
  shawn::SimulationEnvironment *arg1 = (shawn::SimulationEnvironment *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::SimulationEnvironment **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = jarg3 ? true : false; 
  try {
    result = (bool)((shawn::SimulationEnvironment const *)arg1)->optional_bool_param((std::string const &)*arg2,arg3);
  }
  catch(std::runtime_error &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ std::runtime_error exception thrown");
    return 0; 
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_de_swarmnet_shawn_ShawnJNI_SimulationEnvironment_1find_1param(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  shawn::SimulationEnvironment *arg1 = (shawn::SimulationEnvironment *) 0 ;
  std::string *arg2 = 0 ;
  std::string **arg3 = 0 ;
  bool result;
  std::string *temp3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::SimulationEnvironment **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  temp3 = *(std::string **)&jarg3;
  arg3 = &temp3; 
  result = (bool)((shawn::SimulationEnvironment const *)arg1)->find_param((std::string const &)*arg2,(std::string const *&)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_new_1SimulationController(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  shawn::SimulationController *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (shawn::SimulationController *)new shawn::SimulationController();
  *(shawn::SimulationController **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_delete_1SimulationController(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  shawn::SimulationController *arg1 = (shawn::SimulationController *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::SimulationController **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_SimulationController_1environment(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  shawn::SimulationController *arg1 = (shawn::SimulationController *) 0 ;
  shawn::SimulationEnvironment *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::SimulationController **)&jarg1; 
  {
    shawn::SimulationEnvironment const &_result_ref = ((shawn::SimulationController const *)arg1)->environment();
    result = (shawn::SimulationEnvironment *) &_result_ref;
  }
  *(shawn::SimulationEnvironment **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_SimulationController_1environment_1w(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  shawn::SimulationController *arg1 = (shawn::SimulationController *) 0 ;
  shawn::SimulationEnvironment *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::SimulationController **)&jarg1; 
  {
    shawn::SimulationEnvironment &_result_ref = (arg1)->environment_w();
    result = (shawn::SimulationEnvironment *) &_result_ref;
  }
  *(shawn::SimulationEnvironment **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_SimulationController_1simulation_1task_1keeper(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  shawn::SimulationController *arg1 = (shawn::SimulationController *) 0 ;
  shawn::SimulationTaskKeeper *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::SimulationController **)&jarg1; 
  {
    shawn::SimulationTaskKeeper const &_result_ref = ((shawn::SimulationController const *)arg1)->simulation_task_keeper();
    result = (shawn::SimulationTaskKeeper *) &_result_ref;
  }
  *(shawn::SimulationTaskKeeper **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_SimulationController_1simulation_1task_1keeper_1w(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  shawn::SimulationController *arg1 = (shawn::SimulationController *) 0 ;
  shawn::SimulationTaskKeeper *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::SimulationController **)&jarg1; 
  {
    shawn::SimulationTaskKeeper &_result_ref = (arg1)->simulation_task_keeper_w();
    result = (shawn::SimulationTaskKeeper *) &_result_ref;
  }
  *(shawn::SimulationTaskKeeper **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_SimulationController_1processor_1keeper(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  shawn::SimulationController *arg1 = (shawn::SimulationController *) 0 ;
  shawn::ProcessorKeeper *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::SimulationController **)&jarg1; 
  {
    shawn::ProcessorKeeper const &_result_ref = ((shawn::SimulationController const *)arg1)->processor_keeper();
    result = (shawn::ProcessorKeeper *) &_result_ref;
  }
  *(shawn::ProcessorKeeper **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_SimulationController_1processor_1keeper_1w(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  shawn::SimulationController *arg1 = (shawn::SimulationController *) 0 ;
  shawn::ProcessorKeeper *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::SimulationController **)&jarg1; 
  {
    shawn::ProcessorKeeper &_result_ref = (arg1)->processor_keeper_w();
    result = (shawn::ProcessorKeeper *) &_result_ref;
  }
  *(shawn::ProcessorKeeper **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_SimulationController_1random_1variable_1keeper(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  shawn::SimulationController *arg1 = (shawn::SimulationController *) 0 ;
  shawn::RandomVariableKeeper *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::SimulationController **)&jarg1; 
  {
    shawn::RandomVariableKeeper const &_result_ref = ((shawn::SimulationController const *)arg1)->random_variable_keeper();
    result = (shawn::RandomVariableKeeper *) &_result_ref;
  }
  *(shawn::RandomVariableKeeper **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_SimulationController_1random_1variable_1keeper_1w(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  shawn::SimulationController *arg1 = (shawn::SimulationController *) 0 ;
  shawn::RandomVariableKeeper *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::SimulationController **)&jarg1; 
  {
    shawn::RandomVariableKeeper &_result_ref = (arg1)->random_variable_keeper_w();
    result = (shawn::RandomVariableKeeper *) &_result_ref;
  }
  *(shawn::RandomVariableKeeper **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_SimulationController_1edge_1model_1keeper(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  shawn::SimulationController *arg1 = (shawn::SimulationController *) 0 ;
  shawn::EdgeModelKeeper *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::SimulationController **)&jarg1; 
  {
    shawn::EdgeModelKeeper const &_result_ref = ((shawn::SimulationController const *)arg1)->edge_model_keeper();
    result = (shawn::EdgeModelKeeper *) &_result_ref;
  }
  *(shawn::EdgeModelKeeper **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_SimulationController_1edge_1model_1keeper_1w(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  shawn::SimulationController *arg1 = (shawn::SimulationController *) 0 ;
  shawn::EdgeModelKeeper *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::SimulationController **)&jarg1; 
  {
    shawn::EdgeModelKeeper &_result_ref = (arg1)->edge_model_keeper_w();
    result = (shawn::EdgeModelKeeper *) &_result_ref;
  }
  *(shawn::EdgeModelKeeper **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_SimulationController_1transmission_1model_1keeper(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  shawn::SimulationController *arg1 = (shawn::SimulationController *) 0 ;
  shawn::TransmissionModelKeeper *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::SimulationController **)&jarg1; 
  {
    shawn::TransmissionModelKeeper const &_result_ref = ((shawn::SimulationController const *)arg1)->transmission_model_keeper();
    result = (shawn::TransmissionModelKeeper *) &_result_ref;
  }
  *(shawn::TransmissionModelKeeper **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_SimulationController_1transmission_1model_1keeper_1w(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  shawn::SimulationController *arg1 = (shawn::SimulationController *) 0 ;
  shawn::TransmissionModelKeeper *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::SimulationController **)&jarg1; 
  {
    shawn::TransmissionModelKeeper &_result_ref = (arg1)->transmission_model_keeper_w();
    result = (shawn::TransmissionModelKeeper *) &_result_ref;
  }
  *(shawn::TransmissionModelKeeper **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_SimulationController_1communication_1model_1keeper(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  shawn::SimulationController *arg1 = (shawn::SimulationController *) 0 ;
  shawn::CommunicationModelKeeper *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::SimulationController **)&jarg1; 
  {
    shawn::CommunicationModelKeeper const &_result_ref = ((shawn::SimulationController const *)arg1)->communication_model_keeper();
    result = (shawn::CommunicationModelKeeper *) &_result_ref;
  }
  *(shawn::CommunicationModelKeeper **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_SimulationController_1communication_1model_1keeper_1w(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  shawn::SimulationController *arg1 = (shawn::SimulationController *) 0 ;
  shawn::CommunicationModelKeeper *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::SimulationController **)&jarg1; 
  {
    shawn::CommunicationModelKeeper &_result_ref = (arg1)->communication_model_keeper_w();
    result = (shawn::CommunicationModelKeeper *) &_result_ref;
  }
  *(shawn::CommunicationModelKeeper **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_SimulationController_1distance_1estimate_1keeper(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  shawn::SimulationController *arg1 = (shawn::SimulationController *) 0 ;
  shawn::DistanceEstimateKeeper *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::SimulationController **)&jarg1; 
  {
    shawn::DistanceEstimateKeeper const &_result_ref = ((shawn::SimulationController const *)arg1)->distance_estimate_keeper();
    result = (shawn::DistanceEstimateKeeper *) &_result_ref;
  }
  *(shawn::DistanceEstimateKeeper **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_SimulationController_1distance_1estimate_1keeper_1w(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  shawn::SimulationController *arg1 = (shawn::SimulationController *) 0 ;
  shawn::DistanceEstimateKeeper *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::SimulationController **)&jarg1; 
  {
    shawn::DistanceEstimateKeeper &_result_ref = (arg1)->distance_estimate_keeper_w();
    result = (shawn::DistanceEstimateKeeper *) &_result_ref;
  }
  *(shawn::DistanceEstimateKeeper **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_SimulationController_1tag_1factory_1keeper(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  shawn::SimulationController *arg1 = (shawn::SimulationController *) 0 ;
  shawn::TagFactoryKeeper *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::SimulationController **)&jarg1; 
  {
    shawn::TagFactoryKeeper const &_result_ref = ((shawn::SimulationController const *)arg1)->tag_factory_keeper();
    result = (shawn::TagFactoryKeeper *) &_result_ref;
  }
  *(shawn::TagFactoryKeeper **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_SimulationController_1tag_1factory_1keeper_1w(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  shawn::SimulationController *arg1 = (shawn::SimulationController *) 0 ;
  shawn::TagFactoryKeeper *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::SimulationController **)&jarg1; 
  {
    shawn::TagFactoryKeeper &_result_ref = (arg1)->tag_factory_keeper_w();
    result = (shawn::TagFactoryKeeper *) &_result_ref;
  }
  *(shawn::TagFactoryKeeper **)&jresult = result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_de_swarmnet_shawn_ShawnJNI_SimulationController_1has_1world(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  shawn::SimulationController *arg1 = (shawn::SimulationController *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::SimulationController **)&jarg1; 
  result = (bool)((shawn::SimulationController const *)arg1)->has_world();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_SimulationController_1world_1w(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  shawn::SimulationController *arg1 = (shawn::SimulationController *) 0 ;
  shawn::World *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::SimulationController **)&jarg1; 
  {
    shawn::World &_result_ref = (arg1)->world_w();
    result = (shawn::World *) &_result_ref;
  }
  *(shawn::World **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_SimulationController_1world(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  shawn::SimulationController *arg1 = (shawn::SimulationController *) 0 ;
  shawn::World *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::SimulationController **)&jarg1; 
  {
    shawn::World const &_result_ref = ((shawn::SimulationController const *)arg1)->world();
    result = (shawn::World *) &_result_ref;
  }
  *(shawn::World **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_SimulationController_1set_1world(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  shawn::SimulationController *arg1 = (shawn::SimulationController *) 0 ;
  shawn::World *arg2 = (shawn::World *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::SimulationController **)&jarg1; 
  arg2 = *(shawn::World **)&jarg2; 
  (arg1)->set_world(arg2);
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_SimulationController_1add_1keeper(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  shawn::SimulationController *arg1 = (shawn::SimulationController *) 0 ;
  shawn::HandleKeeperBase *arg2 = (shawn::HandleKeeperBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::SimulationController **)&jarg1; 
  arg2 = *(shawn::HandleKeeperBase **)&jarg2; 
  (arg1)->add_keeper(arg2);
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_new_1ShawnSimulationController(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  shawn::ShawnSimulationController *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (shawn::ShawnSimulationController *)new shawn::ShawnSimulationController();
  *(shawn::ShawnSimulationController **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_delete_1ShawnSimulationController(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  shawn::ShawnSimulationController *arg1 = (shawn::ShawnSimulationController *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::ShawnSimulationController **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jstring JNICALL Java_de_swarmnet_shawn_ShawnJNI_ShawnSimulationController_1WHITE_1SPACE_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    std::string const &_result_ref = shawn::ShawnSimulationController::WHITE_SPACE;
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_ShawnSimulationController_1execute_1command_1line(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  shawn::ShawnSimulationController *arg1 = (shawn::ShawnSimulationController *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::ShawnSimulationController **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    (arg1)->execute_command_line((std::string const &)*arg2);
  }
  catch(std::runtime_error &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ std::runtime_error exception thrown");
    return ; 
  }
  
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_ShawnSimulationController_1execute_1task(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  shawn::ShawnSimulationController *arg1 = (shawn::ShawnSimulationController *) 0 ;
  SwigValueWrapper<shawn::RefcntPointer<shawn::SimulationTask > > arg2 ;
  shawn::SimulationTaskHandle *argp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::ShawnSimulationController **)&jarg1; 
  argp2 = *(shawn::SimulationTaskHandle **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null shawn::SimulationTaskHandle");
    return ;
  }
  arg2 = *argp2; 
  try {
    (arg1)->execute_task(arg2);
  }
  catch(std::runtime_error &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ std::runtime_error exception thrown");
    return ; 
  }
  
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_EventScheduler_1NO_1EVENT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  shawn::EventScheduler::EventHandle result;
  
  (void)jenv;
  (void)jcls;
  result = (shawn::EventScheduler::EventHandle)(shawn::EventScheduler::EventHandle)shawn::EventScheduler::NO_EVENT;
  *(shawn::EventScheduler::EventHandle *)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_new_1EventScheduler(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  shawn::EventScheduler *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (shawn::EventScheduler *)new shawn::EventScheduler();
  *(shawn::EventScheduler **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_delete_1EventScheduler(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  shawn::EventScheduler *arg1 = (shawn::EventScheduler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::EventScheduler **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_EventScheduler_1new_1event(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdouble jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  shawn::EventScheduler *arg1 = (shawn::EventScheduler *) 0 ;
  shawn::EventScheduler::EventHandler *arg2 = 0 ;
  double arg3 ;
  shawn::EventScheduler::EventTagHandle *arg4 = 0 ;
  shawn::EventScheduler::EventHandle result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::EventScheduler **)&jarg1; 
  arg2 = *(shawn::EventScheduler::EventHandler **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shawn::EventScheduler::EventHandler & reference is null");
    return 0;
  } 
  arg3 = (double)jarg3; 
  arg4 = *(shawn::EventScheduler::EventTagHandle **)&jarg4;
  if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shawn::EventScheduler::EventTagHandle const & reference is null");
    return 0;
  } 
  result = (shawn::EventScheduler::EventHandle)(arg1)->new_event(*arg2,arg3,(shawn::EventScheduler::EventTagHandle const &)*arg4);
  *(shawn::EventScheduler::EventHandle *)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_EventScheduler_1delete_1event(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  shawn::EventScheduler *arg1 = (shawn::EventScheduler *) 0 ;
  shawn::EventScheduler::EventHandle arg2 = (shawn::EventScheduler::EventHandle) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::EventScheduler **)&jarg1; 
  arg2 = *(shawn::EventScheduler::EventHandle *)&jarg2; 
  (arg1)->delete_event(arg2);
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_EventScheduler_1move_1event(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdouble jarg3) {
  shawn::EventScheduler *arg1 = (shawn::EventScheduler *) 0 ;
  shawn::EventScheduler::EventHandle arg2 = (shawn::EventScheduler::EventHandle) 0 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::EventScheduler **)&jarg1; 
  arg2 = *(shawn::EventScheduler::EventHandle *)&jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->move_event(arg2,arg3);
}


JNIEXPORT jdouble JNICALL Java_de_swarmnet_shawn_ShawnJNI_EventScheduler_1current_1time(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  shawn::EventScheduler *arg1 = (shawn::EventScheduler *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::EventScheduler **)&jarg1; 
  result = (double)((shawn::EventScheduler const *)arg1)->current_time();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_de_swarmnet_shawn_ShawnJNI_EventScheduler_1next_1event_1time(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  shawn::EventScheduler *arg1 = (shawn::EventScheduler *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::EventScheduler **)&jarg1; 
  result = (double)((shawn::EventScheduler const *)arg1)->next_event_time();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_de_swarmnet_shawn_ShawnJNI_EventScheduler_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  shawn::EventScheduler *arg1 = (shawn::EventScheduler *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::EventScheduler **)&jarg1; 
  result = (bool)((shawn::EventScheduler const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_EventScheduler_1front_1w(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  shawn::EventScheduler *arg1 = (shawn::EventScheduler *) 0 ;
  shawn::EventScheduler::EventHandle result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::EventScheduler **)&jarg1; 
  result = (shawn::EventScheduler::EventHandle)(arg1)->front_w();
  *(shawn::EventScheduler::EventHandle *)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_EventScheduler_1front(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  shawn::EventScheduler *arg1 = (shawn::EventScheduler *) 0 ;
  shawn::EventScheduler::EventHandle result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::EventScheduler **)&jarg1; 
  result = (shawn::EventScheduler::EventHandle)((shawn::EventScheduler const *)arg1)->front();
  *(shawn::EventScheduler::EventHandle *)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_EventScheduler_1playback(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  shawn::EventScheduler *arg1 = (shawn::EventScheduler *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::EventScheduler **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->playback(arg2);
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_EventScheduler_1clear_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  shawn::EventScheduler *arg1 = (shawn::EventScheduler *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::EventScheduler **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->clear(arg2);
}


JNIEXPORT void JNICALL Java_de_swarmnet_shawn_ShawnJNI_EventScheduler_1clear_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  shawn::EventScheduler *arg1 = (shawn::EventScheduler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shawn::EventScheduler **)&jarg1; 
  (arg1)->clear();
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_master_1init(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  shawn::ShawnSimulationController *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (shawn::ShawnSimulationController *)master_init();
  *(shawn::ShawnSimulationController **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_SWIGTagContainerUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(shawn::RefcntPointable **)&baseptr = *(shawn::TagContainer **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_SWIGTagUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(shawn::TagContainer **)&baseptr = *(shawn::Tag **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_SWIGKeeperManagedUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(shawn::RefcntPointable **)&baseptr = *(shawn::KeeperManaged **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_SWIGSimulationTaskUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(shawn::KeeperManaged **)&baseptr = *(shawn::SimulationTask **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_SWIGNodeMovementUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(shawn::RefcntPointable **)&baseptr = *(shawn::NodeMovement **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_SWIGMessageUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(shawn::RefcntPointable **)&baseptr = *(shawn::Message **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_SWIGProcessorUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(shawn::RefcntPointable **)&baseptr = *(shawn::Processor **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_SWIGWorldUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(shawn::TagContainer **)&baseptr = *(shawn::World **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_SWIGNeighborhoodUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(shawn::RefcntPointable **)&baseptr = *(shawn::Neighborhood **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_SWIGNeighborhoodConstUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(shawn::RefcntPointable **)&baseptr = *(shawn::NeighborhoodConst **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_SWIGNodeUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(shawn::TagContainer **)&baseptr = *(shawn::Node **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_SWIGSimulationEnvironmentUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(shawn::TagContainer **)&baseptr = *(shawn::SimulationEnvironment **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_de_swarmnet_shawn_ShawnJNI_SWIGShawnSimulationControllerUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(shawn::SimulationController **)&baseptr = *(shawn::ShawnSimulationController **)&jarg1;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

